// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// User model for authentication and profiles
model User {
  id            String    @id @default(cuid())
  name          String?
  firstName     String?
  lastName      String?
  username      String?   @unique
  email         String    @unique
  emailVerified DateTime?
  password      String? // Hashed password, consider using Auth.js or similar
  image         String?   // Profile image URL
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Profile information
  height        Float?    // In cm
  weight        Float?    // In kg
  goalWeight    Float?
  dateOfBirth   DateTime?
  gender        String?
  fitnessLevel  String?   // Beginner, Intermediate, Advanced
  memberSince   DateTime  @default(now())
  
  // NextAuth relationships
  accounts            Account[]
  sessions            Session[]
  
  // Relationships
  workoutHistory      WorkoutHistory[]
  favoriteWorkouts    FavoriteWorkout[]
  favoriteMeditations FavoriteMeditation[]
  favoriteYogaSessions FavoriteYogaSession[]
  favoriteRecipes     FavoriteRecipe[]
  scheduledEvents     ScheduledEvent[]
  weightHistory       WeightHistory[]
  achievements        UserAchievement[]
  settings            UserSettings?
}

model UserSettings {
  id                String  @id @default(cuid())
  userId            String  @unique
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  notificationsEnabled Boolean @default(true)
  emailNotifications   Boolean @default(true)
  darkMode             Boolean @default(false)
  language             String  @default("en")
  measurementUnit      String  @default("metric") // metric or imperial
  privacySettings      String?   // JSON object for detailed privacy settings (stored as string)
}

// Workout models
model Workout {
  id           Int      @id @default(autoincrement())
  title        String
  description  String
  category     String   // Strength, Cardio, Core, Flexibility, HIIT, etc.
  difficulty   String   // Beginner, Intermediate, Advanced
  duration     Int      // In minutes
  calories     Int      // Estimated calories burned
  muscleGroups String   // Array of muscle groups targeted (comma-separated)
  imageUrl     String?
  videoUrl     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relationships
  exercises       WorkoutExercise[]
  workoutHistory  WorkoutHistory[]
  favoriteBy      FavoriteWorkout[]
  scheduledEvents ScheduledEvent[]
  
  // Metadata
  rating       Float    @default(0) // Average rating
  ratingCount  Int      @default(0)
}

model Exercise {
  id              Int      @id @default(autoincrement())
  name            String
  description     String
  instructions    String
  muscleGroups    String   // Primary muscles targeted (comma-separated)
  equipment       String   // Required equipment (comma-separated)
  difficultyLevel String   // Beginner, Intermediate, Advanced
  imageUrl        String?
  videoUrl        String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relationships
  workouts WorkoutExercise[]
}

model WorkoutExercise {
  id         Int      @id @default(autoincrement())
  workoutId  Int
  exerciseId Int
  sets       Int?
  reps       String?  // Can be a range like "8-12" or a time duration
  weight     Float?   // Optional weight in kg
  restTime   Int?     // Rest time in seconds
  notes      String?
  order      Int      // Order in the workout
  
  // Relationships
  workout    Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  
  @@unique([workoutId, exerciseId, order])
}

// Meditation models
model MeditationSession {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  category    String   // Mindfulness, Stress Reduction, Sleep, Focus, etc.
  duration    Int      // In minutes
  level       String   // Beginner, Intermediate, Advanced, All Levels
  instructor  String
  audioUrl    String
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  favoriteBy      FavoriteMeditation[]
  scheduledEvents ScheduledEvent[]
  
  // Metadata
  rating       Float    @default(0)
  ratingCount  Int      @default(0)
}

// Yoga models
model YogaSession {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  style       String   // Vinyasa, Hatha, Power, Yin, etc.
  duration    Int      // In minutes
  level       String   // Beginner, Intermediate, Advanced, All Levels
  instructor  String
  benefits    String   // Array of benefits (comma-separated)
  videoUrl    String
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  favoriteBy      FavoriteYogaSession[]
  scheduledEvents ScheduledEvent[]
  
  // Metadata
  rating       Float    @default(0)
  ratingCount  Int      @default(0)
}

// Recipe models
model Recipe {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  category    String   // Breakfast, Lunch, Dinner, Snack, etc.
  difficulty  String   // Easy, Medium, Hard
  prepTime    Int      // In minutes
  cookTime    Int      // In minutes
  servings    Int
  calories    Int      // Per serving
  protein     Float?   // In grams
  carbs       Float?   // In grams
  fat         Float?   // In grams
  tags        String   // Dietary tags (comma-separated)
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  ingredients RecipeIngredient[]
  instructions RecipeInstruction[]
  favoriteBy   FavoriteRecipe[]
  
  // Metadata
  rating       Float    @default(0)
  ratingCount  Int      @default(0)
  author       String?
}

model Ingredient {
  id           Int      @id @default(autoincrement())
  name         String   @unique
  calories     Int?     // Per 100g
  protein      Float?   // In grams
  carbs        Float?   // In grams
  fat          Float?   // In grams
  
  // Relationships
  recipes RecipeIngredient[]
}

model RecipeIngredient {
  id           Int      @id @default(autoincrement())
  recipeId     Int
  ingredientId Int
  quantity     String
  unit         String
  
  // Relationships
  recipe       Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  
  @@unique([recipeId, ingredientId])
}

model RecipeInstruction {
  id           Int      @id @default(autoincrement())
  recipeId     Int
  stepNumber   Int
  instruction  String
  
  // Relationships
  recipe       Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  
  @@unique([recipeId, stepNumber])
}

// Blog models
model BlogPost {
  id        Int      @id @default(autoincrement())
  title     String
  content   String   // Long text content
  excerpt   String
  category  String
  tags      String   // Array of tags (comma-separated)
  imageUrl  String?
  author    String
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  publishedAt DateTime?
}

// Scheduling and progress tracking
model ScheduledEvent {
  id        String   @id @default(cuid())
  userId    String
  title     String
  date      DateTime
  time      String
  duration  Int      // In minutes
  eventType String   // Workout, Meditation, Yoga, etc.
  completed Boolean  @default(false)
  notes     String?
  
  // Optional relations based on event type
  workoutId Int?
  workout   Workout? @relation(fields: [workoutId], references: [id])
  
  meditationId Int?
  meditation   MeditationSession? @relation(fields: [meditationId], references: [id])
  
  yogaId Int?
  yoga   YogaSession? @relation(fields: [yogaId], references: [id])
  
  // User relation
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WorkoutHistory {
  id          String   @id @default(cuid())
  userId      String
  workoutId   Int
  completedAt DateTime @default(now())
  duration    Int      // Actual duration in minutes
  notes       String?
  rating      Int?     // User's rating (1-5)
  
  // Exercise results - serialized as JSON for flexibility
  exerciseResults String?   // JSON string
  
  // Relationships
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  workout Workout @relation(fields: [workoutId], references: [id])
}

// User favorites
model FavoriteWorkout {
  id        String   @id @default(cuid())
  userId    String
  workoutId Int
  addedAt   DateTime @default(now())
  
  // Relationships
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  workout Workout @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  
  @@unique([userId, workoutId])
}

model FavoriteMeditation {
  id           String   @id @default(cuid())
  userId       String
  meditationId Int
  addedAt      DateTime @default(now())
  
  // Relationships
  user       User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  meditation MeditationSession @relation(fields: [meditationId], references: [id], onDelete: Cascade)
  
  @@unique([userId, meditationId])
}

model FavoriteYogaSession {
  id          String   @id @default(cuid())
  userId      String
  yogaId      Int
  addedAt     DateTime @default(now())
  
  // Relationships
  user User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  yoga YogaSession   @relation(fields: [yogaId], references: [id], onDelete: Cascade)
  
  @@unique([userId, yogaId])
}

model FavoriteRecipe {
  id        String   @id @default(cuid())
  userId    String
  recipeId  Int
  addedAt   DateTime @default(now())
  
  // Relationships
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe  Recipe  @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  
  @@unique([userId, recipeId])
}

// User progress tracking
model WeightHistory {
  id        String   @id @default(cuid())
  userId    String
  weight    Float    // In kg
  date      DateTime @default(now())
  notes     String?
  
  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Achievement system
model Achievement {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  category    String   // Workout, Consistency, Weight, etc.
  imageUrl    String?
  criteria    String   // JSON string for achievement criteria
  
  // Relationships
  users UserAchievement[]
}

model UserAchievement {
  id            String     @id @default(cuid())
  userId        String
  achievementId String
  achievedAt    DateTime   @default(now())
  
  // Relationships
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  
  @@unique([userId, achievementId])
}

// NextAuth required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
