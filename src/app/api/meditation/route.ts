import { NextRequest, NextResponse } from 'next/server';

// Types for meditation content
interface MeditationContent {
  id: number;
  title: string;
  category: string;
  duration: number;
  level: string;
  instructor: string;
  description: string;
  rating: number;
  audioUrl?: string;
  imageUrl?: string;
  tags?: string[];
}

interface MeditationGenerationRequest {
  topic: string;
  duration: number;
  voice?: string;
  style?: string;
}

// Mock meditation database (replace with actual database)
const MEDITATION_SESSIONS: MeditationContent[] = [
  {
    id: 1,
    title: "Morning Mindfulness",
    category: "Mindfulness",
    duration: 10,
    level: "Beginner",
    instructor: "Sarah Johnson",
    description: "Start your day with clarity and intention through this guided mindfulness practice.",
    rating: 4.8,
    imageUrl: "/assets/meditations/morning-mindfulness.jpg",
    audioUrl: "/assets/audio/morning-mindfulness.mp3",
    tags: ["morning", "energy", "focus"]
  },
  {
    id: 2,
    title: "Stress Relief Meditation",
    category: "Stress Reduction",
    duration: 15,
    level: "All Levels",
    instructor: "Michael Chen",
    description: "Release tension and calm your nervous system with this stress-reducing guided meditation.",
    rating: 4.7,
    imageUrl: "/assets/meditations/stress-relief.jpg",
    audioUrl: "/assets/audio/stress-relief.mp3",
    tags: ["stress", "anxiety", "relaxation"]
  },
  {
    id: 3,
    title: "Deep Sleep Relaxation",
    category: "Sleep",
    duration: 20,
    level: "All Levels",
    instructor: "Emma Wilson",
    description: "Prepare your mind and body for restful sleep with this calming bedtime meditation.",
    rating: 4.9,
    imageUrl: "/assets/meditations/deep-sleep.jpg",
    audioUrl: "/assets/audio/deep-sleep.mp3",
    tags: ["sleep", "night", "insomnia"]
  }
];

// GET - Fetch meditation sessions
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const category = searchParams.get('category');
    const duration = searchParams.get('duration');
    const level = searchParams.get('level');
    const search = searchParams.get('search');

    let filteredSessions = [...MEDITATION_SESSIONS];

    // Apply filters
    if (category && category !== 'All') {
      filteredSessions = filteredSessions.filter(session => 
        session.category === category
      );
    }

    if (duration && duration !== 'All') {
      filteredSessions = filteredSessions.filter(session => {
        if (duration === 'Under 10 min') return session.duration < 10;
        if (duration === '10-15 min') return session.duration >= 10 && session.duration <= 15;
        if (duration === 'Over 15 min') return session.duration > 15;
        return true;
      });
    }

    if (level && level !== 'All') {
      filteredSessions = filteredSessions.filter(session => 
        session.level === level
      );
    }

    if (search) {
      const searchLower = search.toLowerCase();
      filteredSessions = filteredSessions.filter(session =>
        session.title.toLowerCase().includes(searchLower) ||
        session.description.toLowerCase().includes(searchLower) ||
        session.instructor.toLowerCase().includes(searchLower) ||
        session.tags?.some(tag => tag.toLowerCase().includes(searchLower))
      );
    }

    return NextResponse.json({
      success: true,
      data: filteredSessions,
      total: filteredSessions.length
    });

  } catch (error) {
    console.error('Error fetching meditation sessions:', error);
    return NextResponse.json(
      { success: false, error: 'Failed to fetch meditation sessions' },
      { status: 500 }
    );
  }
}

// POST - Generate custom meditation content
export async function POST(request: NextRequest) {
  try {
    const body: MeditationGenerationRequest = await request.json();
    const { topic, duration, voice = 'calm', style = 'guided' } = body;

    if (!topic || !duration) {
      return NextResponse.json(
        { success: false, error: 'Topic and duration are required' },
        { status: 400 }
      );
    }

    // Here you would integrate with AI meditation generation APIs
    // For now, we'll return a mock response
    const generatedMeditation = {
      id: Date.now(),
      title: `Custom ${topic} Meditation`,
      category: "Custom",
      duration,
      level: "All Levels",
      instructor: "AI Generated",
      description: `A personalized ${duration}-minute meditation focused on ${topic}. Generated specifically for your needs.`,
      rating: 0,
      audioUrl: null, // Would be generated by AI service
      imageUrl: null, // Would be generated by AI service
      tags: [topic.toLowerCase()],
      generatedAt: new Date().toISOString(),
      voice,
      style
    };

    return NextResponse.json({
      success: true,
      data: generatedMeditation,
      message: 'Custom meditation generated successfully'
    });

  } catch (error) {
    console.error('Error generating meditation:', error);
    return NextResponse.json(
      { success: false, error: 'Failed to generate meditation' },
      { status: 500 }
    );
  }
}

// PUT - Update meditation (favorites, ratings, etc.)
export async function PUT(request: NextRequest) {
  try {
    const body = await request.json();
    const { id, action, value } = body;

    if (!id || !action) {
      return NextResponse.json(
        { success: false, error: 'ID and action are required' },
        { status: 400 }
      );
    }

    // Here you would update the meditation in your database
    // For now, we'll return a mock response
    return NextResponse.json({
      success: true,
      message: `Meditation ${id} ${action} updated successfully`,
      data: { id, action, value }
    });

  } catch (error) {
    console.error('Error updating meditation:', error);
    return NextResponse.json(
      { success: false, error: 'Failed to update meditation' },
      { status: 500 }
    );
  }
} 