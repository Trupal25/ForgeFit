
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model UserSettings
 * 
 */
export type UserSettings = $Result.DefaultSelection<Prisma.$UserSettingsPayload>
/**
 * Model Workout
 * 
 */
export type Workout = $Result.DefaultSelection<Prisma.$WorkoutPayload>
/**
 * Model Exercise
 * 
 */
export type Exercise = $Result.DefaultSelection<Prisma.$ExercisePayload>
/**
 * Model WorkoutExercise
 * 
 */
export type WorkoutExercise = $Result.DefaultSelection<Prisma.$WorkoutExercisePayload>
/**
 * Model MeditationSession
 * 
 */
export type MeditationSession = $Result.DefaultSelection<Prisma.$MeditationSessionPayload>
/**
 * Model YogaSession
 * 
 */
export type YogaSession = $Result.DefaultSelection<Prisma.$YogaSessionPayload>
/**
 * Model Recipe
 * 
 */
export type Recipe = $Result.DefaultSelection<Prisma.$RecipePayload>
/**
 * Model Ingredient
 * 
 */
export type Ingredient = $Result.DefaultSelection<Prisma.$IngredientPayload>
/**
 * Model RecipeIngredient
 * 
 */
export type RecipeIngredient = $Result.DefaultSelection<Prisma.$RecipeIngredientPayload>
/**
 * Model RecipeInstruction
 * 
 */
export type RecipeInstruction = $Result.DefaultSelection<Prisma.$RecipeInstructionPayload>
/**
 * Model BlogPost
 * 
 */
export type BlogPost = $Result.DefaultSelection<Prisma.$BlogPostPayload>
/**
 * Model ScheduledEvent
 * 
 */
export type ScheduledEvent = $Result.DefaultSelection<Prisma.$ScheduledEventPayload>
/**
 * Model WorkoutHistory
 * 
 */
export type WorkoutHistory = $Result.DefaultSelection<Prisma.$WorkoutHistoryPayload>
/**
 * Model FavoriteWorkout
 * 
 */
export type FavoriteWorkout = $Result.DefaultSelection<Prisma.$FavoriteWorkoutPayload>
/**
 * Model FavoriteMeditation
 * 
 */
export type FavoriteMeditation = $Result.DefaultSelection<Prisma.$FavoriteMeditationPayload>
/**
 * Model FavoriteYogaSession
 * 
 */
export type FavoriteYogaSession = $Result.DefaultSelection<Prisma.$FavoriteYogaSessionPayload>
/**
 * Model FavoriteRecipe
 * 
 */
export type FavoriteRecipe = $Result.DefaultSelection<Prisma.$FavoriteRecipePayload>
/**
 * Model WeightHistory
 * 
 */
export type WeightHistory = $Result.DefaultSelection<Prisma.$WeightHistoryPayload>
/**
 * Model Achievement
 * 
 */
export type Achievement = $Result.DefaultSelection<Prisma.$AchievementPayload>
/**
 * Model UserAchievement
 * 
 */
export type UserAchievement = $Result.DefaultSelection<Prisma.$UserAchievementPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.userSettings`: Exposes CRUD operations for the **UserSettings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserSettings
    * const userSettings = await prisma.userSettings.findMany()
    * ```
    */
  get userSettings(): Prisma.UserSettingsDelegate<ExtArgs>;

  /**
   * `prisma.workout`: Exposes CRUD operations for the **Workout** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Workouts
    * const workouts = await prisma.workout.findMany()
    * ```
    */
  get workout(): Prisma.WorkoutDelegate<ExtArgs>;

  /**
   * `prisma.exercise`: Exposes CRUD operations for the **Exercise** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Exercises
    * const exercises = await prisma.exercise.findMany()
    * ```
    */
  get exercise(): Prisma.ExerciseDelegate<ExtArgs>;

  /**
   * `prisma.workoutExercise`: Exposes CRUD operations for the **WorkoutExercise** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkoutExercises
    * const workoutExercises = await prisma.workoutExercise.findMany()
    * ```
    */
  get workoutExercise(): Prisma.WorkoutExerciseDelegate<ExtArgs>;

  /**
   * `prisma.meditationSession`: Exposes CRUD operations for the **MeditationSession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MeditationSessions
    * const meditationSessions = await prisma.meditationSession.findMany()
    * ```
    */
  get meditationSession(): Prisma.MeditationSessionDelegate<ExtArgs>;

  /**
   * `prisma.yogaSession`: Exposes CRUD operations for the **YogaSession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more YogaSessions
    * const yogaSessions = await prisma.yogaSession.findMany()
    * ```
    */
  get yogaSession(): Prisma.YogaSessionDelegate<ExtArgs>;

  /**
   * `prisma.recipe`: Exposes CRUD operations for the **Recipe** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Recipes
    * const recipes = await prisma.recipe.findMany()
    * ```
    */
  get recipe(): Prisma.RecipeDelegate<ExtArgs>;

  /**
   * `prisma.ingredient`: Exposes CRUD operations for the **Ingredient** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ingredients
    * const ingredients = await prisma.ingredient.findMany()
    * ```
    */
  get ingredient(): Prisma.IngredientDelegate<ExtArgs>;

  /**
   * `prisma.recipeIngredient`: Exposes CRUD operations for the **RecipeIngredient** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RecipeIngredients
    * const recipeIngredients = await prisma.recipeIngredient.findMany()
    * ```
    */
  get recipeIngredient(): Prisma.RecipeIngredientDelegate<ExtArgs>;

  /**
   * `prisma.recipeInstruction`: Exposes CRUD operations for the **RecipeInstruction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RecipeInstructions
    * const recipeInstructions = await prisma.recipeInstruction.findMany()
    * ```
    */
  get recipeInstruction(): Prisma.RecipeInstructionDelegate<ExtArgs>;

  /**
   * `prisma.blogPost`: Exposes CRUD operations for the **BlogPost** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BlogPosts
    * const blogPosts = await prisma.blogPost.findMany()
    * ```
    */
  get blogPost(): Prisma.BlogPostDelegate<ExtArgs>;

  /**
   * `prisma.scheduledEvent`: Exposes CRUD operations for the **ScheduledEvent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ScheduledEvents
    * const scheduledEvents = await prisma.scheduledEvent.findMany()
    * ```
    */
  get scheduledEvent(): Prisma.ScheduledEventDelegate<ExtArgs>;

  /**
   * `prisma.workoutHistory`: Exposes CRUD operations for the **WorkoutHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkoutHistories
    * const workoutHistories = await prisma.workoutHistory.findMany()
    * ```
    */
  get workoutHistory(): Prisma.WorkoutHistoryDelegate<ExtArgs>;

  /**
   * `prisma.favoriteWorkout`: Exposes CRUD operations for the **FavoriteWorkout** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FavoriteWorkouts
    * const favoriteWorkouts = await prisma.favoriteWorkout.findMany()
    * ```
    */
  get favoriteWorkout(): Prisma.FavoriteWorkoutDelegate<ExtArgs>;

  /**
   * `prisma.favoriteMeditation`: Exposes CRUD operations for the **FavoriteMeditation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FavoriteMeditations
    * const favoriteMeditations = await prisma.favoriteMeditation.findMany()
    * ```
    */
  get favoriteMeditation(): Prisma.FavoriteMeditationDelegate<ExtArgs>;

  /**
   * `prisma.favoriteYogaSession`: Exposes CRUD operations for the **FavoriteYogaSession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FavoriteYogaSessions
    * const favoriteYogaSessions = await prisma.favoriteYogaSession.findMany()
    * ```
    */
  get favoriteYogaSession(): Prisma.FavoriteYogaSessionDelegate<ExtArgs>;

  /**
   * `prisma.favoriteRecipe`: Exposes CRUD operations for the **FavoriteRecipe** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FavoriteRecipes
    * const favoriteRecipes = await prisma.favoriteRecipe.findMany()
    * ```
    */
  get favoriteRecipe(): Prisma.FavoriteRecipeDelegate<ExtArgs>;

  /**
   * `prisma.weightHistory`: Exposes CRUD operations for the **WeightHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WeightHistories
    * const weightHistories = await prisma.weightHistory.findMany()
    * ```
    */
  get weightHistory(): Prisma.WeightHistoryDelegate<ExtArgs>;

  /**
   * `prisma.achievement`: Exposes CRUD operations for the **Achievement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Achievements
    * const achievements = await prisma.achievement.findMany()
    * ```
    */
  get achievement(): Prisma.AchievementDelegate<ExtArgs>;

  /**
   * `prisma.userAchievement`: Exposes CRUD operations for the **UserAchievement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserAchievements
    * const userAchievements = await prisma.userAchievement.findMany()
    * ```
    */
  get userAchievement(): Prisma.UserAchievementDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    UserSettings: 'UserSettings',
    Workout: 'Workout',
    Exercise: 'Exercise',
    WorkoutExercise: 'WorkoutExercise',
    MeditationSession: 'MeditationSession',
    YogaSession: 'YogaSession',
    Recipe: 'Recipe',
    Ingredient: 'Ingredient',
    RecipeIngredient: 'RecipeIngredient',
    RecipeInstruction: 'RecipeInstruction',
    BlogPost: 'BlogPost',
    ScheduledEvent: 'ScheduledEvent',
    WorkoutHistory: 'WorkoutHistory',
    FavoriteWorkout: 'FavoriteWorkout',
    FavoriteMeditation: 'FavoriteMeditation',
    FavoriteYogaSession: 'FavoriteYogaSession',
    FavoriteRecipe: 'FavoriteRecipe',
    WeightHistory: 'WeightHistory',
    Achievement: 'Achievement',
    UserAchievement: 'UserAchievement'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "userSettings" | "workout" | "exercise" | "workoutExercise" | "meditationSession" | "yogaSession" | "recipe" | "ingredient" | "recipeIngredient" | "recipeInstruction" | "blogPost" | "scheduledEvent" | "workoutHistory" | "favoriteWorkout" | "favoriteMeditation" | "favoriteYogaSession" | "favoriteRecipe" | "weightHistory" | "achievement" | "userAchievement"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      UserSettings: {
        payload: Prisma.$UserSettingsPayload<ExtArgs>
        fields: Prisma.UserSettingsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserSettingsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserSettingsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload>
          }
          findFirst: {
            args: Prisma.UserSettingsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserSettingsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload>
          }
          findMany: {
            args: Prisma.UserSettingsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload>[]
          }
          create: {
            args: Prisma.UserSettingsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload>
          }
          createMany: {
            args: Prisma.UserSettingsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserSettingsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload>[]
          }
          delete: {
            args: Prisma.UserSettingsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload>
          }
          update: {
            args: Prisma.UserSettingsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload>
          }
          deleteMany: {
            args: Prisma.UserSettingsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserSettingsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserSettingsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload>
          }
          aggregate: {
            args: Prisma.UserSettingsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserSettings>
          }
          groupBy: {
            args: Prisma.UserSettingsGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserSettingsGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserSettingsCountArgs<ExtArgs>
            result: $Utils.Optional<UserSettingsCountAggregateOutputType> | number
          }
        }
      }
      Workout: {
        payload: Prisma.$WorkoutPayload<ExtArgs>
        fields: Prisma.WorkoutFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkoutFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkoutFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutPayload>
          }
          findFirst: {
            args: Prisma.WorkoutFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkoutFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutPayload>
          }
          findMany: {
            args: Prisma.WorkoutFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutPayload>[]
          }
          create: {
            args: Prisma.WorkoutCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutPayload>
          }
          createMany: {
            args: Prisma.WorkoutCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkoutCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutPayload>[]
          }
          delete: {
            args: Prisma.WorkoutDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutPayload>
          }
          update: {
            args: Prisma.WorkoutUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutPayload>
          }
          deleteMany: {
            args: Prisma.WorkoutDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkoutUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WorkoutUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutPayload>
          }
          aggregate: {
            args: Prisma.WorkoutAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkout>
          }
          groupBy: {
            args: Prisma.WorkoutGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkoutGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkoutCountArgs<ExtArgs>
            result: $Utils.Optional<WorkoutCountAggregateOutputType> | number
          }
        }
      }
      Exercise: {
        payload: Prisma.$ExercisePayload<ExtArgs>
        fields: Prisma.ExerciseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExerciseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExerciseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          findFirst: {
            args: Prisma.ExerciseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExerciseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          findMany: {
            args: Prisma.ExerciseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>[]
          }
          create: {
            args: Prisma.ExerciseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          createMany: {
            args: Prisma.ExerciseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ExerciseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>[]
          }
          delete: {
            args: Prisma.ExerciseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          update: {
            args: Prisma.ExerciseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          deleteMany: {
            args: Prisma.ExerciseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ExerciseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ExerciseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          aggregate: {
            args: Prisma.ExerciseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExercise>
          }
          groupBy: {
            args: Prisma.ExerciseGroupByArgs<ExtArgs>
            result: $Utils.Optional<ExerciseGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExerciseCountArgs<ExtArgs>
            result: $Utils.Optional<ExerciseCountAggregateOutputType> | number
          }
        }
      }
      WorkoutExercise: {
        payload: Prisma.$WorkoutExercisePayload<ExtArgs>
        fields: Prisma.WorkoutExerciseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkoutExerciseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutExercisePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkoutExerciseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutExercisePayload>
          }
          findFirst: {
            args: Prisma.WorkoutExerciseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutExercisePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkoutExerciseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutExercisePayload>
          }
          findMany: {
            args: Prisma.WorkoutExerciseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutExercisePayload>[]
          }
          create: {
            args: Prisma.WorkoutExerciseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutExercisePayload>
          }
          createMany: {
            args: Prisma.WorkoutExerciseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkoutExerciseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutExercisePayload>[]
          }
          delete: {
            args: Prisma.WorkoutExerciseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutExercisePayload>
          }
          update: {
            args: Prisma.WorkoutExerciseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutExercisePayload>
          }
          deleteMany: {
            args: Prisma.WorkoutExerciseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkoutExerciseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WorkoutExerciseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutExercisePayload>
          }
          aggregate: {
            args: Prisma.WorkoutExerciseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkoutExercise>
          }
          groupBy: {
            args: Prisma.WorkoutExerciseGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkoutExerciseGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkoutExerciseCountArgs<ExtArgs>
            result: $Utils.Optional<WorkoutExerciseCountAggregateOutputType> | number
          }
        }
      }
      MeditationSession: {
        payload: Prisma.$MeditationSessionPayload<ExtArgs>
        fields: Prisma.MeditationSessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MeditationSessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeditationSessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MeditationSessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeditationSessionPayload>
          }
          findFirst: {
            args: Prisma.MeditationSessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeditationSessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MeditationSessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeditationSessionPayload>
          }
          findMany: {
            args: Prisma.MeditationSessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeditationSessionPayload>[]
          }
          create: {
            args: Prisma.MeditationSessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeditationSessionPayload>
          }
          createMany: {
            args: Prisma.MeditationSessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MeditationSessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeditationSessionPayload>[]
          }
          delete: {
            args: Prisma.MeditationSessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeditationSessionPayload>
          }
          update: {
            args: Prisma.MeditationSessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeditationSessionPayload>
          }
          deleteMany: {
            args: Prisma.MeditationSessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MeditationSessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MeditationSessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeditationSessionPayload>
          }
          aggregate: {
            args: Prisma.MeditationSessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMeditationSession>
          }
          groupBy: {
            args: Prisma.MeditationSessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<MeditationSessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.MeditationSessionCountArgs<ExtArgs>
            result: $Utils.Optional<MeditationSessionCountAggregateOutputType> | number
          }
        }
      }
      YogaSession: {
        payload: Prisma.$YogaSessionPayload<ExtArgs>
        fields: Prisma.YogaSessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.YogaSessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YogaSessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.YogaSessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YogaSessionPayload>
          }
          findFirst: {
            args: Prisma.YogaSessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YogaSessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.YogaSessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YogaSessionPayload>
          }
          findMany: {
            args: Prisma.YogaSessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YogaSessionPayload>[]
          }
          create: {
            args: Prisma.YogaSessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YogaSessionPayload>
          }
          createMany: {
            args: Prisma.YogaSessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.YogaSessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YogaSessionPayload>[]
          }
          delete: {
            args: Prisma.YogaSessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YogaSessionPayload>
          }
          update: {
            args: Prisma.YogaSessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YogaSessionPayload>
          }
          deleteMany: {
            args: Prisma.YogaSessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.YogaSessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.YogaSessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YogaSessionPayload>
          }
          aggregate: {
            args: Prisma.YogaSessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateYogaSession>
          }
          groupBy: {
            args: Prisma.YogaSessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<YogaSessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.YogaSessionCountArgs<ExtArgs>
            result: $Utils.Optional<YogaSessionCountAggregateOutputType> | number
          }
        }
      }
      Recipe: {
        payload: Prisma.$RecipePayload<ExtArgs>
        fields: Prisma.RecipeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RecipeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RecipeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload>
          }
          findFirst: {
            args: Prisma.RecipeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RecipeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload>
          }
          findMany: {
            args: Prisma.RecipeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload>[]
          }
          create: {
            args: Prisma.RecipeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload>
          }
          createMany: {
            args: Prisma.RecipeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RecipeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload>[]
          }
          delete: {
            args: Prisma.RecipeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload>
          }
          update: {
            args: Prisma.RecipeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload>
          }
          deleteMany: {
            args: Prisma.RecipeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RecipeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RecipeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload>
          }
          aggregate: {
            args: Prisma.RecipeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRecipe>
          }
          groupBy: {
            args: Prisma.RecipeGroupByArgs<ExtArgs>
            result: $Utils.Optional<RecipeGroupByOutputType>[]
          }
          count: {
            args: Prisma.RecipeCountArgs<ExtArgs>
            result: $Utils.Optional<RecipeCountAggregateOutputType> | number
          }
        }
      }
      Ingredient: {
        payload: Prisma.$IngredientPayload<ExtArgs>
        fields: Prisma.IngredientFieldRefs
        operations: {
          findUnique: {
            args: Prisma.IngredientFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.IngredientFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientPayload>
          }
          findFirst: {
            args: Prisma.IngredientFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.IngredientFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientPayload>
          }
          findMany: {
            args: Prisma.IngredientFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientPayload>[]
          }
          create: {
            args: Prisma.IngredientCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientPayload>
          }
          createMany: {
            args: Prisma.IngredientCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.IngredientCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientPayload>[]
          }
          delete: {
            args: Prisma.IngredientDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientPayload>
          }
          update: {
            args: Prisma.IngredientUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientPayload>
          }
          deleteMany: {
            args: Prisma.IngredientDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.IngredientUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.IngredientUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientPayload>
          }
          aggregate: {
            args: Prisma.IngredientAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateIngredient>
          }
          groupBy: {
            args: Prisma.IngredientGroupByArgs<ExtArgs>
            result: $Utils.Optional<IngredientGroupByOutputType>[]
          }
          count: {
            args: Prisma.IngredientCountArgs<ExtArgs>
            result: $Utils.Optional<IngredientCountAggregateOutputType> | number
          }
        }
      }
      RecipeIngredient: {
        payload: Prisma.$RecipeIngredientPayload<ExtArgs>
        fields: Prisma.RecipeIngredientFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RecipeIngredientFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeIngredientPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RecipeIngredientFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeIngredientPayload>
          }
          findFirst: {
            args: Prisma.RecipeIngredientFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeIngredientPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RecipeIngredientFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeIngredientPayload>
          }
          findMany: {
            args: Prisma.RecipeIngredientFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeIngredientPayload>[]
          }
          create: {
            args: Prisma.RecipeIngredientCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeIngredientPayload>
          }
          createMany: {
            args: Prisma.RecipeIngredientCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RecipeIngredientCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeIngredientPayload>[]
          }
          delete: {
            args: Prisma.RecipeIngredientDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeIngredientPayload>
          }
          update: {
            args: Prisma.RecipeIngredientUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeIngredientPayload>
          }
          deleteMany: {
            args: Prisma.RecipeIngredientDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RecipeIngredientUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RecipeIngredientUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeIngredientPayload>
          }
          aggregate: {
            args: Prisma.RecipeIngredientAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRecipeIngredient>
          }
          groupBy: {
            args: Prisma.RecipeIngredientGroupByArgs<ExtArgs>
            result: $Utils.Optional<RecipeIngredientGroupByOutputType>[]
          }
          count: {
            args: Prisma.RecipeIngredientCountArgs<ExtArgs>
            result: $Utils.Optional<RecipeIngredientCountAggregateOutputType> | number
          }
        }
      }
      RecipeInstruction: {
        payload: Prisma.$RecipeInstructionPayload<ExtArgs>
        fields: Prisma.RecipeInstructionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RecipeInstructionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeInstructionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RecipeInstructionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeInstructionPayload>
          }
          findFirst: {
            args: Prisma.RecipeInstructionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeInstructionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RecipeInstructionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeInstructionPayload>
          }
          findMany: {
            args: Prisma.RecipeInstructionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeInstructionPayload>[]
          }
          create: {
            args: Prisma.RecipeInstructionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeInstructionPayload>
          }
          createMany: {
            args: Prisma.RecipeInstructionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RecipeInstructionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeInstructionPayload>[]
          }
          delete: {
            args: Prisma.RecipeInstructionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeInstructionPayload>
          }
          update: {
            args: Prisma.RecipeInstructionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeInstructionPayload>
          }
          deleteMany: {
            args: Prisma.RecipeInstructionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RecipeInstructionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RecipeInstructionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeInstructionPayload>
          }
          aggregate: {
            args: Prisma.RecipeInstructionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRecipeInstruction>
          }
          groupBy: {
            args: Prisma.RecipeInstructionGroupByArgs<ExtArgs>
            result: $Utils.Optional<RecipeInstructionGroupByOutputType>[]
          }
          count: {
            args: Prisma.RecipeInstructionCountArgs<ExtArgs>
            result: $Utils.Optional<RecipeInstructionCountAggregateOutputType> | number
          }
        }
      }
      BlogPost: {
        payload: Prisma.$BlogPostPayload<ExtArgs>
        fields: Prisma.BlogPostFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BlogPostFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BlogPostPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BlogPostFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BlogPostPayload>
          }
          findFirst: {
            args: Prisma.BlogPostFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BlogPostPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BlogPostFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BlogPostPayload>
          }
          findMany: {
            args: Prisma.BlogPostFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BlogPostPayload>[]
          }
          create: {
            args: Prisma.BlogPostCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BlogPostPayload>
          }
          createMany: {
            args: Prisma.BlogPostCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BlogPostCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BlogPostPayload>[]
          }
          delete: {
            args: Prisma.BlogPostDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BlogPostPayload>
          }
          update: {
            args: Prisma.BlogPostUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BlogPostPayload>
          }
          deleteMany: {
            args: Prisma.BlogPostDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BlogPostUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BlogPostUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BlogPostPayload>
          }
          aggregate: {
            args: Prisma.BlogPostAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBlogPost>
          }
          groupBy: {
            args: Prisma.BlogPostGroupByArgs<ExtArgs>
            result: $Utils.Optional<BlogPostGroupByOutputType>[]
          }
          count: {
            args: Prisma.BlogPostCountArgs<ExtArgs>
            result: $Utils.Optional<BlogPostCountAggregateOutputType> | number
          }
        }
      }
      ScheduledEvent: {
        payload: Prisma.$ScheduledEventPayload<ExtArgs>
        fields: Prisma.ScheduledEventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ScheduledEventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduledEventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ScheduledEventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduledEventPayload>
          }
          findFirst: {
            args: Prisma.ScheduledEventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduledEventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ScheduledEventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduledEventPayload>
          }
          findMany: {
            args: Prisma.ScheduledEventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduledEventPayload>[]
          }
          create: {
            args: Prisma.ScheduledEventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduledEventPayload>
          }
          createMany: {
            args: Prisma.ScheduledEventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ScheduledEventCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduledEventPayload>[]
          }
          delete: {
            args: Prisma.ScheduledEventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduledEventPayload>
          }
          update: {
            args: Prisma.ScheduledEventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduledEventPayload>
          }
          deleteMany: {
            args: Prisma.ScheduledEventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ScheduledEventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ScheduledEventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduledEventPayload>
          }
          aggregate: {
            args: Prisma.ScheduledEventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateScheduledEvent>
          }
          groupBy: {
            args: Prisma.ScheduledEventGroupByArgs<ExtArgs>
            result: $Utils.Optional<ScheduledEventGroupByOutputType>[]
          }
          count: {
            args: Prisma.ScheduledEventCountArgs<ExtArgs>
            result: $Utils.Optional<ScheduledEventCountAggregateOutputType> | number
          }
        }
      }
      WorkoutHistory: {
        payload: Prisma.$WorkoutHistoryPayload<ExtArgs>
        fields: Prisma.WorkoutHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkoutHistoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkoutHistoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutHistoryPayload>
          }
          findFirst: {
            args: Prisma.WorkoutHistoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkoutHistoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutHistoryPayload>
          }
          findMany: {
            args: Prisma.WorkoutHistoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutHistoryPayload>[]
          }
          create: {
            args: Prisma.WorkoutHistoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutHistoryPayload>
          }
          createMany: {
            args: Prisma.WorkoutHistoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkoutHistoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutHistoryPayload>[]
          }
          delete: {
            args: Prisma.WorkoutHistoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutHistoryPayload>
          }
          update: {
            args: Prisma.WorkoutHistoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutHistoryPayload>
          }
          deleteMany: {
            args: Prisma.WorkoutHistoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkoutHistoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WorkoutHistoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutHistoryPayload>
          }
          aggregate: {
            args: Prisma.WorkoutHistoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkoutHistory>
          }
          groupBy: {
            args: Prisma.WorkoutHistoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkoutHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkoutHistoryCountArgs<ExtArgs>
            result: $Utils.Optional<WorkoutHistoryCountAggregateOutputType> | number
          }
        }
      }
      FavoriteWorkout: {
        payload: Prisma.$FavoriteWorkoutPayload<ExtArgs>
        fields: Prisma.FavoriteWorkoutFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FavoriteWorkoutFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteWorkoutPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FavoriteWorkoutFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteWorkoutPayload>
          }
          findFirst: {
            args: Prisma.FavoriteWorkoutFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteWorkoutPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FavoriteWorkoutFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteWorkoutPayload>
          }
          findMany: {
            args: Prisma.FavoriteWorkoutFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteWorkoutPayload>[]
          }
          create: {
            args: Prisma.FavoriteWorkoutCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteWorkoutPayload>
          }
          createMany: {
            args: Prisma.FavoriteWorkoutCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FavoriteWorkoutCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteWorkoutPayload>[]
          }
          delete: {
            args: Prisma.FavoriteWorkoutDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteWorkoutPayload>
          }
          update: {
            args: Prisma.FavoriteWorkoutUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteWorkoutPayload>
          }
          deleteMany: {
            args: Prisma.FavoriteWorkoutDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FavoriteWorkoutUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FavoriteWorkoutUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteWorkoutPayload>
          }
          aggregate: {
            args: Prisma.FavoriteWorkoutAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFavoriteWorkout>
          }
          groupBy: {
            args: Prisma.FavoriteWorkoutGroupByArgs<ExtArgs>
            result: $Utils.Optional<FavoriteWorkoutGroupByOutputType>[]
          }
          count: {
            args: Prisma.FavoriteWorkoutCountArgs<ExtArgs>
            result: $Utils.Optional<FavoriteWorkoutCountAggregateOutputType> | number
          }
        }
      }
      FavoriteMeditation: {
        payload: Prisma.$FavoriteMeditationPayload<ExtArgs>
        fields: Prisma.FavoriteMeditationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FavoriteMeditationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteMeditationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FavoriteMeditationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteMeditationPayload>
          }
          findFirst: {
            args: Prisma.FavoriteMeditationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteMeditationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FavoriteMeditationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteMeditationPayload>
          }
          findMany: {
            args: Prisma.FavoriteMeditationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteMeditationPayload>[]
          }
          create: {
            args: Prisma.FavoriteMeditationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteMeditationPayload>
          }
          createMany: {
            args: Prisma.FavoriteMeditationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FavoriteMeditationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteMeditationPayload>[]
          }
          delete: {
            args: Prisma.FavoriteMeditationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteMeditationPayload>
          }
          update: {
            args: Prisma.FavoriteMeditationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteMeditationPayload>
          }
          deleteMany: {
            args: Prisma.FavoriteMeditationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FavoriteMeditationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FavoriteMeditationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteMeditationPayload>
          }
          aggregate: {
            args: Prisma.FavoriteMeditationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFavoriteMeditation>
          }
          groupBy: {
            args: Prisma.FavoriteMeditationGroupByArgs<ExtArgs>
            result: $Utils.Optional<FavoriteMeditationGroupByOutputType>[]
          }
          count: {
            args: Prisma.FavoriteMeditationCountArgs<ExtArgs>
            result: $Utils.Optional<FavoriteMeditationCountAggregateOutputType> | number
          }
        }
      }
      FavoriteYogaSession: {
        payload: Prisma.$FavoriteYogaSessionPayload<ExtArgs>
        fields: Prisma.FavoriteYogaSessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FavoriteYogaSessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteYogaSessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FavoriteYogaSessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteYogaSessionPayload>
          }
          findFirst: {
            args: Prisma.FavoriteYogaSessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteYogaSessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FavoriteYogaSessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteYogaSessionPayload>
          }
          findMany: {
            args: Prisma.FavoriteYogaSessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteYogaSessionPayload>[]
          }
          create: {
            args: Prisma.FavoriteYogaSessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteYogaSessionPayload>
          }
          createMany: {
            args: Prisma.FavoriteYogaSessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FavoriteYogaSessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteYogaSessionPayload>[]
          }
          delete: {
            args: Prisma.FavoriteYogaSessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteYogaSessionPayload>
          }
          update: {
            args: Prisma.FavoriteYogaSessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteYogaSessionPayload>
          }
          deleteMany: {
            args: Prisma.FavoriteYogaSessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FavoriteYogaSessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FavoriteYogaSessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteYogaSessionPayload>
          }
          aggregate: {
            args: Prisma.FavoriteYogaSessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFavoriteYogaSession>
          }
          groupBy: {
            args: Prisma.FavoriteYogaSessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<FavoriteYogaSessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.FavoriteYogaSessionCountArgs<ExtArgs>
            result: $Utils.Optional<FavoriteYogaSessionCountAggregateOutputType> | number
          }
        }
      }
      FavoriteRecipe: {
        payload: Prisma.$FavoriteRecipePayload<ExtArgs>
        fields: Prisma.FavoriteRecipeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FavoriteRecipeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteRecipePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FavoriteRecipeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteRecipePayload>
          }
          findFirst: {
            args: Prisma.FavoriteRecipeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteRecipePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FavoriteRecipeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteRecipePayload>
          }
          findMany: {
            args: Prisma.FavoriteRecipeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteRecipePayload>[]
          }
          create: {
            args: Prisma.FavoriteRecipeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteRecipePayload>
          }
          createMany: {
            args: Prisma.FavoriteRecipeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FavoriteRecipeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteRecipePayload>[]
          }
          delete: {
            args: Prisma.FavoriteRecipeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteRecipePayload>
          }
          update: {
            args: Prisma.FavoriteRecipeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteRecipePayload>
          }
          deleteMany: {
            args: Prisma.FavoriteRecipeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FavoriteRecipeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FavoriteRecipeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteRecipePayload>
          }
          aggregate: {
            args: Prisma.FavoriteRecipeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFavoriteRecipe>
          }
          groupBy: {
            args: Prisma.FavoriteRecipeGroupByArgs<ExtArgs>
            result: $Utils.Optional<FavoriteRecipeGroupByOutputType>[]
          }
          count: {
            args: Prisma.FavoriteRecipeCountArgs<ExtArgs>
            result: $Utils.Optional<FavoriteRecipeCountAggregateOutputType> | number
          }
        }
      }
      WeightHistory: {
        payload: Prisma.$WeightHistoryPayload<ExtArgs>
        fields: Prisma.WeightHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WeightHistoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeightHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WeightHistoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeightHistoryPayload>
          }
          findFirst: {
            args: Prisma.WeightHistoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeightHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WeightHistoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeightHistoryPayload>
          }
          findMany: {
            args: Prisma.WeightHistoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeightHistoryPayload>[]
          }
          create: {
            args: Prisma.WeightHistoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeightHistoryPayload>
          }
          createMany: {
            args: Prisma.WeightHistoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WeightHistoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeightHistoryPayload>[]
          }
          delete: {
            args: Prisma.WeightHistoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeightHistoryPayload>
          }
          update: {
            args: Prisma.WeightHistoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeightHistoryPayload>
          }
          deleteMany: {
            args: Prisma.WeightHistoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WeightHistoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WeightHistoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeightHistoryPayload>
          }
          aggregate: {
            args: Prisma.WeightHistoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWeightHistory>
          }
          groupBy: {
            args: Prisma.WeightHistoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<WeightHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.WeightHistoryCountArgs<ExtArgs>
            result: $Utils.Optional<WeightHistoryCountAggregateOutputType> | number
          }
        }
      }
      Achievement: {
        payload: Prisma.$AchievementPayload<ExtArgs>
        fields: Prisma.AchievementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AchievementFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AchievementFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>
          }
          findFirst: {
            args: Prisma.AchievementFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AchievementFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>
          }
          findMany: {
            args: Prisma.AchievementFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>[]
          }
          create: {
            args: Prisma.AchievementCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>
          }
          createMany: {
            args: Prisma.AchievementCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AchievementCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>[]
          }
          delete: {
            args: Prisma.AchievementDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>
          }
          update: {
            args: Prisma.AchievementUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>
          }
          deleteMany: {
            args: Prisma.AchievementDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AchievementUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AchievementUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>
          }
          aggregate: {
            args: Prisma.AchievementAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAchievement>
          }
          groupBy: {
            args: Prisma.AchievementGroupByArgs<ExtArgs>
            result: $Utils.Optional<AchievementGroupByOutputType>[]
          }
          count: {
            args: Prisma.AchievementCountArgs<ExtArgs>
            result: $Utils.Optional<AchievementCountAggregateOutputType> | number
          }
        }
      }
      UserAchievement: {
        payload: Prisma.$UserAchievementPayload<ExtArgs>
        fields: Prisma.UserAchievementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserAchievementFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserAchievementFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload>
          }
          findFirst: {
            args: Prisma.UserAchievementFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserAchievementFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload>
          }
          findMany: {
            args: Prisma.UserAchievementFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload>[]
          }
          create: {
            args: Prisma.UserAchievementCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload>
          }
          createMany: {
            args: Prisma.UserAchievementCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserAchievementCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload>[]
          }
          delete: {
            args: Prisma.UserAchievementDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload>
          }
          update: {
            args: Prisma.UserAchievementUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload>
          }
          deleteMany: {
            args: Prisma.UserAchievementDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserAchievementUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserAchievementUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload>
          }
          aggregate: {
            args: Prisma.UserAchievementAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserAchievement>
          }
          groupBy: {
            args: Prisma.UserAchievementGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserAchievementGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserAchievementCountArgs<ExtArgs>
            result: $Utils.Optional<UserAchievementCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    workoutHistory: number
    favoriteWorkouts: number
    favoriteMeditations: number
    favoriteYogaSessions: number
    favoriteRecipes: number
    scheduledEvents: number
    weightHistory: number
    achievements: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workoutHistory?: boolean | UserCountOutputTypeCountWorkoutHistoryArgs
    favoriteWorkouts?: boolean | UserCountOutputTypeCountFavoriteWorkoutsArgs
    favoriteMeditations?: boolean | UserCountOutputTypeCountFavoriteMeditationsArgs
    favoriteYogaSessions?: boolean | UserCountOutputTypeCountFavoriteYogaSessionsArgs
    favoriteRecipes?: boolean | UserCountOutputTypeCountFavoriteRecipesArgs
    scheduledEvents?: boolean | UserCountOutputTypeCountScheduledEventsArgs
    weightHistory?: boolean | UserCountOutputTypeCountWeightHistoryArgs
    achievements?: boolean | UserCountOutputTypeCountAchievementsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWorkoutHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutHistoryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFavoriteWorkoutsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FavoriteWorkoutWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFavoriteMeditationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FavoriteMeditationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFavoriteYogaSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FavoriteYogaSessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFavoriteRecipesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FavoriteRecipeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountScheduledEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduledEventWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWeightHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WeightHistoryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAchievementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserAchievementWhereInput
  }


  /**
   * Count Type WorkoutCountOutputType
   */

  export type WorkoutCountOutputType = {
    exercises: number
    workoutHistory: number
    favoriteBy: number
    scheduledEvents: number
  }

  export type WorkoutCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exercises?: boolean | WorkoutCountOutputTypeCountExercisesArgs
    workoutHistory?: boolean | WorkoutCountOutputTypeCountWorkoutHistoryArgs
    favoriteBy?: boolean | WorkoutCountOutputTypeCountFavoriteByArgs
    scheduledEvents?: boolean | WorkoutCountOutputTypeCountScheduledEventsArgs
  }

  // Custom InputTypes
  /**
   * WorkoutCountOutputType without action
   */
  export type WorkoutCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutCountOutputType
     */
    select?: WorkoutCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WorkoutCountOutputType without action
   */
  export type WorkoutCountOutputTypeCountExercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutExerciseWhereInput
  }

  /**
   * WorkoutCountOutputType without action
   */
  export type WorkoutCountOutputTypeCountWorkoutHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutHistoryWhereInput
  }

  /**
   * WorkoutCountOutputType without action
   */
  export type WorkoutCountOutputTypeCountFavoriteByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FavoriteWorkoutWhereInput
  }

  /**
   * WorkoutCountOutputType without action
   */
  export type WorkoutCountOutputTypeCountScheduledEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduledEventWhereInput
  }


  /**
   * Count Type ExerciseCountOutputType
   */

  export type ExerciseCountOutputType = {
    workouts: number
  }

  export type ExerciseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workouts?: boolean | ExerciseCountOutputTypeCountWorkoutsArgs
  }

  // Custom InputTypes
  /**
   * ExerciseCountOutputType without action
   */
  export type ExerciseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseCountOutputType
     */
    select?: ExerciseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ExerciseCountOutputType without action
   */
  export type ExerciseCountOutputTypeCountWorkoutsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutExerciseWhereInput
  }


  /**
   * Count Type MeditationSessionCountOutputType
   */

  export type MeditationSessionCountOutputType = {
    favoriteBy: number
    scheduledEvents: number
  }

  export type MeditationSessionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    favoriteBy?: boolean | MeditationSessionCountOutputTypeCountFavoriteByArgs
    scheduledEvents?: boolean | MeditationSessionCountOutputTypeCountScheduledEventsArgs
  }

  // Custom InputTypes
  /**
   * MeditationSessionCountOutputType without action
   */
  export type MeditationSessionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeditationSessionCountOutputType
     */
    select?: MeditationSessionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MeditationSessionCountOutputType without action
   */
  export type MeditationSessionCountOutputTypeCountFavoriteByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FavoriteMeditationWhereInput
  }

  /**
   * MeditationSessionCountOutputType without action
   */
  export type MeditationSessionCountOutputTypeCountScheduledEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduledEventWhereInput
  }


  /**
   * Count Type YogaSessionCountOutputType
   */

  export type YogaSessionCountOutputType = {
    favoriteBy: number
    scheduledEvents: number
  }

  export type YogaSessionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    favoriteBy?: boolean | YogaSessionCountOutputTypeCountFavoriteByArgs
    scheduledEvents?: boolean | YogaSessionCountOutputTypeCountScheduledEventsArgs
  }

  // Custom InputTypes
  /**
   * YogaSessionCountOutputType without action
   */
  export type YogaSessionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YogaSessionCountOutputType
     */
    select?: YogaSessionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * YogaSessionCountOutputType without action
   */
  export type YogaSessionCountOutputTypeCountFavoriteByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FavoriteYogaSessionWhereInput
  }

  /**
   * YogaSessionCountOutputType without action
   */
  export type YogaSessionCountOutputTypeCountScheduledEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduledEventWhereInput
  }


  /**
   * Count Type RecipeCountOutputType
   */

  export type RecipeCountOutputType = {
    ingredients: number
    instructions: number
    favoriteBy: number
  }

  export type RecipeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ingredients?: boolean | RecipeCountOutputTypeCountIngredientsArgs
    instructions?: boolean | RecipeCountOutputTypeCountInstructionsArgs
    favoriteBy?: boolean | RecipeCountOutputTypeCountFavoriteByArgs
  }

  // Custom InputTypes
  /**
   * RecipeCountOutputType without action
   */
  export type RecipeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeCountOutputType
     */
    select?: RecipeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RecipeCountOutputType without action
   */
  export type RecipeCountOutputTypeCountIngredientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecipeIngredientWhereInput
  }

  /**
   * RecipeCountOutputType without action
   */
  export type RecipeCountOutputTypeCountInstructionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecipeInstructionWhereInput
  }

  /**
   * RecipeCountOutputType without action
   */
  export type RecipeCountOutputTypeCountFavoriteByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FavoriteRecipeWhereInput
  }


  /**
   * Count Type IngredientCountOutputType
   */

  export type IngredientCountOutputType = {
    recipes: number
  }

  export type IngredientCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recipes?: boolean | IngredientCountOutputTypeCountRecipesArgs
  }

  // Custom InputTypes
  /**
   * IngredientCountOutputType without action
   */
  export type IngredientCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IngredientCountOutputType
     */
    select?: IngredientCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * IngredientCountOutputType without action
   */
  export type IngredientCountOutputTypeCountRecipesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecipeIngredientWhereInput
  }


  /**
   * Count Type AchievementCountOutputType
   */

  export type AchievementCountOutputType = {
    users: number
  }

  export type AchievementCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | AchievementCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * AchievementCountOutputType without action
   */
  export type AchievementCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AchievementCountOutputType
     */
    select?: AchievementCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AchievementCountOutputType without action
   */
  export type AchievementCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserAchievementWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    height: number | null
    weight: number | null
    goalWeight: number | null
  }

  export type UserSumAggregateOutputType = {
    height: number | null
    weight: number | null
    goalWeight: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    firstName: string | null
    lastName: string | null
    username: string | null
    email: string | null
    emailVerified: Date | null
    password: string | null
    image: string | null
    createdAt: Date | null
    updatedAt: Date | null
    height: number | null
    weight: number | null
    goalWeight: number | null
    dateOfBirth: Date | null
    gender: string | null
    fitnessLevel: string | null
    memberSince: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    firstName: string | null
    lastName: string | null
    username: string | null
    email: string | null
    emailVerified: Date | null
    password: string | null
    image: string | null
    createdAt: Date | null
    updatedAt: Date | null
    height: number | null
    weight: number | null
    goalWeight: number | null
    dateOfBirth: Date | null
    gender: string | null
    fitnessLevel: string | null
    memberSince: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    firstName: number
    lastName: number
    username: number
    email: number
    emailVerified: number
    password: number
    image: number
    createdAt: number
    updatedAt: number
    height: number
    weight: number
    goalWeight: number
    dateOfBirth: number
    gender: number
    fitnessLevel: number
    memberSince: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    height?: true
    weight?: true
    goalWeight?: true
  }

  export type UserSumAggregateInputType = {
    height?: true
    weight?: true
    goalWeight?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    firstName?: true
    lastName?: true
    username?: true
    email?: true
    emailVerified?: true
    password?: true
    image?: true
    createdAt?: true
    updatedAt?: true
    height?: true
    weight?: true
    goalWeight?: true
    dateOfBirth?: true
    gender?: true
    fitnessLevel?: true
    memberSince?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    firstName?: true
    lastName?: true
    username?: true
    email?: true
    emailVerified?: true
    password?: true
    image?: true
    createdAt?: true
    updatedAt?: true
    height?: true
    weight?: true
    goalWeight?: true
    dateOfBirth?: true
    gender?: true
    fitnessLevel?: true
    memberSince?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    firstName?: true
    lastName?: true
    username?: true
    email?: true
    emailVerified?: true
    password?: true
    image?: true
    createdAt?: true
    updatedAt?: true
    height?: true
    weight?: true
    goalWeight?: true
    dateOfBirth?: true
    gender?: true
    fitnessLevel?: true
    memberSince?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string | null
    firstName: string | null
    lastName: string | null
    username: string | null
    email: string
    emailVerified: Date | null
    password: string | null
    image: string | null
    createdAt: Date
    updatedAt: Date
    height: number | null
    weight: number | null
    goalWeight: number | null
    dateOfBirth: Date | null
    gender: string | null
    fitnessLevel: string | null
    memberSince: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    firstName?: boolean
    lastName?: boolean
    username?: boolean
    email?: boolean
    emailVerified?: boolean
    password?: boolean
    image?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    height?: boolean
    weight?: boolean
    goalWeight?: boolean
    dateOfBirth?: boolean
    gender?: boolean
    fitnessLevel?: boolean
    memberSince?: boolean
    workoutHistory?: boolean | User$workoutHistoryArgs<ExtArgs>
    favoriteWorkouts?: boolean | User$favoriteWorkoutsArgs<ExtArgs>
    favoriteMeditations?: boolean | User$favoriteMeditationsArgs<ExtArgs>
    favoriteYogaSessions?: boolean | User$favoriteYogaSessionsArgs<ExtArgs>
    favoriteRecipes?: boolean | User$favoriteRecipesArgs<ExtArgs>
    scheduledEvents?: boolean | User$scheduledEventsArgs<ExtArgs>
    weightHistory?: boolean | User$weightHistoryArgs<ExtArgs>
    achievements?: boolean | User$achievementsArgs<ExtArgs>
    settings?: boolean | User$settingsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    firstName?: boolean
    lastName?: boolean
    username?: boolean
    email?: boolean
    emailVerified?: boolean
    password?: boolean
    image?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    height?: boolean
    weight?: boolean
    goalWeight?: boolean
    dateOfBirth?: boolean
    gender?: boolean
    fitnessLevel?: boolean
    memberSince?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    firstName?: boolean
    lastName?: boolean
    username?: boolean
    email?: boolean
    emailVerified?: boolean
    password?: boolean
    image?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    height?: boolean
    weight?: boolean
    goalWeight?: boolean
    dateOfBirth?: boolean
    gender?: boolean
    fitnessLevel?: boolean
    memberSince?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workoutHistory?: boolean | User$workoutHistoryArgs<ExtArgs>
    favoriteWorkouts?: boolean | User$favoriteWorkoutsArgs<ExtArgs>
    favoriteMeditations?: boolean | User$favoriteMeditationsArgs<ExtArgs>
    favoriteYogaSessions?: boolean | User$favoriteYogaSessionsArgs<ExtArgs>
    favoriteRecipes?: boolean | User$favoriteRecipesArgs<ExtArgs>
    scheduledEvents?: boolean | User$scheduledEventsArgs<ExtArgs>
    weightHistory?: boolean | User$weightHistoryArgs<ExtArgs>
    achievements?: boolean | User$achievementsArgs<ExtArgs>
    settings?: boolean | User$settingsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      workoutHistory: Prisma.$WorkoutHistoryPayload<ExtArgs>[]
      favoriteWorkouts: Prisma.$FavoriteWorkoutPayload<ExtArgs>[]
      favoriteMeditations: Prisma.$FavoriteMeditationPayload<ExtArgs>[]
      favoriteYogaSessions: Prisma.$FavoriteYogaSessionPayload<ExtArgs>[]
      favoriteRecipes: Prisma.$FavoriteRecipePayload<ExtArgs>[]
      scheduledEvents: Prisma.$ScheduledEventPayload<ExtArgs>[]
      weightHistory: Prisma.$WeightHistoryPayload<ExtArgs>[]
      achievements: Prisma.$UserAchievementPayload<ExtArgs>[]
      settings: Prisma.$UserSettingsPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string | null
      firstName: string | null
      lastName: string | null
      username: string | null
      email: string
      emailVerified: Date | null
      password: string | null
      image: string | null
      createdAt: Date
      updatedAt: Date
      height: number | null
      weight: number | null
      goalWeight: number | null
      dateOfBirth: Date | null
      gender: string | null
      fitnessLevel: string | null
      memberSince: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    workoutHistory<T extends User$workoutHistoryArgs<ExtArgs> = {}>(args?: Subset<T, User$workoutHistoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutHistoryPayload<ExtArgs>, T, "findMany"> | Null>
    favoriteWorkouts<T extends User$favoriteWorkoutsArgs<ExtArgs> = {}>(args?: Subset<T, User$favoriteWorkoutsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoriteWorkoutPayload<ExtArgs>, T, "findMany"> | Null>
    favoriteMeditations<T extends User$favoriteMeditationsArgs<ExtArgs> = {}>(args?: Subset<T, User$favoriteMeditationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoriteMeditationPayload<ExtArgs>, T, "findMany"> | Null>
    favoriteYogaSessions<T extends User$favoriteYogaSessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$favoriteYogaSessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoriteYogaSessionPayload<ExtArgs>, T, "findMany"> | Null>
    favoriteRecipes<T extends User$favoriteRecipesArgs<ExtArgs> = {}>(args?: Subset<T, User$favoriteRecipesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoriteRecipePayload<ExtArgs>, T, "findMany"> | Null>
    scheduledEvents<T extends User$scheduledEventsArgs<ExtArgs> = {}>(args?: Subset<T, User$scheduledEventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScheduledEventPayload<ExtArgs>, T, "findMany"> | Null>
    weightHistory<T extends User$weightHistoryArgs<ExtArgs> = {}>(args?: Subset<T, User$weightHistoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WeightHistoryPayload<ExtArgs>, T, "findMany"> | Null>
    achievements<T extends User$achievementsArgs<ExtArgs> = {}>(args?: Subset<T, User$achievementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "findMany"> | Null>
    settings<T extends User$settingsArgs<ExtArgs> = {}>(args?: Subset<T, User$settingsArgs<ExtArgs>>): Prisma__UserSettingsClient<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly emailVerified: FieldRef<"User", 'DateTime'>
    readonly password: FieldRef<"User", 'String'>
    readonly image: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly height: FieldRef<"User", 'Float'>
    readonly weight: FieldRef<"User", 'Float'>
    readonly goalWeight: FieldRef<"User", 'Float'>
    readonly dateOfBirth: FieldRef<"User", 'DateTime'>
    readonly gender: FieldRef<"User", 'String'>
    readonly fitnessLevel: FieldRef<"User", 'String'>
    readonly memberSince: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.workoutHistory
   */
  export type User$workoutHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutHistory
     */
    select?: WorkoutHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutHistoryInclude<ExtArgs> | null
    where?: WorkoutHistoryWhereInput
    orderBy?: WorkoutHistoryOrderByWithRelationInput | WorkoutHistoryOrderByWithRelationInput[]
    cursor?: WorkoutHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkoutHistoryScalarFieldEnum | WorkoutHistoryScalarFieldEnum[]
  }

  /**
   * User.favoriteWorkouts
   */
  export type User$favoriteWorkoutsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteWorkout
     */
    select?: FavoriteWorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteWorkoutInclude<ExtArgs> | null
    where?: FavoriteWorkoutWhereInput
    orderBy?: FavoriteWorkoutOrderByWithRelationInput | FavoriteWorkoutOrderByWithRelationInput[]
    cursor?: FavoriteWorkoutWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FavoriteWorkoutScalarFieldEnum | FavoriteWorkoutScalarFieldEnum[]
  }

  /**
   * User.favoriteMeditations
   */
  export type User$favoriteMeditationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteMeditation
     */
    select?: FavoriteMeditationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteMeditationInclude<ExtArgs> | null
    where?: FavoriteMeditationWhereInput
    orderBy?: FavoriteMeditationOrderByWithRelationInput | FavoriteMeditationOrderByWithRelationInput[]
    cursor?: FavoriteMeditationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FavoriteMeditationScalarFieldEnum | FavoriteMeditationScalarFieldEnum[]
  }

  /**
   * User.favoriteYogaSessions
   */
  export type User$favoriteYogaSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteYogaSession
     */
    select?: FavoriteYogaSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteYogaSessionInclude<ExtArgs> | null
    where?: FavoriteYogaSessionWhereInput
    orderBy?: FavoriteYogaSessionOrderByWithRelationInput | FavoriteYogaSessionOrderByWithRelationInput[]
    cursor?: FavoriteYogaSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FavoriteYogaSessionScalarFieldEnum | FavoriteYogaSessionScalarFieldEnum[]
  }

  /**
   * User.favoriteRecipes
   */
  export type User$favoriteRecipesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteRecipe
     */
    select?: FavoriteRecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteRecipeInclude<ExtArgs> | null
    where?: FavoriteRecipeWhereInput
    orderBy?: FavoriteRecipeOrderByWithRelationInput | FavoriteRecipeOrderByWithRelationInput[]
    cursor?: FavoriteRecipeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FavoriteRecipeScalarFieldEnum | FavoriteRecipeScalarFieldEnum[]
  }

  /**
   * User.scheduledEvents
   */
  export type User$scheduledEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduledEvent
     */
    select?: ScheduledEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduledEventInclude<ExtArgs> | null
    where?: ScheduledEventWhereInput
    orderBy?: ScheduledEventOrderByWithRelationInput | ScheduledEventOrderByWithRelationInput[]
    cursor?: ScheduledEventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScheduledEventScalarFieldEnum | ScheduledEventScalarFieldEnum[]
  }

  /**
   * User.weightHistory
   */
  export type User$weightHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeightHistory
     */
    select?: WeightHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeightHistoryInclude<ExtArgs> | null
    where?: WeightHistoryWhereInput
    orderBy?: WeightHistoryOrderByWithRelationInput | WeightHistoryOrderByWithRelationInput[]
    cursor?: WeightHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WeightHistoryScalarFieldEnum | WeightHistoryScalarFieldEnum[]
  }

  /**
   * User.achievements
   */
  export type User$achievementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    where?: UserAchievementWhereInput
    orderBy?: UserAchievementOrderByWithRelationInput | UserAchievementOrderByWithRelationInput[]
    cursor?: UserAchievementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserAchievementScalarFieldEnum | UserAchievementScalarFieldEnum[]
  }

  /**
   * User.settings
   */
  export type User$settingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsInclude<ExtArgs> | null
    where?: UserSettingsWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model UserSettings
   */

  export type AggregateUserSettings = {
    _count: UserSettingsCountAggregateOutputType | null
    _min: UserSettingsMinAggregateOutputType | null
    _max: UserSettingsMaxAggregateOutputType | null
  }

  export type UserSettingsMinAggregateOutputType = {
    id: string | null
    userId: string | null
    notificationsEnabled: boolean | null
    emailNotifications: boolean | null
    darkMode: boolean | null
    language: string | null
    measurementUnit: string | null
  }

  export type UserSettingsMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    notificationsEnabled: boolean | null
    emailNotifications: boolean | null
    darkMode: boolean | null
    language: string | null
    measurementUnit: string | null
  }

  export type UserSettingsCountAggregateOutputType = {
    id: number
    userId: number
    notificationsEnabled: number
    emailNotifications: number
    darkMode: number
    language: number
    measurementUnit: number
    privacySettings: number
    _all: number
  }


  export type UserSettingsMinAggregateInputType = {
    id?: true
    userId?: true
    notificationsEnabled?: true
    emailNotifications?: true
    darkMode?: true
    language?: true
    measurementUnit?: true
  }

  export type UserSettingsMaxAggregateInputType = {
    id?: true
    userId?: true
    notificationsEnabled?: true
    emailNotifications?: true
    darkMode?: true
    language?: true
    measurementUnit?: true
  }

  export type UserSettingsCountAggregateInputType = {
    id?: true
    userId?: true
    notificationsEnabled?: true
    emailNotifications?: true
    darkMode?: true
    language?: true
    measurementUnit?: true
    privacySettings?: true
    _all?: true
  }

  export type UserSettingsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSettings to aggregate.
     */
    where?: UserSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSettings to fetch.
     */
    orderBy?: UserSettingsOrderByWithRelationInput | UserSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserSettings
    **/
    _count?: true | UserSettingsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserSettingsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserSettingsMaxAggregateInputType
  }

  export type GetUserSettingsAggregateType<T extends UserSettingsAggregateArgs> = {
        [P in keyof T & keyof AggregateUserSettings]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserSettings[P]>
      : GetScalarType<T[P], AggregateUserSettings[P]>
  }




  export type UserSettingsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSettingsWhereInput
    orderBy?: UserSettingsOrderByWithAggregationInput | UserSettingsOrderByWithAggregationInput[]
    by: UserSettingsScalarFieldEnum[] | UserSettingsScalarFieldEnum
    having?: UserSettingsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserSettingsCountAggregateInputType | true
    _min?: UserSettingsMinAggregateInputType
    _max?: UserSettingsMaxAggregateInputType
  }

  export type UserSettingsGroupByOutputType = {
    id: string
    userId: string
    notificationsEnabled: boolean
    emailNotifications: boolean
    darkMode: boolean
    language: string
    measurementUnit: string
    privacySettings: JsonValue | null
    _count: UserSettingsCountAggregateOutputType | null
    _min: UserSettingsMinAggregateOutputType | null
    _max: UserSettingsMaxAggregateOutputType | null
  }

  type GetUserSettingsGroupByPayload<T extends UserSettingsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserSettingsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserSettingsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserSettingsGroupByOutputType[P]>
            : GetScalarType<T[P], UserSettingsGroupByOutputType[P]>
        }
      >
    >


  export type UserSettingsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    notificationsEnabled?: boolean
    emailNotifications?: boolean
    darkMode?: boolean
    language?: boolean
    measurementUnit?: boolean
    privacySettings?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSettings"]>

  export type UserSettingsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    notificationsEnabled?: boolean
    emailNotifications?: boolean
    darkMode?: boolean
    language?: boolean
    measurementUnit?: boolean
    privacySettings?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSettings"]>

  export type UserSettingsSelectScalar = {
    id?: boolean
    userId?: boolean
    notificationsEnabled?: boolean
    emailNotifications?: boolean
    darkMode?: boolean
    language?: boolean
    measurementUnit?: boolean
    privacySettings?: boolean
  }

  export type UserSettingsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserSettingsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserSettingsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserSettings"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      notificationsEnabled: boolean
      emailNotifications: boolean
      darkMode: boolean
      language: string
      measurementUnit: string
      privacySettings: Prisma.JsonValue | null
    }, ExtArgs["result"]["userSettings"]>
    composites: {}
  }

  type UserSettingsGetPayload<S extends boolean | null | undefined | UserSettingsDefaultArgs> = $Result.GetResult<Prisma.$UserSettingsPayload, S>

  type UserSettingsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserSettingsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserSettingsCountAggregateInputType | true
    }

  export interface UserSettingsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserSettings'], meta: { name: 'UserSettings' } }
    /**
     * Find zero or one UserSettings that matches the filter.
     * @param {UserSettingsFindUniqueArgs} args - Arguments to find a UserSettings
     * @example
     * // Get one UserSettings
     * const userSettings = await prisma.userSettings.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserSettingsFindUniqueArgs>(args: SelectSubset<T, UserSettingsFindUniqueArgs<ExtArgs>>): Prisma__UserSettingsClient<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserSettings that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserSettingsFindUniqueOrThrowArgs} args - Arguments to find a UserSettings
     * @example
     * // Get one UserSettings
     * const userSettings = await prisma.userSettings.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserSettingsFindUniqueOrThrowArgs>(args: SelectSubset<T, UserSettingsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserSettingsClient<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingsFindFirstArgs} args - Arguments to find a UserSettings
     * @example
     * // Get one UserSettings
     * const userSettings = await prisma.userSettings.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserSettingsFindFirstArgs>(args?: SelectSubset<T, UserSettingsFindFirstArgs<ExtArgs>>): Prisma__UserSettingsClient<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserSettings that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingsFindFirstOrThrowArgs} args - Arguments to find a UserSettings
     * @example
     * // Get one UserSettings
     * const userSettings = await prisma.userSettings.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserSettingsFindFirstOrThrowArgs>(args?: SelectSubset<T, UserSettingsFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserSettingsClient<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserSettings
     * const userSettings = await prisma.userSettings.findMany()
     * 
     * // Get first 10 UserSettings
     * const userSettings = await prisma.userSettings.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userSettingsWithIdOnly = await prisma.userSettings.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserSettingsFindManyArgs>(args?: SelectSubset<T, UserSettingsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserSettings.
     * @param {UserSettingsCreateArgs} args - Arguments to create a UserSettings.
     * @example
     * // Create one UserSettings
     * const UserSettings = await prisma.userSettings.create({
     *   data: {
     *     // ... data to create a UserSettings
     *   }
     * })
     * 
     */
    create<T extends UserSettingsCreateArgs>(args: SelectSubset<T, UserSettingsCreateArgs<ExtArgs>>): Prisma__UserSettingsClient<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserSettings.
     * @param {UserSettingsCreateManyArgs} args - Arguments to create many UserSettings.
     * @example
     * // Create many UserSettings
     * const userSettings = await prisma.userSettings.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserSettingsCreateManyArgs>(args?: SelectSubset<T, UserSettingsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserSettings and returns the data saved in the database.
     * @param {UserSettingsCreateManyAndReturnArgs} args - Arguments to create many UserSettings.
     * @example
     * // Create many UserSettings
     * const userSettings = await prisma.userSettings.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserSettings and only return the `id`
     * const userSettingsWithIdOnly = await prisma.userSettings.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserSettingsCreateManyAndReturnArgs>(args?: SelectSubset<T, UserSettingsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserSettings.
     * @param {UserSettingsDeleteArgs} args - Arguments to delete one UserSettings.
     * @example
     * // Delete one UserSettings
     * const UserSettings = await prisma.userSettings.delete({
     *   where: {
     *     // ... filter to delete one UserSettings
     *   }
     * })
     * 
     */
    delete<T extends UserSettingsDeleteArgs>(args: SelectSubset<T, UserSettingsDeleteArgs<ExtArgs>>): Prisma__UserSettingsClient<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserSettings.
     * @param {UserSettingsUpdateArgs} args - Arguments to update one UserSettings.
     * @example
     * // Update one UserSettings
     * const userSettings = await prisma.userSettings.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserSettingsUpdateArgs>(args: SelectSubset<T, UserSettingsUpdateArgs<ExtArgs>>): Prisma__UserSettingsClient<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserSettings.
     * @param {UserSettingsDeleteManyArgs} args - Arguments to filter UserSettings to delete.
     * @example
     * // Delete a few UserSettings
     * const { count } = await prisma.userSettings.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserSettingsDeleteManyArgs>(args?: SelectSubset<T, UserSettingsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserSettings
     * const userSettings = await prisma.userSettings.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserSettingsUpdateManyArgs>(args: SelectSubset<T, UserSettingsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserSettings.
     * @param {UserSettingsUpsertArgs} args - Arguments to update or create a UserSettings.
     * @example
     * // Update or create a UserSettings
     * const userSettings = await prisma.userSettings.upsert({
     *   create: {
     *     // ... data to create a UserSettings
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserSettings we want to update
     *   }
     * })
     */
    upsert<T extends UserSettingsUpsertArgs>(args: SelectSubset<T, UserSettingsUpsertArgs<ExtArgs>>): Prisma__UserSettingsClient<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingsCountArgs} args - Arguments to filter UserSettings to count.
     * @example
     * // Count the number of UserSettings
     * const count = await prisma.userSettings.count({
     *   where: {
     *     // ... the filter for the UserSettings we want to count
     *   }
     * })
    **/
    count<T extends UserSettingsCountArgs>(
      args?: Subset<T, UserSettingsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserSettingsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserSettingsAggregateArgs>(args: Subset<T, UserSettingsAggregateArgs>): Prisma.PrismaPromise<GetUserSettingsAggregateType<T>>

    /**
     * Group by UserSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserSettingsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserSettingsGroupByArgs['orderBy'] }
        : { orderBy?: UserSettingsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserSettingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserSettingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserSettings model
   */
  readonly fields: UserSettingsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserSettings.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserSettingsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserSettings model
   */ 
  interface UserSettingsFieldRefs {
    readonly id: FieldRef<"UserSettings", 'String'>
    readonly userId: FieldRef<"UserSettings", 'String'>
    readonly notificationsEnabled: FieldRef<"UserSettings", 'Boolean'>
    readonly emailNotifications: FieldRef<"UserSettings", 'Boolean'>
    readonly darkMode: FieldRef<"UserSettings", 'Boolean'>
    readonly language: FieldRef<"UserSettings", 'String'>
    readonly measurementUnit: FieldRef<"UserSettings", 'String'>
    readonly privacySettings: FieldRef<"UserSettings", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * UserSettings findUnique
   */
  export type UserSettingsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsInclude<ExtArgs> | null
    /**
     * Filter, which UserSettings to fetch.
     */
    where: UserSettingsWhereUniqueInput
  }

  /**
   * UserSettings findUniqueOrThrow
   */
  export type UserSettingsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsInclude<ExtArgs> | null
    /**
     * Filter, which UserSettings to fetch.
     */
    where: UserSettingsWhereUniqueInput
  }

  /**
   * UserSettings findFirst
   */
  export type UserSettingsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsInclude<ExtArgs> | null
    /**
     * Filter, which UserSettings to fetch.
     */
    where?: UserSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSettings to fetch.
     */
    orderBy?: UserSettingsOrderByWithRelationInput | UserSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSettings.
     */
    cursor?: UserSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSettings.
     */
    distinct?: UserSettingsScalarFieldEnum | UserSettingsScalarFieldEnum[]
  }

  /**
   * UserSettings findFirstOrThrow
   */
  export type UserSettingsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsInclude<ExtArgs> | null
    /**
     * Filter, which UserSettings to fetch.
     */
    where?: UserSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSettings to fetch.
     */
    orderBy?: UserSettingsOrderByWithRelationInput | UserSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSettings.
     */
    cursor?: UserSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSettings.
     */
    distinct?: UserSettingsScalarFieldEnum | UserSettingsScalarFieldEnum[]
  }

  /**
   * UserSettings findMany
   */
  export type UserSettingsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsInclude<ExtArgs> | null
    /**
     * Filter, which UserSettings to fetch.
     */
    where?: UserSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSettings to fetch.
     */
    orderBy?: UserSettingsOrderByWithRelationInput | UserSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserSettings.
     */
    cursor?: UserSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSettings.
     */
    skip?: number
    distinct?: UserSettingsScalarFieldEnum | UserSettingsScalarFieldEnum[]
  }

  /**
   * UserSettings create
   */
  export type UserSettingsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsInclude<ExtArgs> | null
    /**
     * The data needed to create a UserSettings.
     */
    data: XOR<UserSettingsCreateInput, UserSettingsUncheckedCreateInput>
  }

  /**
   * UserSettings createMany
   */
  export type UserSettingsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserSettings.
     */
    data: UserSettingsCreateManyInput | UserSettingsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserSettings createManyAndReturn
   */
  export type UserSettingsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserSettings.
     */
    data: UserSettingsCreateManyInput | UserSettingsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserSettings update
   */
  export type UserSettingsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsInclude<ExtArgs> | null
    /**
     * The data needed to update a UserSettings.
     */
    data: XOR<UserSettingsUpdateInput, UserSettingsUncheckedUpdateInput>
    /**
     * Choose, which UserSettings to update.
     */
    where: UserSettingsWhereUniqueInput
  }

  /**
   * UserSettings updateMany
   */
  export type UserSettingsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserSettings.
     */
    data: XOR<UserSettingsUpdateManyMutationInput, UserSettingsUncheckedUpdateManyInput>
    /**
     * Filter which UserSettings to update
     */
    where?: UserSettingsWhereInput
  }

  /**
   * UserSettings upsert
   */
  export type UserSettingsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsInclude<ExtArgs> | null
    /**
     * The filter to search for the UserSettings to update in case it exists.
     */
    where: UserSettingsWhereUniqueInput
    /**
     * In case the UserSettings found by the `where` argument doesn't exist, create a new UserSettings with this data.
     */
    create: XOR<UserSettingsCreateInput, UserSettingsUncheckedCreateInput>
    /**
     * In case the UserSettings was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserSettingsUpdateInput, UserSettingsUncheckedUpdateInput>
  }

  /**
   * UserSettings delete
   */
  export type UserSettingsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsInclude<ExtArgs> | null
    /**
     * Filter which UserSettings to delete.
     */
    where: UserSettingsWhereUniqueInput
  }

  /**
   * UserSettings deleteMany
   */
  export type UserSettingsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSettings to delete
     */
    where?: UserSettingsWhereInput
  }

  /**
   * UserSettings without action
   */
  export type UserSettingsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsInclude<ExtArgs> | null
  }


  /**
   * Model Workout
   */

  export type AggregateWorkout = {
    _count: WorkoutCountAggregateOutputType | null
    _avg: WorkoutAvgAggregateOutputType | null
    _sum: WorkoutSumAggregateOutputType | null
    _min: WorkoutMinAggregateOutputType | null
    _max: WorkoutMaxAggregateOutputType | null
  }

  export type WorkoutAvgAggregateOutputType = {
    id: number | null
    duration: number | null
    calories: number | null
    rating: number | null
    ratingCount: number | null
  }

  export type WorkoutSumAggregateOutputType = {
    id: number | null
    duration: number | null
    calories: number | null
    rating: number | null
    ratingCount: number | null
  }

  export type WorkoutMinAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    category: string | null
    difficulty: string | null
    duration: number | null
    calories: number | null
    imageUrl: string | null
    videoUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
    rating: number | null
    ratingCount: number | null
  }

  export type WorkoutMaxAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    category: string | null
    difficulty: string | null
    duration: number | null
    calories: number | null
    imageUrl: string | null
    videoUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
    rating: number | null
    ratingCount: number | null
  }

  export type WorkoutCountAggregateOutputType = {
    id: number
    title: number
    description: number
    category: number
    difficulty: number
    duration: number
    calories: number
    muscleGroups: number
    imageUrl: number
    videoUrl: number
    createdAt: number
    updatedAt: number
    rating: number
    ratingCount: number
    _all: number
  }


  export type WorkoutAvgAggregateInputType = {
    id?: true
    duration?: true
    calories?: true
    rating?: true
    ratingCount?: true
  }

  export type WorkoutSumAggregateInputType = {
    id?: true
    duration?: true
    calories?: true
    rating?: true
    ratingCount?: true
  }

  export type WorkoutMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    category?: true
    difficulty?: true
    duration?: true
    calories?: true
    imageUrl?: true
    videoUrl?: true
    createdAt?: true
    updatedAt?: true
    rating?: true
    ratingCount?: true
  }

  export type WorkoutMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    category?: true
    difficulty?: true
    duration?: true
    calories?: true
    imageUrl?: true
    videoUrl?: true
    createdAt?: true
    updatedAt?: true
    rating?: true
    ratingCount?: true
  }

  export type WorkoutCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    category?: true
    difficulty?: true
    duration?: true
    calories?: true
    muscleGroups?: true
    imageUrl?: true
    videoUrl?: true
    createdAt?: true
    updatedAt?: true
    rating?: true
    ratingCount?: true
    _all?: true
  }

  export type WorkoutAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Workout to aggregate.
     */
    where?: WorkoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workouts to fetch.
     */
    orderBy?: WorkoutOrderByWithRelationInput | WorkoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Workouts
    **/
    _count?: true | WorkoutCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkoutAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkoutSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkoutMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkoutMaxAggregateInputType
  }

  export type GetWorkoutAggregateType<T extends WorkoutAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkout]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkout[P]>
      : GetScalarType<T[P], AggregateWorkout[P]>
  }




  export type WorkoutGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutWhereInput
    orderBy?: WorkoutOrderByWithAggregationInput | WorkoutOrderByWithAggregationInput[]
    by: WorkoutScalarFieldEnum[] | WorkoutScalarFieldEnum
    having?: WorkoutScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkoutCountAggregateInputType | true
    _avg?: WorkoutAvgAggregateInputType
    _sum?: WorkoutSumAggregateInputType
    _min?: WorkoutMinAggregateInputType
    _max?: WorkoutMaxAggregateInputType
  }

  export type WorkoutGroupByOutputType = {
    id: number
    title: string
    description: string
    category: string
    difficulty: string
    duration: number
    calories: number
    muscleGroups: string[]
    imageUrl: string | null
    videoUrl: string | null
    createdAt: Date
    updatedAt: Date
    rating: number
    ratingCount: number
    _count: WorkoutCountAggregateOutputType | null
    _avg: WorkoutAvgAggregateOutputType | null
    _sum: WorkoutSumAggregateOutputType | null
    _min: WorkoutMinAggregateOutputType | null
    _max: WorkoutMaxAggregateOutputType | null
  }

  type GetWorkoutGroupByPayload<T extends WorkoutGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkoutGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkoutGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkoutGroupByOutputType[P]>
            : GetScalarType<T[P], WorkoutGroupByOutputType[P]>
        }
      >
    >


  export type WorkoutSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    category?: boolean
    difficulty?: boolean
    duration?: boolean
    calories?: boolean
    muscleGroups?: boolean
    imageUrl?: boolean
    videoUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    rating?: boolean
    ratingCount?: boolean
    exercises?: boolean | Workout$exercisesArgs<ExtArgs>
    workoutHistory?: boolean | Workout$workoutHistoryArgs<ExtArgs>
    favoriteBy?: boolean | Workout$favoriteByArgs<ExtArgs>
    scheduledEvents?: boolean | Workout$scheduledEventsArgs<ExtArgs>
    _count?: boolean | WorkoutCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workout"]>

  export type WorkoutSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    category?: boolean
    difficulty?: boolean
    duration?: boolean
    calories?: boolean
    muscleGroups?: boolean
    imageUrl?: boolean
    videoUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    rating?: boolean
    ratingCount?: boolean
  }, ExtArgs["result"]["workout"]>

  export type WorkoutSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    category?: boolean
    difficulty?: boolean
    duration?: boolean
    calories?: boolean
    muscleGroups?: boolean
    imageUrl?: boolean
    videoUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    rating?: boolean
    ratingCount?: boolean
  }

  export type WorkoutInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exercises?: boolean | Workout$exercisesArgs<ExtArgs>
    workoutHistory?: boolean | Workout$workoutHistoryArgs<ExtArgs>
    favoriteBy?: boolean | Workout$favoriteByArgs<ExtArgs>
    scheduledEvents?: boolean | Workout$scheduledEventsArgs<ExtArgs>
    _count?: boolean | WorkoutCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WorkoutIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $WorkoutPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Workout"
    objects: {
      exercises: Prisma.$WorkoutExercisePayload<ExtArgs>[]
      workoutHistory: Prisma.$WorkoutHistoryPayload<ExtArgs>[]
      favoriteBy: Prisma.$FavoriteWorkoutPayload<ExtArgs>[]
      scheduledEvents: Prisma.$ScheduledEventPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      description: string
      category: string
      difficulty: string
      duration: number
      calories: number
      muscleGroups: string[]
      imageUrl: string | null
      videoUrl: string | null
      createdAt: Date
      updatedAt: Date
      rating: number
      ratingCount: number
    }, ExtArgs["result"]["workout"]>
    composites: {}
  }

  type WorkoutGetPayload<S extends boolean | null | undefined | WorkoutDefaultArgs> = $Result.GetResult<Prisma.$WorkoutPayload, S>

  type WorkoutCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WorkoutFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WorkoutCountAggregateInputType | true
    }

  export interface WorkoutDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Workout'], meta: { name: 'Workout' } }
    /**
     * Find zero or one Workout that matches the filter.
     * @param {WorkoutFindUniqueArgs} args - Arguments to find a Workout
     * @example
     * // Get one Workout
     * const workout = await prisma.workout.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkoutFindUniqueArgs>(args: SelectSubset<T, WorkoutFindUniqueArgs<ExtArgs>>): Prisma__WorkoutClient<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Workout that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {WorkoutFindUniqueOrThrowArgs} args - Arguments to find a Workout
     * @example
     * // Get one Workout
     * const workout = await prisma.workout.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkoutFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkoutFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkoutClient<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Workout that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutFindFirstArgs} args - Arguments to find a Workout
     * @example
     * // Get one Workout
     * const workout = await prisma.workout.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkoutFindFirstArgs>(args?: SelectSubset<T, WorkoutFindFirstArgs<ExtArgs>>): Prisma__WorkoutClient<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Workout that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutFindFirstOrThrowArgs} args - Arguments to find a Workout
     * @example
     * // Get one Workout
     * const workout = await prisma.workout.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkoutFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkoutFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkoutClient<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Workouts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Workouts
     * const workouts = await prisma.workout.findMany()
     * 
     * // Get first 10 Workouts
     * const workouts = await prisma.workout.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workoutWithIdOnly = await prisma.workout.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkoutFindManyArgs>(args?: SelectSubset<T, WorkoutFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Workout.
     * @param {WorkoutCreateArgs} args - Arguments to create a Workout.
     * @example
     * // Create one Workout
     * const Workout = await prisma.workout.create({
     *   data: {
     *     // ... data to create a Workout
     *   }
     * })
     * 
     */
    create<T extends WorkoutCreateArgs>(args: SelectSubset<T, WorkoutCreateArgs<ExtArgs>>): Prisma__WorkoutClient<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Workouts.
     * @param {WorkoutCreateManyArgs} args - Arguments to create many Workouts.
     * @example
     * // Create many Workouts
     * const workout = await prisma.workout.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkoutCreateManyArgs>(args?: SelectSubset<T, WorkoutCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Workouts and returns the data saved in the database.
     * @param {WorkoutCreateManyAndReturnArgs} args - Arguments to create many Workouts.
     * @example
     * // Create many Workouts
     * const workout = await prisma.workout.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Workouts and only return the `id`
     * const workoutWithIdOnly = await prisma.workout.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkoutCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkoutCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Workout.
     * @param {WorkoutDeleteArgs} args - Arguments to delete one Workout.
     * @example
     * // Delete one Workout
     * const Workout = await prisma.workout.delete({
     *   where: {
     *     // ... filter to delete one Workout
     *   }
     * })
     * 
     */
    delete<T extends WorkoutDeleteArgs>(args: SelectSubset<T, WorkoutDeleteArgs<ExtArgs>>): Prisma__WorkoutClient<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Workout.
     * @param {WorkoutUpdateArgs} args - Arguments to update one Workout.
     * @example
     * // Update one Workout
     * const workout = await prisma.workout.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkoutUpdateArgs>(args: SelectSubset<T, WorkoutUpdateArgs<ExtArgs>>): Prisma__WorkoutClient<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Workouts.
     * @param {WorkoutDeleteManyArgs} args - Arguments to filter Workouts to delete.
     * @example
     * // Delete a few Workouts
     * const { count } = await prisma.workout.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkoutDeleteManyArgs>(args?: SelectSubset<T, WorkoutDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Workouts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Workouts
     * const workout = await prisma.workout.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkoutUpdateManyArgs>(args: SelectSubset<T, WorkoutUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Workout.
     * @param {WorkoutUpsertArgs} args - Arguments to update or create a Workout.
     * @example
     * // Update or create a Workout
     * const workout = await prisma.workout.upsert({
     *   create: {
     *     // ... data to create a Workout
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Workout we want to update
     *   }
     * })
     */
    upsert<T extends WorkoutUpsertArgs>(args: SelectSubset<T, WorkoutUpsertArgs<ExtArgs>>): Prisma__WorkoutClient<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Workouts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutCountArgs} args - Arguments to filter Workouts to count.
     * @example
     * // Count the number of Workouts
     * const count = await prisma.workout.count({
     *   where: {
     *     // ... the filter for the Workouts we want to count
     *   }
     * })
    **/
    count<T extends WorkoutCountArgs>(
      args?: Subset<T, WorkoutCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkoutCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Workout.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkoutAggregateArgs>(args: Subset<T, WorkoutAggregateArgs>): Prisma.PrismaPromise<GetWorkoutAggregateType<T>>

    /**
     * Group by Workout.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkoutGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkoutGroupByArgs['orderBy'] }
        : { orderBy?: WorkoutGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkoutGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkoutGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Workout model
   */
  readonly fields: WorkoutFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Workout.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkoutClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    exercises<T extends Workout$exercisesArgs<ExtArgs> = {}>(args?: Subset<T, Workout$exercisesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutExercisePayload<ExtArgs>, T, "findMany"> | Null>
    workoutHistory<T extends Workout$workoutHistoryArgs<ExtArgs> = {}>(args?: Subset<T, Workout$workoutHistoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutHistoryPayload<ExtArgs>, T, "findMany"> | Null>
    favoriteBy<T extends Workout$favoriteByArgs<ExtArgs> = {}>(args?: Subset<T, Workout$favoriteByArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoriteWorkoutPayload<ExtArgs>, T, "findMany"> | Null>
    scheduledEvents<T extends Workout$scheduledEventsArgs<ExtArgs> = {}>(args?: Subset<T, Workout$scheduledEventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScheduledEventPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Workout model
   */ 
  interface WorkoutFieldRefs {
    readonly id: FieldRef<"Workout", 'Int'>
    readonly title: FieldRef<"Workout", 'String'>
    readonly description: FieldRef<"Workout", 'String'>
    readonly category: FieldRef<"Workout", 'String'>
    readonly difficulty: FieldRef<"Workout", 'String'>
    readonly duration: FieldRef<"Workout", 'Int'>
    readonly calories: FieldRef<"Workout", 'Int'>
    readonly muscleGroups: FieldRef<"Workout", 'String[]'>
    readonly imageUrl: FieldRef<"Workout", 'String'>
    readonly videoUrl: FieldRef<"Workout", 'String'>
    readonly createdAt: FieldRef<"Workout", 'DateTime'>
    readonly updatedAt: FieldRef<"Workout", 'DateTime'>
    readonly rating: FieldRef<"Workout", 'Float'>
    readonly ratingCount: FieldRef<"Workout", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Workout findUnique
   */
  export type WorkoutFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutInclude<ExtArgs> | null
    /**
     * Filter, which Workout to fetch.
     */
    where: WorkoutWhereUniqueInput
  }

  /**
   * Workout findUniqueOrThrow
   */
  export type WorkoutFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutInclude<ExtArgs> | null
    /**
     * Filter, which Workout to fetch.
     */
    where: WorkoutWhereUniqueInput
  }

  /**
   * Workout findFirst
   */
  export type WorkoutFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutInclude<ExtArgs> | null
    /**
     * Filter, which Workout to fetch.
     */
    where?: WorkoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workouts to fetch.
     */
    orderBy?: WorkoutOrderByWithRelationInput | WorkoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Workouts.
     */
    cursor?: WorkoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Workouts.
     */
    distinct?: WorkoutScalarFieldEnum | WorkoutScalarFieldEnum[]
  }

  /**
   * Workout findFirstOrThrow
   */
  export type WorkoutFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutInclude<ExtArgs> | null
    /**
     * Filter, which Workout to fetch.
     */
    where?: WorkoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workouts to fetch.
     */
    orderBy?: WorkoutOrderByWithRelationInput | WorkoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Workouts.
     */
    cursor?: WorkoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Workouts.
     */
    distinct?: WorkoutScalarFieldEnum | WorkoutScalarFieldEnum[]
  }

  /**
   * Workout findMany
   */
  export type WorkoutFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutInclude<ExtArgs> | null
    /**
     * Filter, which Workouts to fetch.
     */
    where?: WorkoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workouts to fetch.
     */
    orderBy?: WorkoutOrderByWithRelationInput | WorkoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Workouts.
     */
    cursor?: WorkoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workouts.
     */
    skip?: number
    distinct?: WorkoutScalarFieldEnum | WorkoutScalarFieldEnum[]
  }

  /**
   * Workout create
   */
  export type WorkoutCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutInclude<ExtArgs> | null
    /**
     * The data needed to create a Workout.
     */
    data: XOR<WorkoutCreateInput, WorkoutUncheckedCreateInput>
  }

  /**
   * Workout createMany
   */
  export type WorkoutCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Workouts.
     */
    data: WorkoutCreateManyInput | WorkoutCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Workout createManyAndReturn
   */
  export type WorkoutCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Workouts.
     */
    data: WorkoutCreateManyInput | WorkoutCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Workout update
   */
  export type WorkoutUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutInclude<ExtArgs> | null
    /**
     * The data needed to update a Workout.
     */
    data: XOR<WorkoutUpdateInput, WorkoutUncheckedUpdateInput>
    /**
     * Choose, which Workout to update.
     */
    where: WorkoutWhereUniqueInput
  }

  /**
   * Workout updateMany
   */
  export type WorkoutUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Workouts.
     */
    data: XOR<WorkoutUpdateManyMutationInput, WorkoutUncheckedUpdateManyInput>
    /**
     * Filter which Workouts to update
     */
    where?: WorkoutWhereInput
  }

  /**
   * Workout upsert
   */
  export type WorkoutUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutInclude<ExtArgs> | null
    /**
     * The filter to search for the Workout to update in case it exists.
     */
    where: WorkoutWhereUniqueInput
    /**
     * In case the Workout found by the `where` argument doesn't exist, create a new Workout with this data.
     */
    create: XOR<WorkoutCreateInput, WorkoutUncheckedCreateInput>
    /**
     * In case the Workout was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkoutUpdateInput, WorkoutUncheckedUpdateInput>
  }

  /**
   * Workout delete
   */
  export type WorkoutDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutInclude<ExtArgs> | null
    /**
     * Filter which Workout to delete.
     */
    where: WorkoutWhereUniqueInput
  }

  /**
   * Workout deleteMany
   */
  export type WorkoutDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Workouts to delete
     */
    where?: WorkoutWhereInput
  }

  /**
   * Workout.exercises
   */
  export type Workout$exercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutExercise
     */
    select?: WorkoutExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutExerciseInclude<ExtArgs> | null
    where?: WorkoutExerciseWhereInput
    orderBy?: WorkoutExerciseOrderByWithRelationInput | WorkoutExerciseOrderByWithRelationInput[]
    cursor?: WorkoutExerciseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkoutExerciseScalarFieldEnum | WorkoutExerciseScalarFieldEnum[]
  }

  /**
   * Workout.workoutHistory
   */
  export type Workout$workoutHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutHistory
     */
    select?: WorkoutHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutHistoryInclude<ExtArgs> | null
    where?: WorkoutHistoryWhereInput
    orderBy?: WorkoutHistoryOrderByWithRelationInput | WorkoutHistoryOrderByWithRelationInput[]
    cursor?: WorkoutHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkoutHistoryScalarFieldEnum | WorkoutHistoryScalarFieldEnum[]
  }

  /**
   * Workout.favoriteBy
   */
  export type Workout$favoriteByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteWorkout
     */
    select?: FavoriteWorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteWorkoutInclude<ExtArgs> | null
    where?: FavoriteWorkoutWhereInput
    orderBy?: FavoriteWorkoutOrderByWithRelationInput | FavoriteWorkoutOrderByWithRelationInput[]
    cursor?: FavoriteWorkoutWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FavoriteWorkoutScalarFieldEnum | FavoriteWorkoutScalarFieldEnum[]
  }

  /**
   * Workout.scheduledEvents
   */
  export type Workout$scheduledEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduledEvent
     */
    select?: ScheduledEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduledEventInclude<ExtArgs> | null
    where?: ScheduledEventWhereInput
    orderBy?: ScheduledEventOrderByWithRelationInput | ScheduledEventOrderByWithRelationInput[]
    cursor?: ScheduledEventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScheduledEventScalarFieldEnum | ScheduledEventScalarFieldEnum[]
  }

  /**
   * Workout without action
   */
  export type WorkoutDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutInclude<ExtArgs> | null
  }


  /**
   * Model Exercise
   */

  export type AggregateExercise = {
    _count: ExerciseCountAggregateOutputType | null
    _avg: ExerciseAvgAggregateOutputType | null
    _sum: ExerciseSumAggregateOutputType | null
    _min: ExerciseMinAggregateOutputType | null
    _max: ExerciseMaxAggregateOutputType | null
  }

  export type ExerciseAvgAggregateOutputType = {
    id: number | null
  }

  export type ExerciseSumAggregateOutputType = {
    id: number | null
  }

  export type ExerciseMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    instructions: string | null
    difficultyLevel: string | null
    imageUrl: string | null
    videoUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ExerciseMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    instructions: string | null
    difficultyLevel: string | null
    imageUrl: string | null
    videoUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ExerciseCountAggregateOutputType = {
    id: number
    name: number
    description: number
    instructions: number
    muscleGroups: number
    equipment: number
    difficultyLevel: number
    imageUrl: number
    videoUrl: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ExerciseAvgAggregateInputType = {
    id?: true
  }

  export type ExerciseSumAggregateInputType = {
    id?: true
  }

  export type ExerciseMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    instructions?: true
    difficultyLevel?: true
    imageUrl?: true
    videoUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ExerciseMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    instructions?: true
    difficultyLevel?: true
    imageUrl?: true
    videoUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ExerciseCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    instructions?: true
    muscleGroups?: true
    equipment?: true
    difficultyLevel?: true
    imageUrl?: true
    videoUrl?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ExerciseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Exercise to aggregate.
     */
    where?: ExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercises to fetch.
     */
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Exercises
    **/
    _count?: true | ExerciseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExerciseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExerciseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExerciseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExerciseMaxAggregateInputType
  }

  export type GetExerciseAggregateType<T extends ExerciseAggregateArgs> = {
        [P in keyof T & keyof AggregateExercise]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExercise[P]>
      : GetScalarType<T[P], AggregateExercise[P]>
  }




  export type ExerciseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExerciseWhereInput
    orderBy?: ExerciseOrderByWithAggregationInput | ExerciseOrderByWithAggregationInput[]
    by: ExerciseScalarFieldEnum[] | ExerciseScalarFieldEnum
    having?: ExerciseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExerciseCountAggregateInputType | true
    _avg?: ExerciseAvgAggregateInputType
    _sum?: ExerciseSumAggregateInputType
    _min?: ExerciseMinAggregateInputType
    _max?: ExerciseMaxAggregateInputType
  }

  export type ExerciseGroupByOutputType = {
    id: number
    name: string
    description: string
    instructions: string
    muscleGroups: string[]
    equipment: string[]
    difficultyLevel: string
    imageUrl: string | null
    videoUrl: string | null
    createdAt: Date
    updatedAt: Date
    _count: ExerciseCountAggregateOutputType | null
    _avg: ExerciseAvgAggregateOutputType | null
    _sum: ExerciseSumAggregateOutputType | null
    _min: ExerciseMinAggregateOutputType | null
    _max: ExerciseMaxAggregateOutputType | null
  }

  type GetExerciseGroupByPayload<T extends ExerciseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExerciseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExerciseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExerciseGroupByOutputType[P]>
            : GetScalarType<T[P], ExerciseGroupByOutputType[P]>
        }
      >
    >


  export type ExerciseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    instructions?: boolean
    muscleGroups?: boolean
    equipment?: boolean
    difficultyLevel?: boolean
    imageUrl?: boolean
    videoUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workouts?: boolean | Exercise$workoutsArgs<ExtArgs>
    _count?: boolean | ExerciseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["exercise"]>

  export type ExerciseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    instructions?: boolean
    muscleGroups?: boolean
    equipment?: boolean
    difficultyLevel?: boolean
    imageUrl?: boolean
    videoUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["exercise"]>

  export type ExerciseSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    instructions?: boolean
    muscleGroups?: boolean
    equipment?: boolean
    difficultyLevel?: boolean
    imageUrl?: boolean
    videoUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ExerciseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workouts?: boolean | Exercise$workoutsArgs<ExtArgs>
    _count?: boolean | ExerciseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ExerciseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ExercisePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Exercise"
    objects: {
      workouts: Prisma.$WorkoutExercisePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string
      instructions: string
      muscleGroups: string[]
      equipment: string[]
      difficultyLevel: string
      imageUrl: string | null
      videoUrl: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["exercise"]>
    composites: {}
  }

  type ExerciseGetPayload<S extends boolean | null | undefined | ExerciseDefaultArgs> = $Result.GetResult<Prisma.$ExercisePayload, S>

  type ExerciseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ExerciseFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ExerciseCountAggregateInputType | true
    }

  export interface ExerciseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Exercise'], meta: { name: 'Exercise' } }
    /**
     * Find zero or one Exercise that matches the filter.
     * @param {ExerciseFindUniqueArgs} args - Arguments to find a Exercise
     * @example
     * // Get one Exercise
     * const exercise = await prisma.exercise.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ExerciseFindUniqueArgs>(args: SelectSubset<T, ExerciseFindUniqueArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Exercise that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ExerciseFindUniqueOrThrowArgs} args - Arguments to find a Exercise
     * @example
     * // Get one Exercise
     * const exercise = await prisma.exercise.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ExerciseFindUniqueOrThrowArgs>(args: SelectSubset<T, ExerciseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Exercise that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseFindFirstArgs} args - Arguments to find a Exercise
     * @example
     * // Get one Exercise
     * const exercise = await prisma.exercise.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ExerciseFindFirstArgs>(args?: SelectSubset<T, ExerciseFindFirstArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Exercise that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseFindFirstOrThrowArgs} args - Arguments to find a Exercise
     * @example
     * // Get one Exercise
     * const exercise = await prisma.exercise.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ExerciseFindFirstOrThrowArgs>(args?: SelectSubset<T, ExerciseFindFirstOrThrowArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Exercises that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Exercises
     * const exercises = await prisma.exercise.findMany()
     * 
     * // Get first 10 Exercises
     * const exercises = await prisma.exercise.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const exerciseWithIdOnly = await prisma.exercise.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ExerciseFindManyArgs>(args?: SelectSubset<T, ExerciseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Exercise.
     * @param {ExerciseCreateArgs} args - Arguments to create a Exercise.
     * @example
     * // Create one Exercise
     * const Exercise = await prisma.exercise.create({
     *   data: {
     *     // ... data to create a Exercise
     *   }
     * })
     * 
     */
    create<T extends ExerciseCreateArgs>(args: SelectSubset<T, ExerciseCreateArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Exercises.
     * @param {ExerciseCreateManyArgs} args - Arguments to create many Exercises.
     * @example
     * // Create many Exercises
     * const exercise = await prisma.exercise.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ExerciseCreateManyArgs>(args?: SelectSubset<T, ExerciseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Exercises and returns the data saved in the database.
     * @param {ExerciseCreateManyAndReturnArgs} args - Arguments to create many Exercises.
     * @example
     * // Create many Exercises
     * const exercise = await prisma.exercise.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Exercises and only return the `id`
     * const exerciseWithIdOnly = await prisma.exercise.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ExerciseCreateManyAndReturnArgs>(args?: SelectSubset<T, ExerciseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Exercise.
     * @param {ExerciseDeleteArgs} args - Arguments to delete one Exercise.
     * @example
     * // Delete one Exercise
     * const Exercise = await prisma.exercise.delete({
     *   where: {
     *     // ... filter to delete one Exercise
     *   }
     * })
     * 
     */
    delete<T extends ExerciseDeleteArgs>(args: SelectSubset<T, ExerciseDeleteArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Exercise.
     * @param {ExerciseUpdateArgs} args - Arguments to update one Exercise.
     * @example
     * // Update one Exercise
     * const exercise = await prisma.exercise.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ExerciseUpdateArgs>(args: SelectSubset<T, ExerciseUpdateArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Exercises.
     * @param {ExerciseDeleteManyArgs} args - Arguments to filter Exercises to delete.
     * @example
     * // Delete a few Exercises
     * const { count } = await prisma.exercise.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ExerciseDeleteManyArgs>(args?: SelectSubset<T, ExerciseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Exercises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Exercises
     * const exercise = await prisma.exercise.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ExerciseUpdateManyArgs>(args: SelectSubset<T, ExerciseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Exercise.
     * @param {ExerciseUpsertArgs} args - Arguments to update or create a Exercise.
     * @example
     * // Update or create a Exercise
     * const exercise = await prisma.exercise.upsert({
     *   create: {
     *     // ... data to create a Exercise
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Exercise we want to update
     *   }
     * })
     */
    upsert<T extends ExerciseUpsertArgs>(args: SelectSubset<T, ExerciseUpsertArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Exercises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseCountArgs} args - Arguments to filter Exercises to count.
     * @example
     * // Count the number of Exercises
     * const count = await prisma.exercise.count({
     *   where: {
     *     // ... the filter for the Exercises we want to count
     *   }
     * })
    **/
    count<T extends ExerciseCountArgs>(
      args?: Subset<T, ExerciseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExerciseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Exercise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExerciseAggregateArgs>(args: Subset<T, ExerciseAggregateArgs>): Prisma.PrismaPromise<GetExerciseAggregateType<T>>

    /**
     * Group by Exercise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExerciseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExerciseGroupByArgs['orderBy'] }
        : { orderBy?: ExerciseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExerciseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExerciseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Exercise model
   */
  readonly fields: ExerciseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Exercise.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExerciseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    workouts<T extends Exercise$workoutsArgs<ExtArgs> = {}>(args?: Subset<T, Exercise$workoutsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutExercisePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Exercise model
   */ 
  interface ExerciseFieldRefs {
    readonly id: FieldRef<"Exercise", 'Int'>
    readonly name: FieldRef<"Exercise", 'String'>
    readonly description: FieldRef<"Exercise", 'String'>
    readonly instructions: FieldRef<"Exercise", 'String'>
    readonly muscleGroups: FieldRef<"Exercise", 'String[]'>
    readonly equipment: FieldRef<"Exercise", 'String[]'>
    readonly difficultyLevel: FieldRef<"Exercise", 'String'>
    readonly imageUrl: FieldRef<"Exercise", 'String'>
    readonly videoUrl: FieldRef<"Exercise", 'String'>
    readonly createdAt: FieldRef<"Exercise", 'DateTime'>
    readonly updatedAt: FieldRef<"Exercise", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Exercise findUnique
   */
  export type ExerciseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter, which Exercise to fetch.
     */
    where: ExerciseWhereUniqueInput
  }

  /**
   * Exercise findUniqueOrThrow
   */
  export type ExerciseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter, which Exercise to fetch.
     */
    where: ExerciseWhereUniqueInput
  }

  /**
   * Exercise findFirst
   */
  export type ExerciseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter, which Exercise to fetch.
     */
    where?: ExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercises to fetch.
     */
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Exercises.
     */
    cursor?: ExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Exercises.
     */
    distinct?: ExerciseScalarFieldEnum | ExerciseScalarFieldEnum[]
  }

  /**
   * Exercise findFirstOrThrow
   */
  export type ExerciseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter, which Exercise to fetch.
     */
    where?: ExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercises to fetch.
     */
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Exercises.
     */
    cursor?: ExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Exercises.
     */
    distinct?: ExerciseScalarFieldEnum | ExerciseScalarFieldEnum[]
  }

  /**
   * Exercise findMany
   */
  export type ExerciseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter, which Exercises to fetch.
     */
    where?: ExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercises to fetch.
     */
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Exercises.
     */
    cursor?: ExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercises.
     */
    skip?: number
    distinct?: ExerciseScalarFieldEnum | ExerciseScalarFieldEnum[]
  }

  /**
   * Exercise create
   */
  export type ExerciseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * The data needed to create a Exercise.
     */
    data: XOR<ExerciseCreateInput, ExerciseUncheckedCreateInput>
  }

  /**
   * Exercise createMany
   */
  export type ExerciseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Exercises.
     */
    data: ExerciseCreateManyInput | ExerciseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Exercise createManyAndReturn
   */
  export type ExerciseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Exercises.
     */
    data: ExerciseCreateManyInput | ExerciseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Exercise update
   */
  export type ExerciseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * The data needed to update a Exercise.
     */
    data: XOR<ExerciseUpdateInput, ExerciseUncheckedUpdateInput>
    /**
     * Choose, which Exercise to update.
     */
    where: ExerciseWhereUniqueInput
  }

  /**
   * Exercise updateMany
   */
  export type ExerciseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Exercises.
     */
    data: XOR<ExerciseUpdateManyMutationInput, ExerciseUncheckedUpdateManyInput>
    /**
     * Filter which Exercises to update
     */
    where?: ExerciseWhereInput
  }

  /**
   * Exercise upsert
   */
  export type ExerciseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * The filter to search for the Exercise to update in case it exists.
     */
    where: ExerciseWhereUniqueInput
    /**
     * In case the Exercise found by the `where` argument doesn't exist, create a new Exercise with this data.
     */
    create: XOR<ExerciseCreateInput, ExerciseUncheckedCreateInput>
    /**
     * In case the Exercise was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExerciseUpdateInput, ExerciseUncheckedUpdateInput>
  }

  /**
   * Exercise delete
   */
  export type ExerciseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter which Exercise to delete.
     */
    where: ExerciseWhereUniqueInput
  }

  /**
   * Exercise deleteMany
   */
  export type ExerciseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Exercises to delete
     */
    where?: ExerciseWhereInput
  }

  /**
   * Exercise.workouts
   */
  export type Exercise$workoutsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutExercise
     */
    select?: WorkoutExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutExerciseInclude<ExtArgs> | null
    where?: WorkoutExerciseWhereInput
    orderBy?: WorkoutExerciseOrderByWithRelationInput | WorkoutExerciseOrderByWithRelationInput[]
    cursor?: WorkoutExerciseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkoutExerciseScalarFieldEnum | WorkoutExerciseScalarFieldEnum[]
  }

  /**
   * Exercise without action
   */
  export type ExerciseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
  }


  /**
   * Model WorkoutExercise
   */

  export type AggregateWorkoutExercise = {
    _count: WorkoutExerciseCountAggregateOutputType | null
    _avg: WorkoutExerciseAvgAggregateOutputType | null
    _sum: WorkoutExerciseSumAggregateOutputType | null
    _min: WorkoutExerciseMinAggregateOutputType | null
    _max: WorkoutExerciseMaxAggregateOutputType | null
  }

  export type WorkoutExerciseAvgAggregateOutputType = {
    id: number | null
    workoutId: number | null
    exerciseId: number | null
    sets: number | null
    weight: number | null
    restTime: number | null
    order: number | null
  }

  export type WorkoutExerciseSumAggregateOutputType = {
    id: number | null
    workoutId: number | null
    exerciseId: number | null
    sets: number | null
    weight: number | null
    restTime: number | null
    order: number | null
  }

  export type WorkoutExerciseMinAggregateOutputType = {
    id: number | null
    workoutId: number | null
    exerciseId: number | null
    sets: number | null
    reps: string | null
    weight: number | null
    restTime: number | null
    notes: string | null
    order: number | null
  }

  export type WorkoutExerciseMaxAggregateOutputType = {
    id: number | null
    workoutId: number | null
    exerciseId: number | null
    sets: number | null
    reps: string | null
    weight: number | null
    restTime: number | null
    notes: string | null
    order: number | null
  }

  export type WorkoutExerciseCountAggregateOutputType = {
    id: number
    workoutId: number
    exerciseId: number
    sets: number
    reps: number
    weight: number
    restTime: number
    notes: number
    order: number
    _all: number
  }


  export type WorkoutExerciseAvgAggregateInputType = {
    id?: true
    workoutId?: true
    exerciseId?: true
    sets?: true
    weight?: true
    restTime?: true
    order?: true
  }

  export type WorkoutExerciseSumAggregateInputType = {
    id?: true
    workoutId?: true
    exerciseId?: true
    sets?: true
    weight?: true
    restTime?: true
    order?: true
  }

  export type WorkoutExerciseMinAggregateInputType = {
    id?: true
    workoutId?: true
    exerciseId?: true
    sets?: true
    reps?: true
    weight?: true
    restTime?: true
    notes?: true
    order?: true
  }

  export type WorkoutExerciseMaxAggregateInputType = {
    id?: true
    workoutId?: true
    exerciseId?: true
    sets?: true
    reps?: true
    weight?: true
    restTime?: true
    notes?: true
    order?: true
  }

  export type WorkoutExerciseCountAggregateInputType = {
    id?: true
    workoutId?: true
    exerciseId?: true
    sets?: true
    reps?: true
    weight?: true
    restTime?: true
    notes?: true
    order?: true
    _all?: true
  }

  export type WorkoutExerciseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkoutExercise to aggregate.
     */
    where?: WorkoutExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutExercises to fetch.
     */
    orderBy?: WorkoutExerciseOrderByWithRelationInput | WorkoutExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkoutExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutExercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutExercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkoutExercises
    **/
    _count?: true | WorkoutExerciseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkoutExerciseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkoutExerciseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkoutExerciseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkoutExerciseMaxAggregateInputType
  }

  export type GetWorkoutExerciseAggregateType<T extends WorkoutExerciseAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkoutExercise]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkoutExercise[P]>
      : GetScalarType<T[P], AggregateWorkoutExercise[P]>
  }




  export type WorkoutExerciseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutExerciseWhereInput
    orderBy?: WorkoutExerciseOrderByWithAggregationInput | WorkoutExerciseOrderByWithAggregationInput[]
    by: WorkoutExerciseScalarFieldEnum[] | WorkoutExerciseScalarFieldEnum
    having?: WorkoutExerciseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkoutExerciseCountAggregateInputType | true
    _avg?: WorkoutExerciseAvgAggregateInputType
    _sum?: WorkoutExerciseSumAggregateInputType
    _min?: WorkoutExerciseMinAggregateInputType
    _max?: WorkoutExerciseMaxAggregateInputType
  }

  export type WorkoutExerciseGroupByOutputType = {
    id: number
    workoutId: number
    exerciseId: number
    sets: number | null
    reps: string | null
    weight: number | null
    restTime: number | null
    notes: string | null
    order: number
    _count: WorkoutExerciseCountAggregateOutputType | null
    _avg: WorkoutExerciseAvgAggregateOutputType | null
    _sum: WorkoutExerciseSumAggregateOutputType | null
    _min: WorkoutExerciseMinAggregateOutputType | null
    _max: WorkoutExerciseMaxAggregateOutputType | null
  }

  type GetWorkoutExerciseGroupByPayload<T extends WorkoutExerciseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkoutExerciseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkoutExerciseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkoutExerciseGroupByOutputType[P]>
            : GetScalarType<T[P], WorkoutExerciseGroupByOutputType[P]>
        }
      >
    >


  export type WorkoutExerciseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workoutId?: boolean
    exerciseId?: boolean
    sets?: boolean
    reps?: boolean
    weight?: boolean
    restTime?: boolean
    notes?: boolean
    order?: boolean
    workout?: boolean | WorkoutDefaultArgs<ExtArgs>
    exercise?: boolean | ExerciseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workoutExercise"]>

  export type WorkoutExerciseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workoutId?: boolean
    exerciseId?: boolean
    sets?: boolean
    reps?: boolean
    weight?: boolean
    restTime?: boolean
    notes?: boolean
    order?: boolean
    workout?: boolean | WorkoutDefaultArgs<ExtArgs>
    exercise?: boolean | ExerciseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workoutExercise"]>

  export type WorkoutExerciseSelectScalar = {
    id?: boolean
    workoutId?: boolean
    exerciseId?: boolean
    sets?: boolean
    reps?: boolean
    weight?: boolean
    restTime?: boolean
    notes?: boolean
    order?: boolean
  }

  export type WorkoutExerciseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workout?: boolean | WorkoutDefaultArgs<ExtArgs>
    exercise?: boolean | ExerciseDefaultArgs<ExtArgs>
  }
  export type WorkoutExerciseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workout?: boolean | WorkoutDefaultArgs<ExtArgs>
    exercise?: boolean | ExerciseDefaultArgs<ExtArgs>
  }

  export type $WorkoutExercisePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkoutExercise"
    objects: {
      workout: Prisma.$WorkoutPayload<ExtArgs>
      exercise: Prisma.$ExercisePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      workoutId: number
      exerciseId: number
      sets: number | null
      reps: string | null
      weight: number | null
      restTime: number | null
      notes: string | null
      order: number
    }, ExtArgs["result"]["workoutExercise"]>
    composites: {}
  }

  type WorkoutExerciseGetPayload<S extends boolean | null | undefined | WorkoutExerciseDefaultArgs> = $Result.GetResult<Prisma.$WorkoutExercisePayload, S>

  type WorkoutExerciseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WorkoutExerciseFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WorkoutExerciseCountAggregateInputType | true
    }

  export interface WorkoutExerciseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkoutExercise'], meta: { name: 'WorkoutExercise' } }
    /**
     * Find zero or one WorkoutExercise that matches the filter.
     * @param {WorkoutExerciseFindUniqueArgs} args - Arguments to find a WorkoutExercise
     * @example
     * // Get one WorkoutExercise
     * const workoutExercise = await prisma.workoutExercise.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkoutExerciseFindUniqueArgs>(args: SelectSubset<T, WorkoutExerciseFindUniqueArgs<ExtArgs>>): Prisma__WorkoutExerciseClient<$Result.GetResult<Prisma.$WorkoutExercisePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one WorkoutExercise that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {WorkoutExerciseFindUniqueOrThrowArgs} args - Arguments to find a WorkoutExercise
     * @example
     * // Get one WorkoutExercise
     * const workoutExercise = await prisma.workoutExercise.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkoutExerciseFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkoutExerciseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkoutExerciseClient<$Result.GetResult<Prisma.$WorkoutExercisePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first WorkoutExercise that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutExerciseFindFirstArgs} args - Arguments to find a WorkoutExercise
     * @example
     * // Get one WorkoutExercise
     * const workoutExercise = await prisma.workoutExercise.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkoutExerciseFindFirstArgs>(args?: SelectSubset<T, WorkoutExerciseFindFirstArgs<ExtArgs>>): Prisma__WorkoutExerciseClient<$Result.GetResult<Prisma.$WorkoutExercisePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first WorkoutExercise that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutExerciseFindFirstOrThrowArgs} args - Arguments to find a WorkoutExercise
     * @example
     * // Get one WorkoutExercise
     * const workoutExercise = await prisma.workoutExercise.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkoutExerciseFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkoutExerciseFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkoutExerciseClient<$Result.GetResult<Prisma.$WorkoutExercisePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more WorkoutExercises that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutExerciseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkoutExercises
     * const workoutExercises = await prisma.workoutExercise.findMany()
     * 
     * // Get first 10 WorkoutExercises
     * const workoutExercises = await prisma.workoutExercise.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workoutExerciseWithIdOnly = await prisma.workoutExercise.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkoutExerciseFindManyArgs>(args?: SelectSubset<T, WorkoutExerciseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutExercisePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a WorkoutExercise.
     * @param {WorkoutExerciseCreateArgs} args - Arguments to create a WorkoutExercise.
     * @example
     * // Create one WorkoutExercise
     * const WorkoutExercise = await prisma.workoutExercise.create({
     *   data: {
     *     // ... data to create a WorkoutExercise
     *   }
     * })
     * 
     */
    create<T extends WorkoutExerciseCreateArgs>(args: SelectSubset<T, WorkoutExerciseCreateArgs<ExtArgs>>): Prisma__WorkoutExerciseClient<$Result.GetResult<Prisma.$WorkoutExercisePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many WorkoutExercises.
     * @param {WorkoutExerciseCreateManyArgs} args - Arguments to create many WorkoutExercises.
     * @example
     * // Create many WorkoutExercises
     * const workoutExercise = await prisma.workoutExercise.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkoutExerciseCreateManyArgs>(args?: SelectSubset<T, WorkoutExerciseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkoutExercises and returns the data saved in the database.
     * @param {WorkoutExerciseCreateManyAndReturnArgs} args - Arguments to create many WorkoutExercises.
     * @example
     * // Create many WorkoutExercises
     * const workoutExercise = await prisma.workoutExercise.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkoutExercises and only return the `id`
     * const workoutExerciseWithIdOnly = await prisma.workoutExercise.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkoutExerciseCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkoutExerciseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutExercisePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a WorkoutExercise.
     * @param {WorkoutExerciseDeleteArgs} args - Arguments to delete one WorkoutExercise.
     * @example
     * // Delete one WorkoutExercise
     * const WorkoutExercise = await prisma.workoutExercise.delete({
     *   where: {
     *     // ... filter to delete one WorkoutExercise
     *   }
     * })
     * 
     */
    delete<T extends WorkoutExerciseDeleteArgs>(args: SelectSubset<T, WorkoutExerciseDeleteArgs<ExtArgs>>): Prisma__WorkoutExerciseClient<$Result.GetResult<Prisma.$WorkoutExercisePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one WorkoutExercise.
     * @param {WorkoutExerciseUpdateArgs} args - Arguments to update one WorkoutExercise.
     * @example
     * // Update one WorkoutExercise
     * const workoutExercise = await prisma.workoutExercise.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkoutExerciseUpdateArgs>(args: SelectSubset<T, WorkoutExerciseUpdateArgs<ExtArgs>>): Prisma__WorkoutExerciseClient<$Result.GetResult<Prisma.$WorkoutExercisePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more WorkoutExercises.
     * @param {WorkoutExerciseDeleteManyArgs} args - Arguments to filter WorkoutExercises to delete.
     * @example
     * // Delete a few WorkoutExercises
     * const { count } = await prisma.workoutExercise.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkoutExerciseDeleteManyArgs>(args?: SelectSubset<T, WorkoutExerciseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkoutExercises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutExerciseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkoutExercises
     * const workoutExercise = await prisma.workoutExercise.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkoutExerciseUpdateManyArgs>(args: SelectSubset<T, WorkoutExerciseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WorkoutExercise.
     * @param {WorkoutExerciseUpsertArgs} args - Arguments to update or create a WorkoutExercise.
     * @example
     * // Update or create a WorkoutExercise
     * const workoutExercise = await prisma.workoutExercise.upsert({
     *   create: {
     *     // ... data to create a WorkoutExercise
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkoutExercise we want to update
     *   }
     * })
     */
    upsert<T extends WorkoutExerciseUpsertArgs>(args: SelectSubset<T, WorkoutExerciseUpsertArgs<ExtArgs>>): Prisma__WorkoutExerciseClient<$Result.GetResult<Prisma.$WorkoutExercisePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of WorkoutExercises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutExerciseCountArgs} args - Arguments to filter WorkoutExercises to count.
     * @example
     * // Count the number of WorkoutExercises
     * const count = await prisma.workoutExercise.count({
     *   where: {
     *     // ... the filter for the WorkoutExercises we want to count
     *   }
     * })
    **/
    count<T extends WorkoutExerciseCountArgs>(
      args?: Subset<T, WorkoutExerciseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkoutExerciseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkoutExercise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutExerciseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkoutExerciseAggregateArgs>(args: Subset<T, WorkoutExerciseAggregateArgs>): Prisma.PrismaPromise<GetWorkoutExerciseAggregateType<T>>

    /**
     * Group by WorkoutExercise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutExerciseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkoutExerciseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkoutExerciseGroupByArgs['orderBy'] }
        : { orderBy?: WorkoutExerciseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkoutExerciseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkoutExerciseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkoutExercise model
   */
  readonly fields: WorkoutExerciseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkoutExercise.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkoutExerciseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    workout<T extends WorkoutDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkoutDefaultArgs<ExtArgs>>): Prisma__WorkoutClient<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    exercise<T extends ExerciseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ExerciseDefaultArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkoutExercise model
   */ 
  interface WorkoutExerciseFieldRefs {
    readonly id: FieldRef<"WorkoutExercise", 'Int'>
    readonly workoutId: FieldRef<"WorkoutExercise", 'Int'>
    readonly exerciseId: FieldRef<"WorkoutExercise", 'Int'>
    readonly sets: FieldRef<"WorkoutExercise", 'Int'>
    readonly reps: FieldRef<"WorkoutExercise", 'String'>
    readonly weight: FieldRef<"WorkoutExercise", 'Float'>
    readonly restTime: FieldRef<"WorkoutExercise", 'Int'>
    readonly notes: FieldRef<"WorkoutExercise", 'String'>
    readonly order: FieldRef<"WorkoutExercise", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * WorkoutExercise findUnique
   */
  export type WorkoutExerciseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutExercise
     */
    select?: WorkoutExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutExerciseInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutExercise to fetch.
     */
    where: WorkoutExerciseWhereUniqueInput
  }

  /**
   * WorkoutExercise findUniqueOrThrow
   */
  export type WorkoutExerciseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutExercise
     */
    select?: WorkoutExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutExerciseInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutExercise to fetch.
     */
    where: WorkoutExerciseWhereUniqueInput
  }

  /**
   * WorkoutExercise findFirst
   */
  export type WorkoutExerciseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutExercise
     */
    select?: WorkoutExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutExerciseInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutExercise to fetch.
     */
    where?: WorkoutExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutExercises to fetch.
     */
    orderBy?: WorkoutExerciseOrderByWithRelationInput | WorkoutExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkoutExercises.
     */
    cursor?: WorkoutExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutExercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutExercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkoutExercises.
     */
    distinct?: WorkoutExerciseScalarFieldEnum | WorkoutExerciseScalarFieldEnum[]
  }

  /**
   * WorkoutExercise findFirstOrThrow
   */
  export type WorkoutExerciseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutExercise
     */
    select?: WorkoutExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutExerciseInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutExercise to fetch.
     */
    where?: WorkoutExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutExercises to fetch.
     */
    orderBy?: WorkoutExerciseOrderByWithRelationInput | WorkoutExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkoutExercises.
     */
    cursor?: WorkoutExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutExercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutExercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkoutExercises.
     */
    distinct?: WorkoutExerciseScalarFieldEnum | WorkoutExerciseScalarFieldEnum[]
  }

  /**
   * WorkoutExercise findMany
   */
  export type WorkoutExerciseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutExercise
     */
    select?: WorkoutExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutExerciseInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutExercises to fetch.
     */
    where?: WorkoutExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutExercises to fetch.
     */
    orderBy?: WorkoutExerciseOrderByWithRelationInput | WorkoutExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkoutExercises.
     */
    cursor?: WorkoutExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutExercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutExercises.
     */
    skip?: number
    distinct?: WorkoutExerciseScalarFieldEnum | WorkoutExerciseScalarFieldEnum[]
  }

  /**
   * WorkoutExercise create
   */
  export type WorkoutExerciseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutExercise
     */
    select?: WorkoutExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutExerciseInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkoutExercise.
     */
    data: XOR<WorkoutExerciseCreateInput, WorkoutExerciseUncheckedCreateInput>
  }

  /**
   * WorkoutExercise createMany
   */
  export type WorkoutExerciseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkoutExercises.
     */
    data: WorkoutExerciseCreateManyInput | WorkoutExerciseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkoutExercise createManyAndReturn
   */
  export type WorkoutExerciseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutExercise
     */
    select?: WorkoutExerciseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many WorkoutExercises.
     */
    data: WorkoutExerciseCreateManyInput | WorkoutExerciseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutExerciseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkoutExercise update
   */
  export type WorkoutExerciseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutExercise
     */
    select?: WorkoutExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutExerciseInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkoutExercise.
     */
    data: XOR<WorkoutExerciseUpdateInput, WorkoutExerciseUncheckedUpdateInput>
    /**
     * Choose, which WorkoutExercise to update.
     */
    where: WorkoutExerciseWhereUniqueInput
  }

  /**
   * WorkoutExercise updateMany
   */
  export type WorkoutExerciseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkoutExercises.
     */
    data: XOR<WorkoutExerciseUpdateManyMutationInput, WorkoutExerciseUncheckedUpdateManyInput>
    /**
     * Filter which WorkoutExercises to update
     */
    where?: WorkoutExerciseWhereInput
  }

  /**
   * WorkoutExercise upsert
   */
  export type WorkoutExerciseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutExercise
     */
    select?: WorkoutExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutExerciseInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkoutExercise to update in case it exists.
     */
    where: WorkoutExerciseWhereUniqueInput
    /**
     * In case the WorkoutExercise found by the `where` argument doesn't exist, create a new WorkoutExercise with this data.
     */
    create: XOR<WorkoutExerciseCreateInput, WorkoutExerciseUncheckedCreateInput>
    /**
     * In case the WorkoutExercise was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkoutExerciseUpdateInput, WorkoutExerciseUncheckedUpdateInput>
  }

  /**
   * WorkoutExercise delete
   */
  export type WorkoutExerciseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutExercise
     */
    select?: WorkoutExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutExerciseInclude<ExtArgs> | null
    /**
     * Filter which WorkoutExercise to delete.
     */
    where: WorkoutExerciseWhereUniqueInput
  }

  /**
   * WorkoutExercise deleteMany
   */
  export type WorkoutExerciseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkoutExercises to delete
     */
    where?: WorkoutExerciseWhereInput
  }

  /**
   * WorkoutExercise without action
   */
  export type WorkoutExerciseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutExercise
     */
    select?: WorkoutExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutExerciseInclude<ExtArgs> | null
  }


  /**
   * Model MeditationSession
   */

  export type AggregateMeditationSession = {
    _count: MeditationSessionCountAggregateOutputType | null
    _avg: MeditationSessionAvgAggregateOutputType | null
    _sum: MeditationSessionSumAggregateOutputType | null
    _min: MeditationSessionMinAggregateOutputType | null
    _max: MeditationSessionMaxAggregateOutputType | null
  }

  export type MeditationSessionAvgAggregateOutputType = {
    id: number | null
    duration: number | null
    rating: number | null
    ratingCount: number | null
  }

  export type MeditationSessionSumAggregateOutputType = {
    id: number | null
    duration: number | null
    rating: number | null
    ratingCount: number | null
  }

  export type MeditationSessionMinAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    category: string | null
    duration: number | null
    level: string | null
    instructor: string | null
    audioUrl: string | null
    imageUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
    rating: number | null
    ratingCount: number | null
  }

  export type MeditationSessionMaxAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    category: string | null
    duration: number | null
    level: string | null
    instructor: string | null
    audioUrl: string | null
    imageUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
    rating: number | null
    ratingCount: number | null
  }

  export type MeditationSessionCountAggregateOutputType = {
    id: number
    title: number
    description: number
    category: number
    duration: number
    level: number
    instructor: number
    audioUrl: number
    imageUrl: number
    createdAt: number
    updatedAt: number
    rating: number
    ratingCount: number
    _all: number
  }


  export type MeditationSessionAvgAggregateInputType = {
    id?: true
    duration?: true
    rating?: true
    ratingCount?: true
  }

  export type MeditationSessionSumAggregateInputType = {
    id?: true
    duration?: true
    rating?: true
    ratingCount?: true
  }

  export type MeditationSessionMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    category?: true
    duration?: true
    level?: true
    instructor?: true
    audioUrl?: true
    imageUrl?: true
    createdAt?: true
    updatedAt?: true
    rating?: true
    ratingCount?: true
  }

  export type MeditationSessionMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    category?: true
    duration?: true
    level?: true
    instructor?: true
    audioUrl?: true
    imageUrl?: true
    createdAt?: true
    updatedAt?: true
    rating?: true
    ratingCount?: true
  }

  export type MeditationSessionCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    category?: true
    duration?: true
    level?: true
    instructor?: true
    audioUrl?: true
    imageUrl?: true
    createdAt?: true
    updatedAt?: true
    rating?: true
    ratingCount?: true
    _all?: true
  }

  export type MeditationSessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MeditationSession to aggregate.
     */
    where?: MeditationSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeditationSessions to fetch.
     */
    orderBy?: MeditationSessionOrderByWithRelationInput | MeditationSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MeditationSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeditationSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeditationSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MeditationSessions
    **/
    _count?: true | MeditationSessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MeditationSessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MeditationSessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MeditationSessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MeditationSessionMaxAggregateInputType
  }

  export type GetMeditationSessionAggregateType<T extends MeditationSessionAggregateArgs> = {
        [P in keyof T & keyof AggregateMeditationSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMeditationSession[P]>
      : GetScalarType<T[P], AggregateMeditationSession[P]>
  }




  export type MeditationSessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MeditationSessionWhereInput
    orderBy?: MeditationSessionOrderByWithAggregationInput | MeditationSessionOrderByWithAggregationInput[]
    by: MeditationSessionScalarFieldEnum[] | MeditationSessionScalarFieldEnum
    having?: MeditationSessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MeditationSessionCountAggregateInputType | true
    _avg?: MeditationSessionAvgAggregateInputType
    _sum?: MeditationSessionSumAggregateInputType
    _min?: MeditationSessionMinAggregateInputType
    _max?: MeditationSessionMaxAggregateInputType
  }

  export type MeditationSessionGroupByOutputType = {
    id: number
    title: string
    description: string
    category: string
    duration: number
    level: string
    instructor: string
    audioUrl: string
    imageUrl: string | null
    createdAt: Date
    updatedAt: Date
    rating: number
    ratingCount: number
    _count: MeditationSessionCountAggregateOutputType | null
    _avg: MeditationSessionAvgAggregateOutputType | null
    _sum: MeditationSessionSumAggregateOutputType | null
    _min: MeditationSessionMinAggregateOutputType | null
    _max: MeditationSessionMaxAggregateOutputType | null
  }

  type GetMeditationSessionGroupByPayload<T extends MeditationSessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MeditationSessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MeditationSessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MeditationSessionGroupByOutputType[P]>
            : GetScalarType<T[P], MeditationSessionGroupByOutputType[P]>
        }
      >
    >


  export type MeditationSessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    category?: boolean
    duration?: boolean
    level?: boolean
    instructor?: boolean
    audioUrl?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    rating?: boolean
    ratingCount?: boolean
    favoriteBy?: boolean | MeditationSession$favoriteByArgs<ExtArgs>
    scheduledEvents?: boolean | MeditationSession$scheduledEventsArgs<ExtArgs>
    _count?: boolean | MeditationSessionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["meditationSession"]>

  export type MeditationSessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    category?: boolean
    duration?: boolean
    level?: boolean
    instructor?: boolean
    audioUrl?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    rating?: boolean
    ratingCount?: boolean
  }, ExtArgs["result"]["meditationSession"]>

  export type MeditationSessionSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    category?: boolean
    duration?: boolean
    level?: boolean
    instructor?: boolean
    audioUrl?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    rating?: boolean
    ratingCount?: boolean
  }

  export type MeditationSessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    favoriteBy?: boolean | MeditationSession$favoriteByArgs<ExtArgs>
    scheduledEvents?: boolean | MeditationSession$scheduledEventsArgs<ExtArgs>
    _count?: boolean | MeditationSessionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MeditationSessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $MeditationSessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MeditationSession"
    objects: {
      favoriteBy: Prisma.$FavoriteMeditationPayload<ExtArgs>[]
      scheduledEvents: Prisma.$ScheduledEventPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      description: string
      category: string
      duration: number
      level: string
      instructor: string
      audioUrl: string
      imageUrl: string | null
      createdAt: Date
      updatedAt: Date
      rating: number
      ratingCount: number
    }, ExtArgs["result"]["meditationSession"]>
    composites: {}
  }

  type MeditationSessionGetPayload<S extends boolean | null | undefined | MeditationSessionDefaultArgs> = $Result.GetResult<Prisma.$MeditationSessionPayload, S>

  type MeditationSessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MeditationSessionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MeditationSessionCountAggregateInputType | true
    }

  export interface MeditationSessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MeditationSession'], meta: { name: 'MeditationSession' } }
    /**
     * Find zero or one MeditationSession that matches the filter.
     * @param {MeditationSessionFindUniqueArgs} args - Arguments to find a MeditationSession
     * @example
     * // Get one MeditationSession
     * const meditationSession = await prisma.meditationSession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MeditationSessionFindUniqueArgs>(args: SelectSubset<T, MeditationSessionFindUniqueArgs<ExtArgs>>): Prisma__MeditationSessionClient<$Result.GetResult<Prisma.$MeditationSessionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one MeditationSession that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MeditationSessionFindUniqueOrThrowArgs} args - Arguments to find a MeditationSession
     * @example
     * // Get one MeditationSession
     * const meditationSession = await prisma.meditationSession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MeditationSessionFindUniqueOrThrowArgs>(args: SelectSubset<T, MeditationSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MeditationSessionClient<$Result.GetResult<Prisma.$MeditationSessionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first MeditationSession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeditationSessionFindFirstArgs} args - Arguments to find a MeditationSession
     * @example
     * // Get one MeditationSession
     * const meditationSession = await prisma.meditationSession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MeditationSessionFindFirstArgs>(args?: SelectSubset<T, MeditationSessionFindFirstArgs<ExtArgs>>): Prisma__MeditationSessionClient<$Result.GetResult<Prisma.$MeditationSessionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first MeditationSession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeditationSessionFindFirstOrThrowArgs} args - Arguments to find a MeditationSession
     * @example
     * // Get one MeditationSession
     * const meditationSession = await prisma.meditationSession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MeditationSessionFindFirstOrThrowArgs>(args?: SelectSubset<T, MeditationSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__MeditationSessionClient<$Result.GetResult<Prisma.$MeditationSessionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more MeditationSessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeditationSessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MeditationSessions
     * const meditationSessions = await prisma.meditationSession.findMany()
     * 
     * // Get first 10 MeditationSessions
     * const meditationSessions = await prisma.meditationSession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const meditationSessionWithIdOnly = await prisma.meditationSession.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MeditationSessionFindManyArgs>(args?: SelectSubset<T, MeditationSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeditationSessionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a MeditationSession.
     * @param {MeditationSessionCreateArgs} args - Arguments to create a MeditationSession.
     * @example
     * // Create one MeditationSession
     * const MeditationSession = await prisma.meditationSession.create({
     *   data: {
     *     // ... data to create a MeditationSession
     *   }
     * })
     * 
     */
    create<T extends MeditationSessionCreateArgs>(args: SelectSubset<T, MeditationSessionCreateArgs<ExtArgs>>): Prisma__MeditationSessionClient<$Result.GetResult<Prisma.$MeditationSessionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many MeditationSessions.
     * @param {MeditationSessionCreateManyArgs} args - Arguments to create many MeditationSessions.
     * @example
     * // Create many MeditationSessions
     * const meditationSession = await prisma.meditationSession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MeditationSessionCreateManyArgs>(args?: SelectSubset<T, MeditationSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MeditationSessions and returns the data saved in the database.
     * @param {MeditationSessionCreateManyAndReturnArgs} args - Arguments to create many MeditationSessions.
     * @example
     * // Create many MeditationSessions
     * const meditationSession = await prisma.meditationSession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MeditationSessions and only return the `id`
     * const meditationSessionWithIdOnly = await prisma.meditationSession.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MeditationSessionCreateManyAndReturnArgs>(args?: SelectSubset<T, MeditationSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeditationSessionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a MeditationSession.
     * @param {MeditationSessionDeleteArgs} args - Arguments to delete one MeditationSession.
     * @example
     * // Delete one MeditationSession
     * const MeditationSession = await prisma.meditationSession.delete({
     *   where: {
     *     // ... filter to delete one MeditationSession
     *   }
     * })
     * 
     */
    delete<T extends MeditationSessionDeleteArgs>(args: SelectSubset<T, MeditationSessionDeleteArgs<ExtArgs>>): Prisma__MeditationSessionClient<$Result.GetResult<Prisma.$MeditationSessionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one MeditationSession.
     * @param {MeditationSessionUpdateArgs} args - Arguments to update one MeditationSession.
     * @example
     * // Update one MeditationSession
     * const meditationSession = await prisma.meditationSession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MeditationSessionUpdateArgs>(args: SelectSubset<T, MeditationSessionUpdateArgs<ExtArgs>>): Prisma__MeditationSessionClient<$Result.GetResult<Prisma.$MeditationSessionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more MeditationSessions.
     * @param {MeditationSessionDeleteManyArgs} args - Arguments to filter MeditationSessions to delete.
     * @example
     * // Delete a few MeditationSessions
     * const { count } = await prisma.meditationSession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MeditationSessionDeleteManyArgs>(args?: SelectSubset<T, MeditationSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MeditationSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeditationSessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MeditationSessions
     * const meditationSession = await prisma.meditationSession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MeditationSessionUpdateManyArgs>(args: SelectSubset<T, MeditationSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MeditationSession.
     * @param {MeditationSessionUpsertArgs} args - Arguments to update or create a MeditationSession.
     * @example
     * // Update or create a MeditationSession
     * const meditationSession = await prisma.meditationSession.upsert({
     *   create: {
     *     // ... data to create a MeditationSession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MeditationSession we want to update
     *   }
     * })
     */
    upsert<T extends MeditationSessionUpsertArgs>(args: SelectSubset<T, MeditationSessionUpsertArgs<ExtArgs>>): Prisma__MeditationSessionClient<$Result.GetResult<Prisma.$MeditationSessionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of MeditationSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeditationSessionCountArgs} args - Arguments to filter MeditationSessions to count.
     * @example
     * // Count the number of MeditationSessions
     * const count = await prisma.meditationSession.count({
     *   where: {
     *     // ... the filter for the MeditationSessions we want to count
     *   }
     * })
    **/
    count<T extends MeditationSessionCountArgs>(
      args?: Subset<T, MeditationSessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MeditationSessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MeditationSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeditationSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MeditationSessionAggregateArgs>(args: Subset<T, MeditationSessionAggregateArgs>): Prisma.PrismaPromise<GetMeditationSessionAggregateType<T>>

    /**
     * Group by MeditationSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeditationSessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MeditationSessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MeditationSessionGroupByArgs['orderBy'] }
        : { orderBy?: MeditationSessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MeditationSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMeditationSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MeditationSession model
   */
  readonly fields: MeditationSessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MeditationSession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MeditationSessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    favoriteBy<T extends MeditationSession$favoriteByArgs<ExtArgs> = {}>(args?: Subset<T, MeditationSession$favoriteByArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoriteMeditationPayload<ExtArgs>, T, "findMany"> | Null>
    scheduledEvents<T extends MeditationSession$scheduledEventsArgs<ExtArgs> = {}>(args?: Subset<T, MeditationSession$scheduledEventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScheduledEventPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MeditationSession model
   */ 
  interface MeditationSessionFieldRefs {
    readonly id: FieldRef<"MeditationSession", 'Int'>
    readonly title: FieldRef<"MeditationSession", 'String'>
    readonly description: FieldRef<"MeditationSession", 'String'>
    readonly category: FieldRef<"MeditationSession", 'String'>
    readonly duration: FieldRef<"MeditationSession", 'Int'>
    readonly level: FieldRef<"MeditationSession", 'String'>
    readonly instructor: FieldRef<"MeditationSession", 'String'>
    readonly audioUrl: FieldRef<"MeditationSession", 'String'>
    readonly imageUrl: FieldRef<"MeditationSession", 'String'>
    readonly createdAt: FieldRef<"MeditationSession", 'DateTime'>
    readonly updatedAt: FieldRef<"MeditationSession", 'DateTime'>
    readonly rating: FieldRef<"MeditationSession", 'Float'>
    readonly ratingCount: FieldRef<"MeditationSession", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * MeditationSession findUnique
   */
  export type MeditationSessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeditationSession
     */
    select?: MeditationSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeditationSessionInclude<ExtArgs> | null
    /**
     * Filter, which MeditationSession to fetch.
     */
    where: MeditationSessionWhereUniqueInput
  }

  /**
   * MeditationSession findUniqueOrThrow
   */
  export type MeditationSessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeditationSession
     */
    select?: MeditationSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeditationSessionInclude<ExtArgs> | null
    /**
     * Filter, which MeditationSession to fetch.
     */
    where: MeditationSessionWhereUniqueInput
  }

  /**
   * MeditationSession findFirst
   */
  export type MeditationSessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeditationSession
     */
    select?: MeditationSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeditationSessionInclude<ExtArgs> | null
    /**
     * Filter, which MeditationSession to fetch.
     */
    where?: MeditationSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeditationSessions to fetch.
     */
    orderBy?: MeditationSessionOrderByWithRelationInput | MeditationSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MeditationSessions.
     */
    cursor?: MeditationSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeditationSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeditationSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MeditationSessions.
     */
    distinct?: MeditationSessionScalarFieldEnum | MeditationSessionScalarFieldEnum[]
  }

  /**
   * MeditationSession findFirstOrThrow
   */
  export type MeditationSessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeditationSession
     */
    select?: MeditationSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeditationSessionInclude<ExtArgs> | null
    /**
     * Filter, which MeditationSession to fetch.
     */
    where?: MeditationSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeditationSessions to fetch.
     */
    orderBy?: MeditationSessionOrderByWithRelationInput | MeditationSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MeditationSessions.
     */
    cursor?: MeditationSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeditationSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeditationSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MeditationSessions.
     */
    distinct?: MeditationSessionScalarFieldEnum | MeditationSessionScalarFieldEnum[]
  }

  /**
   * MeditationSession findMany
   */
  export type MeditationSessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeditationSession
     */
    select?: MeditationSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeditationSessionInclude<ExtArgs> | null
    /**
     * Filter, which MeditationSessions to fetch.
     */
    where?: MeditationSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeditationSessions to fetch.
     */
    orderBy?: MeditationSessionOrderByWithRelationInput | MeditationSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MeditationSessions.
     */
    cursor?: MeditationSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeditationSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeditationSessions.
     */
    skip?: number
    distinct?: MeditationSessionScalarFieldEnum | MeditationSessionScalarFieldEnum[]
  }

  /**
   * MeditationSession create
   */
  export type MeditationSessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeditationSession
     */
    select?: MeditationSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeditationSessionInclude<ExtArgs> | null
    /**
     * The data needed to create a MeditationSession.
     */
    data: XOR<MeditationSessionCreateInput, MeditationSessionUncheckedCreateInput>
  }

  /**
   * MeditationSession createMany
   */
  export type MeditationSessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MeditationSessions.
     */
    data: MeditationSessionCreateManyInput | MeditationSessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MeditationSession createManyAndReturn
   */
  export type MeditationSessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeditationSession
     */
    select?: MeditationSessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many MeditationSessions.
     */
    data: MeditationSessionCreateManyInput | MeditationSessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MeditationSession update
   */
  export type MeditationSessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeditationSession
     */
    select?: MeditationSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeditationSessionInclude<ExtArgs> | null
    /**
     * The data needed to update a MeditationSession.
     */
    data: XOR<MeditationSessionUpdateInput, MeditationSessionUncheckedUpdateInput>
    /**
     * Choose, which MeditationSession to update.
     */
    where: MeditationSessionWhereUniqueInput
  }

  /**
   * MeditationSession updateMany
   */
  export type MeditationSessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MeditationSessions.
     */
    data: XOR<MeditationSessionUpdateManyMutationInput, MeditationSessionUncheckedUpdateManyInput>
    /**
     * Filter which MeditationSessions to update
     */
    where?: MeditationSessionWhereInput
  }

  /**
   * MeditationSession upsert
   */
  export type MeditationSessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeditationSession
     */
    select?: MeditationSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeditationSessionInclude<ExtArgs> | null
    /**
     * The filter to search for the MeditationSession to update in case it exists.
     */
    where: MeditationSessionWhereUniqueInput
    /**
     * In case the MeditationSession found by the `where` argument doesn't exist, create a new MeditationSession with this data.
     */
    create: XOR<MeditationSessionCreateInput, MeditationSessionUncheckedCreateInput>
    /**
     * In case the MeditationSession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MeditationSessionUpdateInput, MeditationSessionUncheckedUpdateInput>
  }

  /**
   * MeditationSession delete
   */
  export type MeditationSessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeditationSession
     */
    select?: MeditationSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeditationSessionInclude<ExtArgs> | null
    /**
     * Filter which MeditationSession to delete.
     */
    where: MeditationSessionWhereUniqueInput
  }

  /**
   * MeditationSession deleteMany
   */
  export type MeditationSessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MeditationSessions to delete
     */
    where?: MeditationSessionWhereInput
  }

  /**
   * MeditationSession.favoriteBy
   */
  export type MeditationSession$favoriteByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteMeditation
     */
    select?: FavoriteMeditationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteMeditationInclude<ExtArgs> | null
    where?: FavoriteMeditationWhereInput
    orderBy?: FavoriteMeditationOrderByWithRelationInput | FavoriteMeditationOrderByWithRelationInput[]
    cursor?: FavoriteMeditationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FavoriteMeditationScalarFieldEnum | FavoriteMeditationScalarFieldEnum[]
  }

  /**
   * MeditationSession.scheduledEvents
   */
  export type MeditationSession$scheduledEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduledEvent
     */
    select?: ScheduledEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduledEventInclude<ExtArgs> | null
    where?: ScheduledEventWhereInput
    orderBy?: ScheduledEventOrderByWithRelationInput | ScheduledEventOrderByWithRelationInput[]
    cursor?: ScheduledEventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScheduledEventScalarFieldEnum | ScheduledEventScalarFieldEnum[]
  }

  /**
   * MeditationSession without action
   */
  export type MeditationSessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeditationSession
     */
    select?: MeditationSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeditationSessionInclude<ExtArgs> | null
  }


  /**
   * Model YogaSession
   */

  export type AggregateYogaSession = {
    _count: YogaSessionCountAggregateOutputType | null
    _avg: YogaSessionAvgAggregateOutputType | null
    _sum: YogaSessionSumAggregateOutputType | null
    _min: YogaSessionMinAggregateOutputType | null
    _max: YogaSessionMaxAggregateOutputType | null
  }

  export type YogaSessionAvgAggregateOutputType = {
    id: number | null
    duration: number | null
    rating: number | null
    ratingCount: number | null
  }

  export type YogaSessionSumAggregateOutputType = {
    id: number | null
    duration: number | null
    rating: number | null
    ratingCount: number | null
  }

  export type YogaSessionMinAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    style: string | null
    duration: number | null
    level: string | null
    instructor: string | null
    videoUrl: string | null
    imageUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
    rating: number | null
    ratingCount: number | null
  }

  export type YogaSessionMaxAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    style: string | null
    duration: number | null
    level: string | null
    instructor: string | null
    videoUrl: string | null
    imageUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
    rating: number | null
    ratingCount: number | null
  }

  export type YogaSessionCountAggregateOutputType = {
    id: number
    title: number
    description: number
    style: number
    duration: number
    level: number
    instructor: number
    benefits: number
    videoUrl: number
    imageUrl: number
    createdAt: number
    updatedAt: number
    rating: number
    ratingCount: number
    _all: number
  }


  export type YogaSessionAvgAggregateInputType = {
    id?: true
    duration?: true
    rating?: true
    ratingCount?: true
  }

  export type YogaSessionSumAggregateInputType = {
    id?: true
    duration?: true
    rating?: true
    ratingCount?: true
  }

  export type YogaSessionMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    style?: true
    duration?: true
    level?: true
    instructor?: true
    videoUrl?: true
    imageUrl?: true
    createdAt?: true
    updatedAt?: true
    rating?: true
    ratingCount?: true
  }

  export type YogaSessionMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    style?: true
    duration?: true
    level?: true
    instructor?: true
    videoUrl?: true
    imageUrl?: true
    createdAt?: true
    updatedAt?: true
    rating?: true
    ratingCount?: true
  }

  export type YogaSessionCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    style?: true
    duration?: true
    level?: true
    instructor?: true
    benefits?: true
    videoUrl?: true
    imageUrl?: true
    createdAt?: true
    updatedAt?: true
    rating?: true
    ratingCount?: true
    _all?: true
  }

  export type YogaSessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which YogaSession to aggregate.
     */
    where?: YogaSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YogaSessions to fetch.
     */
    orderBy?: YogaSessionOrderByWithRelationInput | YogaSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: YogaSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YogaSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YogaSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned YogaSessions
    **/
    _count?: true | YogaSessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: YogaSessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: YogaSessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: YogaSessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: YogaSessionMaxAggregateInputType
  }

  export type GetYogaSessionAggregateType<T extends YogaSessionAggregateArgs> = {
        [P in keyof T & keyof AggregateYogaSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateYogaSession[P]>
      : GetScalarType<T[P], AggregateYogaSession[P]>
  }




  export type YogaSessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: YogaSessionWhereInput
    orderBy?: YogaSessionOrderByWithAggregationInput | YogaSessionOrderByWithAggregationInput[]
    by: YogaSessionScalarFieldEnum[] | YogaSessionScalarFieldEnum
    having?: YogaSessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: YogaSessionCountAggregateInputType | true
    _avg?: YogaSessionAvgAggregateInputType
    _sum?: YogaSessionSumAggregateInputType
    _min?: YogaSessionMinAggregateInputType
    _max?: YogaSessionMaxAggregateInputType
  }

  export type YogaSessionGroupByOutputType = {
    id: number
    title: string
    description: string
    style: string
    duration: number
    level: string
    instructor: string
    benefits: string[]
    videoUrl: string
    imageUrl: string | null
    createdAt: Date
    updatedAt: Date
    rating: number
    ratingCount: number
    _count: YogaSessionCountAggregateOutputType | null
    _avg: YogaSessionAvgAggregateOutputType | null
    _sum: YogaSessionSumAggregateOutputType | null
    _min: YogaSessionMinAggregateOutputType | null
    _max: YogaSessionMaxAggregateOutputType | null
  }

  type GetYogaSessionGroupByPayload<T extends YogaSessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<YogaSessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof YogaSessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], YogaSessionGroupByOutputType[P]>
            : GetScalarType<T[P], YogaSessionGroupByOutputType[P]>
        }
      >
    >


  export type YogaSessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    style?: boolean
    duration?: boolean
    level?: boolean
    instructor?: boolean
    benefits?: boolean
    videoUrl?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    rating?: boolean
    ratingCount?: boolean
    favoriteBy?: boolean | YogaSession$favoriteByArgs<ExtArgs>
    scheduledEvents?: boolean | YogaSession$scheduledEventsArgs<ExtArgs>
    _count?: boolean | YogaSessionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["yogaSession"]>

  export type YogaSessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    style?: boolean
    duration?: boolean
    level?: boolean
    instructor?: boolean
    benefits?: boolean
    videoUrl?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    rating?: boolean
    ratingCount?: boolean
  }, ExtArgs["result"]["yogaSession"]>

  export type YogaSessionSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    style?: boolean
    duration?: boolean
    level?: boolean
    instructor?: boolean
    benefits?: boolean
    videoUrl?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    rating?: boolean
    ratingCount?: boolean
  }

  export type YogaSessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    favoriteBy?: boolean | YogaSession$favoriteByArgs<ExtArgs>
    scheduledEvents?: boolean | YogaSession$scheduledEventsArgs<ExtArgs>
    _count?: boolean | YogaSessionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type YogaSessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $YogaSessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "YogaSession"
    objects: {
      favoriteBy: Prisma.$FavoriteYogaSessionPayload<ExtArgs>[]
      scheduledEvents: Prisma.$ScheduledEventPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      description: string
      style: string
      duration: number
      level: string
      instructor: string
      benefits: string[]
      videoUrl: string
      imageUrl: string | null
      createdAt: Date
      updatedAt: Date
      rating: number
      ratingCount: number
    }, ExtArgs["result"]["yogaSession"]>
    composites: {}
  }

  type YogaSessionGetPayload<S extends boolean | null | undefined | YogaSessionDefaultArgs> = $Result.GetResult<Prisma.$YogaSessionPayload, S>

  type YogaSessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<YogaSessionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: YogaSessionCountAggregateInputType | true
    }

  export interface YogaSessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['YogaSession'], meta: { name: 'YogaSession' } }
    /**
     * Find zero or one YogaSession that matches the filter.
     * @param {YogaSessionFindUniqueArgs} args - Arguments to find a YogaSession
     * @example
     * // Get one YogaSession
     * const yogaSession = await prisma.yogaSession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends YogaSessionFindUniqueArgs>(args: SelectSubset<T, YogaSessionFindUniqueArgs<ExtArgs>>): Prisma__YogaSessionClient<$Result.GetResult<Prisma.$YogaSessionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one YogaSession that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {YogaSessionFindUniqueOrThrowArgs} args - Arguments to find a YogaSession
     * @example
     * // Get one YogaSession
     * const yogaSession = await prisma.yogaSession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends YogaSessionFindUniqueOrThrowArgs>(args: SelectSubset<T, YogaSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__YogaSessionClient<$Result.GetResult<Prisma.$YogaSessionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first YogaSession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YogaSessionFindFirstArgs} args - Arguments to find a YogaSession
     * @example
     * // Get one YogaSession
     * const yogaSession = await prisma.yogaSession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends YogaSessionFindFirstArgs>(args?: SelectSubset<T, YogaSessionFindFirstArgs<ExtArgs>>): Prisma__YogaSessionClient<$Result.GetResult<Prisma.$YogaSessionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first YogaSession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YogaSessionFindFirstOrThrowArgs} args - Arguments to find a YogaSession
     * @example
     * // Get one YogaSession
     * const yogaSession = await prisma.yogaSession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends YogaSessionFindFirstOrThrowArgs>(args?: SelectSubset<T, YogaSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__YogaSessionClient<$Result.GetResult<Prisma.$YogaSessionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more YogaSessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YogaSessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all YogaSessions
     * const yogaSessions = await prisma.yogaSession.findMany()
     * 
     * // Get first 10 YogaSessions
     * const yogaSessions = await prisma.yogaSession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const yogaSessionWithIdOnly = await prisma.yogaSession.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends YogaSessionFindManyArgs>(args?: SelectSubset<T, YogaSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$YogaSessionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a YogaSession.
     * @param {YogaSessionCreateArgs} args - Arguments to create a YogaSession.
     * @example
     * // Create one YogaSession
     * const YogaSession = await prisma.yogaSession.create({
     *   data: {
     *     // ... data to create a YogaSession
     *   }
     * })
     * 
     */
    create<T extends YogaSessionCreateArgs>(args: SelectSubset<T, YogaSessionCreateArgs<ExtArgs>>): Prisma__YogaSessionClient<$Result.GetResult<Prisma.$YogaSessionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many YogaSessions.
     * @param {YogaSessionCreateManyArgs} args - Arguments to create many YogaSessions.
     * @example
     * // Create many YogaSessions
     * const yogaSession = await prisma.yogaSession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends YogaSessionCreateManyArgs>(args?: SelectSubset<T, YogaSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many YogaSessions and returns the data saved in the database.
     * @param {YogaSessionCreateManyAndReturnArgs} args - Arguments to create many YogaSessions.
     * @example
     * // Create many YogaSessions
     * const yogaSession = await prisma.yogaSession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many YogaSessions and only return the `id`
     * const yogaSessionWithIdOnly = await prisma.yogaSession.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends YogaSessionCreateManyAndReturnArgs>(args?: SelectSubset<T, YogaSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$YogaSessionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a YogaSession.
     * @param {YogaSessionDeleteArgs} args - Arguments to delete one YogaSession.
     * @example
     * // Delete one YogaSession
     * const YogaSession = await prisma.yogaSession.delete({
     *   where: {
     *     // ... filter to delete one YogaSession
     *   }
     * })
     * 
     */
    delete<T extends YogaSessionDeleteArgs>(args: SelectSubset<T, YogaSessionDeleteArgs<ExtArgs>>): Prisma__YogaSessionClient<$Result.GetResult<Prisma.$YogaSessionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one YogaSession.
     * @param {YogaSessionUpdateArgs} args - Arguments to update one YogaSession.
     * @example
     * // Update one YogaSession
     * const yogaSession = await prisma.yogaSession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends YogaSessionUpdateArgs>(args: SelectSubset<T, YogaSessionUpdateArgs<ExtArgs>>): Prisma__YogaSessionClient<$Result.GetResult<Prisma.$YogaSessionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more YogaSessions.
     * @param {YogaSessionDeleteManyArgs} args - Arguments to filter YogaSessions to delete.
     * @example
     * // Delete a few YogaSessions
     * const { count } = await prisma.yogaSession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends YogaSessionDeleteManyArgs>(args?: SelectSubset<T, YogaSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more YogaSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YogaSessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many YogaSessions
     * const yogaSession = await prisma.yogaSession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends YogaSessionUpdateManyArgs>(args: SelectSubset<T, YogaSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one YogaSession.
     * @param {YogaSessionUpsertArgs} args - Arguments to update or create a YogaSession.
     * @example
     * // Update or create a YogaSession
     * const yogaSession = await prisma.yogaSession.upsert({
     *   create: {
     *     // ... data to create a YogaSession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the YogaSession we want to update
     *   }
     * })
     */
    upsert<T extends YogaSessionUpsertArgs>(args: SelectSubset<T, YogaSessionUpsertArgs<ExtArgs>>): Prisma__YogaSessionClient<$Result.GetResult<Prisma.$YogaSessionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of YogaSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YogaSessionCountArgs} args - Arguments to filter YogaSessions to count.
     * @example
     * // Count the number of YogaSessions
     * const count = await prisma.yogaSession.count({
     *   where: {
     *     // ... the filter for the YogaSessions we want to count
     *   }
     * })
    **/
    count<T extends YogaSessionCountArgs>(
      args?: Subset<T, YogaSessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], YogaSessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a YogaSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YogaSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends YogaSessionAggregateArgs>(args: Subset<T, YogaSessionAggregateArgs>): Prisma.PrismaPromise<GetYogaSessionAggregateType<T>>

    /**
     * Group by YogaSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YogaSessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends YogaSessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: YogaSessionGroupByArgs['orderBy'] }
        : { orderBy?: YogaSessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, YogaSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetYogaSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the YogaSession model
   */
  readonly fields: YogaSessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for YogaSession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__YogaSessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    favoriteBy<T extends YogaSession$favoriteByArgs<ExtArgs> = {}>(args?: Subset<T, YogaSession$favoriteByArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoriteYogaSessionPayload<ExtArgs>, T, "findMany"> | Null>
    scheduledEvents<T extends YogaSession$scheduledEventsArgs<ExtArgs> = {}>(args?: Subset<T, YogaSession$scheduledEventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScheduledEventPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the YogaSession model
   */ 
  interface YogaSessionFieldRefs {
    readonly id: FieldRef<"YogaSession", 'Int'>
    readonly title: FieldRef<"YogaSession", 'String'>
    readonly description: FieldRef<"YogaSession", 'String'>
    readonly style: FieldRef<"YogaSession", 'String'>
    readonly duration: FieldRef<"YogaSession", 'Int'>
    readonly level: FieldRef<"YogaSession", 'String'>
    readonly instructor: FieldRef<"YogaSession", 'String'>
    readonly benefits: FieldRef<"YogaSession", 'String[]'>
    readonly videoUrl: FieldRef<"YogaSession", 'String'>
    readonly imageUrl: FieldRef<"YogaSession", 'String'>
    readonly createdAt: FieldRef<"YogaSession", 'DateTime'>
    readonly updatedAt: FieldRef<"YogaSession", 'DateTime'>
    readonly rating: FieldRef<"YogaSession", 'Float'>
    readonly ratingCount: FieldRef<"YogaSession", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * YogaSession findUnique
   */
  export type YogaSessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YogaSession
     */
    select?: YogaSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YogaSessionInclude<ExtArgs> | null
    /**
     * Filter, which YogaSession to fetch.
     */
    where: YogaSessionWhereUniqueInput
  }

  /**
   * YogaSession findUniqueOrThrow
   */
  export type YogaSessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YogaSession
     */
    select?: YogaSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YogaSessionInclude<ExtArgs> | null
    /**
     * Filter, which YogaSession to fetch.
     */
    where: YogaSessionWhereUniqueInput
  }

  /**
   * YogaSession findFirst
   */
  export type YogaSessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YogaSession
     */
    select?: YogaSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YogaSessionInclude<ExtArgs> | null
    /**
     * Filter, which YogaSession to fetch.
     */
    where?: YogaSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YogaSessions to fetch.
     */
    orderBy?: YogaSessionOrderByWithRelationInput | YogaSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for YogaSessions.
     */
    cursor?: YogaSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YogaSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YogaSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of YogaSessions.
     */
    distinct?: YogaSessionScalarFieldEnum | YogaSessionScalarFieldEnum[]
  }

  /**
   * YogaSession findFirstOrThrow
   */
  export type YogaSessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YogaSession
     */
    select?: YogaSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YogaSessionInclude<ExtArgs> | null
    /**
     * Filter, which YogaSession to fetch.
     */
    where?: YogaSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YogaSessions to fetch.
     */
    orderBy?: YogaSessionOrderByWithRelationInput | YogaSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for YogaSessions.
     */
    cursor?: YogaSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YogaSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YogaSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of YogaSessions.
     */
    distinct?: YogaSessionScalarFieldEnum | YogaSessionScalarFieldEnum[]
  }

  /**
   * YogaSession findMany
   */
  export type YogaSessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YogaSession
     */
    select?: YogaSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YogaSessionInclude<ExtArgs> | null
    /**
     * Filter, which YogaSessions to fetch.
     */
    where?: YogaSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YogaSessions to fetch.
     */
    orderBy?: YogaSessionOrderByWithRelationInput | YogaSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing YogaSessions.
     */
    cursor?: YogaSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YogaSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YogaSessions.
     */
    skip?: number
    distinct?: YogaSessionScalarFieldEnum | YogaSessionScalarFieldEnum[]
  }

  /**
   * YogaSession create
   */
  export type YogaSessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YogaSession
     */
    select?: YogaSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YogaSessionInclude<ExtArgs> | null
    /**
     * The data needed to create a YogaSession.
     */
    data: XOR<YogaSessionCreateInput, YogaSessionUncheckedCreateInput>
  }

  /**
   * YogaSession createMany
   */
  export type YogaSessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many YogaSessions.
     */
    data: YogaSessionCreateManyInput | YogaSessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * YogaSession createManyAndReturn
   */
  export type YogaSessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YogaSession
     */
    select?: YogaSessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many YogaSessions.
     */
    data: YogaSessionCreateManyInput | YogaSessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * YogaSession update
   */
  export type YogaSessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YogaSession
     */
    select?: YogaSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YogaSessionInclude<ExtArgs> | null
    /**
     * The data needed to update a YogaSession.
     */
    data: XOR<YogaSessionUpdateInput, YogaSessionUncheckedUpdateInput>
    /**
     * Choose, which YogaSession to update.
     */
    where: YogaSessionWhereUniqueInput
  }

  /**
   * YogaSession updateMany
   */
  export type YogaSessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update YogaSessions.
     */
    data: XOR<YogaSessionUpdateManyMutationInput, YogaSessionUncheckedUpdateManyInput>
    /**
     * Filter which YogaSessions to update
     */
    where?: YogaSessionWhereInput
  }

  /**
   * YogaSession upsert
   */
  export type YogaSessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YogaSession
     */
    select?: YogaSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YogaSessionInclude<ExtArgs> | null
    /**
     * The filter to search for the YogaSession to update in case it exists.
     */
    where: YogaSessionWhereUniqueInput
    /**
     * In case the YogaSession found by the `where` argument doesn't exist, create a new YogaSession with this data.
     */
    create: XOR<YogaSessionCreateInput, YogaSessionUncheckedCreateInput>
    /**
     * In case the YogaSession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<YogaSessionUpdateInput, YogaSessionUncheckedUpdateInput>
  }

  /**
   * YogaSession delete
   */
  export type YogaSessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YogaSession
     */
    select?: YogaSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YogaSessionInclude<ExtArgs> | null
    /**
     * Filter which YogaSession to delete.
     */
    where: YogaSessionWhereUniqueInput
  }

  /**
   * YogaSession deleteMany
   */
  export type YogaSessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which YogaSessions to delete
     */
    where?: YogaSessionWhereInput
  }

  /**
   * YogaSession.favoriteBy
   */
  export type YogaSession$favoriteByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteYogaSession
     */
    select?: FavoriteYogaSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteYogaSessionInclude<ExtArgs> | null
    where?: FavoriteYogaSessionWhereInput
    orderBy?: FavoriteYogaSessionOrderByWithRelationInput | FavoriteYogaSessionOrderByWithRelationInput[]
    cursor?: FavoriteYogaSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FavoriteYogaSessionScalarFieldEnum | FavoriteYogaSessionScalarFieldEnum[]
  }

  /**
   * YogaSession.scheduledEvents
   */
  export type YogaSession$scheduledEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduledEvent
     */
    select?: ScheduledEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduledEventInclude<ExtArgs> | null
    where?: ScheduledEventWhereInput
    orderBy?: ScheduledEventOrderByWithRelationInput | ScheduledEventOrderByWithRelationInput[]
    cursor?: ScheduledEventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScheduledEventScalarFieldEnum | ScheduledEventScalarFieldEnum[]
  }

  /**
   * YogaSession without action
   */
  export type YogaSessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YogaSession
     */
    select?: YogaSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YogaSessionInclude<ExtArgs> | null
  }


  /**
   * Model Recipe
   */

  export type AggregateRecipe = {
    _count: RecipeCountAggregateOutputType | null
    _avg: RecipeAvgAggregateOutputType | null
    _sum: RecipeSumAggregateOutputType | null
    _min: RecipeMinAggregateOutputType | null
    _max: RecipeMaxAggregateOutputType | null
  }

  export type RecipeAvgAggregateOutputType = {
    id: number | null
    prepTime: number | null
    cookTime: number | null
    servings: number | null
    calories: number | null
    protein: number | null
    carbs: number | null
    fat: number | null
    rating: number | null
    ratingCount: number | null
  }

  export type RecipeSumAggregateOutputType = {
    id: number | null
    prepTime: number | null
    cookTime: number | null
    servings: number | null
    calories: number | null
    protein: number | null
    carbs: number | null
    fat: number | null
    rating: number | null
    ratingCount: number | null
  }

  export type RecipeMinAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    category: string | null
    difficulty: string | null
    prepTime: number | null
    cookTime: number | null
    servings: number | null
    calories: number | null
    protein: number | null
    carbs: number | null
    fat: number | null
    imageUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
    rating: number | null
    ratingCount: number | null
    author: string | null
  }

  export type RecipeMaxAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    category: string | null
    difficulty: string | null
    prepTime: number | null
    cookTime: number | null
    servings: number | null
    calories: number | null
    protein: number | null
    carbs: number | null
    fat: number | null
    imageUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
    rating: number | null
    ratingCount: number | null
    author: string | null
  }

  export type RecipeCountAggregateOutputType = {
    id: number
    title: number
    description: number
    category: number
    difficulty: number
    prepTime: number
    cookTime: number
    servings: number
    calories: number
    protein: number
    carbs: number
    fat: number
    tags: number
    imageUrl: number
    createdAt: number
    updatedAt: number
    rating: number
    ratingCount: number
    author: number
    _all: number
  }


  export type RecipeAvgAggregateInputType = {
    id?: true
    prepTime?: true
    cookTime?: true
    servings?: true
    calories?: true
    protein?: true
    carbs?: true
    fat?: true
    rating?: true
    ratingCount?: true
  }

  export type RecipeSumAggregateInputType = {
    id?: true
    prepTime?: true
    cookTime?: true
    servings?: true
    calories?: true
    protein?: true
    carbs?: true
    fat?: true
    rating?: true
    ratingCount?: true
  }

  export type RecipeMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    category?: true
    difficulty?: true
    prepTime?: true
    cookTime?: true
    servings?: true
    calories?: true
    protein?: true
    carbs?: true
    fat?: true
    imageUrl?: true
    createdAt?: true
    updatedAt?: true
    rating?: true
    ratingCount?: true
    author?: true
  }

  export type RecipeMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    category?: true
    difficulty?: true
    prepTime?: true
    cookTime?: true
    servings?: true
    calories?: true
    protein?: true
    carbs?: true
    fat?: true
    imageUrl?: true
    createdAt?: true
    updatedAt?: true
    rating?: true
    ratingCount?: true
    author?: true
  }

  export type RecipeCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    category?: true
    difficulty?: true
    prepTime?: true
    cookTime?: true
    servings?: true
    calories?: true
    protein?: true
    carbs?: true
    fat?: true
    tags?: true
    imageUrl?: true
    createdAt?: true
    updatedAt?: true
    rating?: true
    ratingCount?: true
    author?: true
    _all?: true
  }

  export type RecipeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Recipe to aggregate.
     */
    where?: RecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recipes to fetch.
     */
    orderBy?: RecipeOrderByWithRelationInput | RecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Recipes
    **/
    _count?: true | RecipeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RecipeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RecipeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RecipeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RecipeMaxAggregateInputType
  }

  export type GetRecipeAggregateType<T extends RecipeAggregateArgs> = {
        [P in keyof T & keyof AggregateRecipe]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecipe[P]>
      : GetScalarType<T[P], AggregateRecipe[P]>
  }




  export type RecipeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecipeWhereInput
    orderBy?: RecipeOrderByWithAggregationInput | RecipeOrderByWithAggregationInput[]
    by: RecipeScalarFieldEnum[] | RecipeScalarFieldEnum
    having?: RecipeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RecipeCountAggregateInputType | true
    _avg?: RecipeAvgAggregateInputType
    _sum?: RecipeSumAggregateInputType
    _min?: RecipeMinAggregateInputType
    _max?: RecipeMaxAggregateInputType
  }

  export type RecipeGroupByOutputType = {
    id: number
    title: string
    description: string
    category: string
    difficulty: string
    prepTime: number
    cookTime: number
    servings: number
    calories: number
    protein: number | null
    carbs: number | null
    fat: number | null
    tags: string[]
    imageUrl: string | null
    createdAt: Date
    updatedAt: Date
    rating: number
    ratingCount: number
    author: string | null
    _count: RecipeCountAggregateOutputType | null
    _avg: RecipeAvgAggregateOutputType | null
    _sum: RecipeSumAggregateOutputType | null
    _min: RecipeMinAggregateOutputType | null
    _max: RecipeMaxAggregateOutputType | null
  }

  type GetRecipeGroupByPayload<T extends RecipeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RecipeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RecipeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RecipeGroupByOutputType[P]>
            : GetScalarType<T[P], RecipeGroupByOutputType[P]>
        }
      >
    >


  export type RecipeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    category?: boolean
    difficulty?: boolean
    prepTime?: boolean
    cookTime?: boolean
    servings?: boolean
    calories?: boolean
    protein?: boolean
    carbs?: boolean
    fat?: boolean
    tags?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    rating?: boolean
    ratingCount?: boolean
    author?: boolean
    ingredients?: boolean | Recipe$ingredientsArgs<ExtArgs>
    instructions?: boolean | Recipe$instructionsArgs<ExtArgs>
    favoriteBy?: boolean | Recipe$favoriteByArgs<ExtArgs>
    _count?: boolean | RecipeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["recipe"]>

  export type RecipeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    category?: boolean
    difficulty?: boolean
    prepTime?: boolean
    cookTime?: boolean
    servings?: boolean
    calories?: boolean
    protein?: boolean
    carbs?: boolean
    fat?: boolean
    tags?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    rating?: boolean
    ratingCount?: boolean
    author?: boolean
  }, ExtArgs["result"]["recipe"]>

  export type RecipeSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    category?: boolean
    difficulty?: boolean
    prepTime?: boolean
    cookTime?: boolean
    servings?: boolean
    calories?: boolean
    protein?: boolean
    carbs?: boolean
    fat?: boolean
    tags?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    rating?: boolean
    ratingCount?: boolean
    author?: boolean
  }

  export type RecipeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ingredients?: boolean | Recipe$ingredientsArgs<ExtArgs>
    instructions?: boolean | Recipe$instructionsArgs<ExtArgs>
    favoriteBy?: boolean | Recipe$favoriteByArgs<ExtArgs>
    _count?: boolean | RecipeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RecipeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $RecipePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Recipe"
    objects: {
      ingredients: Prisma.$RecipeIngredientPayload<ExtArgs>[]
      instructions: Prisma.$RecipeInstructionPayload<ExtArgs>[]
      favoriteBy: Prisma.$FavoriteRecipePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      description: string
      category: string
      difficulty: string
      prepTime: number
      cookTime: number
      servings: number
      calories: number
      protein: number | null
      carbs: number | null
      fat: number | null
      tags: string[]
      imageUrl: string | null
      createdAt: Date
      updatedAt: Date
      rating: number
      ratingCount: number
      author: string | null
    }, ExtArgs["result"]["recipe"]>
    composites: {}
  }

  type RecipeGetPayload<S extends boolean | null | undefined | RecipeDefaultArgs> = $Result.GetResult<Prisma.$RecipePayload, S>

  type RecipeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RecipeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RecipeCountAggregateInputType | true
    }

  export interface RecipeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Recipe'], meta: { name: 'Recipe' } }
    /**
     * Find zero or one Recipe that matches the filter.
     * @param {RecipeFindUniqueArgs} args - Arguments to find a Recipe
     * @example
     * // Get one Recipe
     * const recipe = await prisma.recipe.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RecipeFindUniqueArgs>(args: SelectSubset<T, RecipeFindUniqueArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Recipe that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RecipeFindUniqueOrThrowArgs} args - Arguments to find a Recipe
     * @example
     * // Get one Recipe
     * const recipe = await prisma.recipe.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RecipeFindUniqueOrThrowArgs>(args: SelectSubset<T, RecipeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Recipe that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeFindFirstArgs} args - Arguments to find a Recipe
     * @example
     * // Get one Recipe
     * const recipe = await prisma.recipe.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RecipeFindFirstArgs>(args?: SelectSubset<T, RecipeFindFirstArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Recipe that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeFindFirstOrThrowArgs} args - Arguments to find a Recipe
     * @example
     * // Get one Recipe
     * const recipe = await prisma.recipe.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RecipeFindFirstOrThrowArgs>(args?: SelectSubset<T, RecipeFindFirstOrThrowArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Recipes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Recipes
     * const recipes = await prisma.recipe.findMany()
     * 
     * // Get first 10 Recipes
     * const recipes = await prisma.recipe.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const recipeWithIdOnly = await prisma.recipe.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RecipeFindManyArgs>(args?: SelectSubset<T, RecipeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Recipe.
     * @param {RecipeCreateArgs} args - Arguments to create a Recipe.
     * @example
     * // Create one Recipe
     * const Recipe = await prisma.recipe.create({
     *   data: {
     *     // ... data to create a Recipe
     *   }
     * })
     * 
     */
    create<T extends RecipeCreateArgs>(args: SelectSubset<T, RecipeCreateArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Recipes.
     * @param {RecipeCreateManyArgs} args - Arguments to create many Recipes.
     * @example
     * // Create many Recipes
     * const recipe = await prisma.recipe.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RecipeCreateManyArgs>(args?: SelectSubset<T, RecipeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Recipes and returns the data saved in the database.
     * @param {RecipeCreateManyAndReturnArgs} args - Arguments to create many Recipes.
     * @example
     * // Create many Recipes
     * const recipe = await prisma.recipe.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Recipes and only return the `id`
     * const recipeWithIdOnly = await prisma.recipe.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RecipeCreateManyAndReturnArgs>(args?: SelectSubset<T, RecipeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Recipe.
     * @param {RecipeDeleteArgs} args - Arguments to delete one Recipe.
     * @example
     * // Delete one Recipe
     * const Recipe = await prisma.recipe.delete({
     *   where: {
     *     // ... filter to delete one Recipe
     *   }
     * })
     * 
     */
    delete<T extends RecipeDeleteArgs>(args: SelectSubset<T, RecipeDeleteArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Recipe.
     * @param {RecipeUpdateArgs} args - Arguments to update one Recipe.
     * @example
     * // Update one Recipe
     * const recipe = await prisma.recipe.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RecipeUpdateArgs>(args: SelectSubset<T, RecipeUpdateArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Recipes.
     * @param {RecipeDeleteManyArgs} args - Arguments to filter Recipes to delete.
     * @example
     * // Delete a few Recipes
     * const { count } = await prisma.recipe.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RecipeDeleteManyArgs>(args?: SelectSubset<T, RecipeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Recipes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Recipes
     * const recipe = await prisma.recipe.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RecipeUpdateManyArgs>(args: SelectSubset<T, RecipeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Recipe.
     * @param {RecipeUpsertArgs} args - Arguments to update or create a Recipe.
     * @example
     * // Update or create a Recipe
     * const recipe = await prisma.recipe.upsert({
     *   create: {
     *     // ... data to create a Recipe
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Recipe we want to update
     *   }
     * })
     */
    upsert<T extends RecipeUpsertArgs>(args: SelectSubset<T, RecipeUpsertArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Recipes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeCountArgs} args - Arguments to filter Recipes to count.
     * @example
     * // Count the number of Recipes
     * const count = await prisma.recipe.count({
     *   where: {
     *     // ... the filter for the Recipes we want to count
     *   }
     * })
    **/
    count<T extends RecipeCountArgs>(
      args?: Subset<T, RecipeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RecipeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Recipe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RecipeAggregateArgs>(args: Subset<T, RecipeAggregateArgs>): Prisma.PrismaPromise<GetRecipeAggregateType<T>>

    /**
     * Group by Recipe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RecipeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RecipeGroupByArgs['orderBy'] }
        : { orderBy?: RecipeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RecipeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecipeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Recipe model
   */
  readonly fields: RecipeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Recipe.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RecipeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ingredients<T extends Recipe$ingredientsArgs<ExtArgs> = {}>(args?: Subset<T, Recipe$ingredientsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecipeIngredientPayload<ExtArgs>, T, "findMany"> | Null>
    instructions<T extends Recipe$instructionsArgs<ExtArgs> = {}>(args?: Subset<T, Recipe$instructionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecipeInstructionPayload<ExtArgs>, T, "findMany"> | Null>
    favoriteBy<T extends Recipe$favoriteByArgs<ExtArgs> = {}>(args?: Subset<T, Recipe$favoriteByArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoriteRecipePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Recipe model
   */ 
  interface RecipeFieldRefs {
    readonly id: FieldRef<"Recipe", 'Int'>
    readonly title: FieldRef<"Recipe", 'String'>
    readonly description: FieldRef<"Recipe", 'String'>
    readonly category: FieldRef<"Recipe", 'String'>
    readonly difficulty: FieldRef<"Recipe", 'String'>
    readonly prepTime: FieldRef<"Recipe", 'Int'>
    readonly cookTime: FieldRef<"Recipe", 'Int'>
    readonly servings: FieldRef<"Recipe", 'Int'>
    readonly calories: FieldRef<"Recipe", 'Int'>
    readonly protein: FieldRef<"Recipe", 'Float'>
    readonly carbs: FieldRef<"Recipe", 'Float'>
    readonly fat: FieldRef<"Recipe", 'Float'>
    readonly tags: FieldRef<"Recipe", 'String[]'>
    readonly imageUrl: FieldRef<"Recipe", 'String'>
    readonly createdAt: FieldRef<"Recipe", 'DateTime'>
    readonly updatedAt: FieldRef<"Recipe", 'DateTime'>
    readonly rating: FieldRef<"Recipe", 'Float'>
    readonly ratingCount: FieldRef<"Recipe", 'Int'>
    readonly author: FieldRef<"Recipe", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Recipe findUnique
   */
  export type RecipeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * Filter, which Recipe to fetch.
     */
    where: RecipeWhereUniqueInput
  }

  /**
   * Recipe findUniqueOrThrow
   */
  export type RecipeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * Filter, which Recipe to fetch.
     */
    where: RecipeWhereUniqueInput
  }

  /**
   * Recipe findFirst
   */
  export type RecipeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * Filter, which Recipe to fetch.
     */
    where?: RecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recipes to fetch.
     */
    orderBy?: RecipeOrderByWithRelationInput | RecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recipes.
     */
    cursor?: RecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Recipes.
     */
    distinct?: RecipeScalarFieldEnum | RecipeScalarFieldEnum[]
  }

  /**
   * Recipe findFirstOrThrow
   */
  export type RecipeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * Filter, which Recipe to fetch.
     */
    where?: RecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recipes to fetch.
     */
    orderBy?: RecipeOrderByWithRelationInput | RecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recipes.
     */
    cursor?: RecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Recipes.
     */
    distinct?: RecipeScalarFieldEnum | RecipeScalarFieldEnum[]
  }

  /**
   * Recipe findMany
   */
  export type RecipeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * Filter, which Recipes to fetch.
     */
    where?: RecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recipes to fetch.
     */
    orderBy?: RecipeOrderByWithRelationInput | RecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Recipes.
     */
    cursor?: RecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recipes.
     */
    skip?: number
    distinct?: RecipeScalarFieldEnum | RecipeScalarFieldEnum[]
  }

  /**
   * Recipe create
   */
  export type RecipeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * The data needed to create a Recipe.
     */
    data: XOR<RecipeCreateInput, RecipeUncheckedCreateInput>
  }

  /**
   * Recipe createMany
   */
  export type RecipeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Recipes.
     */
    data: RecipeCreateManyInput | RecipeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Recipe createManyAndReturn
   */
  export type RecipeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Recipes.
     */
    data: RecipeCreateManyInput | RecipeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Recipe update
   */
  export type RecipeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * The data needed to update a Recipe.
     */
    data: XOR<RecipeUpdateInput, RecipeUncheckedUpdateInput>
    /**
     * Choose, which Recipe to update.
     */
    where: RecipeWhereUniqueInput
  }

  /**
   * Recipe updateMany
   */
  export type RecipeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Recipes.
     */
    data: XOR<RecipeUpdateManyMutationInput, RecipeUncheckedUpdateManyInput>
    /**
     * Filter which Recipes to update
     */
    where?: RecipeWhereInput
  }

  /**
   * Recipe upsert
   */
  export type RecipeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * The filter to search for the Recipe to update in case it exists.
     */
    where: RecipeWhereUniqueInput
    /**
     * In case the Recipe found by the `where` argument doesn't exist, create a new Recipe with this data.
     */
    create: XOR<RecipeCreateInput, RecipeUncheckedCreateInput>
    /**
     * In case the Recipe was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RecipeUpdateInput, RecipeUncheckedUpdateInput>
  }

  /**
   * Recipe delete
   */
  export type RecipeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * Filter which Recipe to delete.
     */
    where: RecipeWhereUniqueInput
  }

  /**
   * Recipe deleteMany
   */
  export type RecipeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Recipes to delete
     */
    where?: RecipeWhereInput
  }

  /**
   * Recipe.ingredients
   */
  export type Recipe$ingredientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeIngredient
     */
    select?: RecipeIngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeIngredientInclude<ExtArgs> | null
    where?: RecipeIngredientWhereInput
    orderBy?: RecipeIngredientOrderByWithRelationInput | RecipeIngredientOrderByWithRelationInput[]
    cursor?: RecipeIngredientWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RecipeIngredientScalarFieldEnum | RecipeIngredientScalarFieldEnum[]
  }

  /**
   * Recipe.instructions
   */
  export type Recipe$instructionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeInstruction
     */
    select?: RecipeInstructionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInstructionInclude<ExtArgs> | null
    where?: RecipeInstructionWhereInput
    orderBy?: RecipeInstructionOrderByWithRelationInput | RecipeInstructionOrderByWithRelationInput[]
    cursor?: RecipeInstructionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RecipeInstructionScalarFieldEnum | RecipeInstructionScalarFieldEnum[]
  }

  /**
   * Recipe.favoriteBy
   */
  export type Recipe$favoriteByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteRecipe
     */
    select?: FavoriteRecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteRecipeInclude<ExtArgs> | null
    where?: FavoriteRecipeWhereInput
    orderBy?: FavoriteRecipeOrderByWithRelationInput | FavoriteRecipeOrderByWithRelationInput[]
    cursor?: FavoriteRecipeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FavoriteRecipeScalarFieldEnum | FavoriteRecipeScalarFieldEnum[]
  }

  /**
   * Recipe without action
   */
  export type RecipeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
  }


  /**
   * Model Ingredient
   */

  export type AggregateIngredient = {
    _count: IngredientCountAggregateOutputType | null
    _avg: IngredientAvgAggregateOutputType | null
    _sum: IngredientSumAggregateOutputType | null
    _min: IngredientMinAggregateOutputType | null
    _max: IngredientMaxAggregateOutputType | null
  }

  export type IngredientAvgAggregateOutputType = {
    id: number | null
    calories: number | null
    protein: number | null
    carbs: number | null
    fat: number | null
  }

  export type IngredientSumAggregateOutputType = {
    id: number | null
    calories: number | null
    protein: number | null
    carbs: number | null
    fat: number | null
  }

  export type IngredientMinAggregateOutputType = {
    id: number | null
    name: string | null
    calories: number | null
    protein: number | null
    carbs: number | null
    fat: number | null
  }

  export type IngredientMaxAggregateOutputType = {
    id: number | null
    name: string | null
    calories: number | null
    protein: number | null
    carbs: number | null
    fat: number | null
  }

  export type IngredientCountAggregateOutputType = {
    id: number
    name: number
    calories: number
    protein: number
    carbs: number
    fat: number
    _all: number
  }


  export type IngredientAvgAggregateInputType = {
    id?: true
    calories?: true
    protein?: true
    carbs?: true
    fat?: true
  }

  export type IngredientSumAggregateInputType = {
    id?: true
    calories?: true
    protein?: true
    carbs?: true
    fat?: true
  }

  export type IngredientMinAggregateInputType = {
    id?: true
    name?: true
    calories?: true
    protein?: true
    carbs?: true
    fat?: true
  }

  export type IngredientMaxAggregateInputType = {
    id?: true
    name?: true
    calories?: true
    protein?: true
    carbs?: true
    fat?: true
  }

  export type IngredientCountAggregateInputType = {
    id?: true
    name?: true
    calories?: true
    protein?: true
    carbs?: true
    fat?: true
    _all?: true
  }

  export type IngredientAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ingredient to aggregate.
     */
    where?: IngredientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ingredients to fetch.
     */
    orderBy?: IngredientOrderByWithRelationInput | IngredientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: IngredientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ingredients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ingredients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Ingredients
    **/
    _count?: true | IngredientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: IngredientAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: IngredientSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IngredientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IngredientMaxAggregateInputType
  }

  export type GetIngredientAggregateType<T extends IngredientAggregateArgs> = {
        [P in keyof T & keyof AggregateIngredient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIngredient[P]>
      : GetScalarType<T[P], AggregateIngredient[P]>
  }




  export type IngredientGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IngredientWhereInput
    orderBy?: IngredientOrderByWithAggregationInput | IngredientOrderByWithAggregationInput[]
    by: IngredientScalarFieldEnum[] | IngredientScalarFieldEnum
    having?: IngredientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IngredientCountAggregateInputType | true
    _avg?: IngredientAvgAggregateInputType
    _sum?: IngredientSumAggregateInputType
    _min?: IngredientMinAggregateInputType
    _max?: IngredientMaxAggregateInputType
  }

  export type IngredientGroupByOutputType = {
    id: number
    name: string
    calories: number | null
    protein: number | null
    carbs: number | null
    fat: number | null
    _count: IngredientCountAggregateOutputType | null
    _avg: IngredientAvgAggregateOutputType | null
    _sum: IngredientSumAggregateOutputType | null
    _min: IngredientMinAggregateOutputType | null
    _max: IngredientMaxAggregateOutputType | null
  }

  type GetIngredientGroupByPayload<T extends IngredientGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<IngredientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof IngredientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], IngredientGroupByOutputType[P]>
            : GetScalarType<T[P], IngredientGroupByOutputType[P]>
        }
      >
    >


  export type IngredientSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    calories?: boolean
    protein?: boolean
    carbs?: boolean
    fat?: boolean
    recipes?: boolean | Ingredient$recipesArgs<ExtArgs>
    _count?: boolean | IngredientCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ingredient"]>

  export type IngredientSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    calories?: boolean
    protein?: boolean
    carbs?: boolean
    fat?: boolean
  }, ExtArgs["result"]["ingredient"]>

  export type IngredientSelectScalar = {
    id?: boolean
    name?: boolean
    calories?: boolean
    protein?: boolean
    carbs?: boolean
    fat?: boolean
  }

  export type IngredientInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recipes?: boolean | Ingredient$recipesArgs<ExtArgs>
    _count?: boolean | IngredientCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type IngredientIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $IngredientPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Ingredient"
    objects: {
      recipes: Prisma.$RecipeIngredientPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      calories: number | null
      protein: number | null
      carbs: number | null
      fat: number | null
    }, ExtArgs["result"]["ingredient"]>
    composites: {}
  }

  type IngredientGetPayload<S extends boolean | null | undefined | IngredientDefaultArgs> = $Result.GetResult<Prisma.$IngredientPayload, S>

  type IngredientCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<IngredientFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: IngredientCountAggregateInputType | true
    }

  export interface IngredientDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Ingredient'], meta: { name: 'Ingredient' } }
    /**
     * Find zero or one Ingredient that matches the filter.
     * @param {IngredientFindUniqueArgs} args - Arguments to find a Ingredient
     * @example
     * // Get one Ingredient
     * const ingredient = await prisma.ingredient.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends IngredientFindUniqueArgs>(args: SelectSubset<T, IngredientFindUniqueArgs<ExtArgs>>): Prisma__IngredientClient<$Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Ingredient that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {IngredientFindUniqueOrThrowArgs} args - Arguments to find a Ingredient
     * @example
     * // Get one Ingredient
     * const ingredient = await prisma.ingredient.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends IngredientFindUniqueOrThrowArgs>(args: SelectSubset<T, IngredientFindUniqueOrThrowArgs<ExtArgs>>): Prisma__IngredientClient<$Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Ingredient that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientFindFirstArgs} args - Arguments to find a Ingredient
     * @example
     * // Get one Ingredient
     * const ingredient = await prisma.ingredient.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends IngredientFindFirstArgs>(args?: SelectSubset<T, IngredientFindFirstArgs<ExtArgs>>): Prisma__IngredientClient<$Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Ingredient that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientFindFirstOrThrowArgs} args - Arguments to find a Ingredient
     * @example
     * // Get one Ingredient
     * const ingredient = await prisma.ingredient.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends IngredientFindFirstOrThrowArgs>(args?: SelectSubset<T, IngredientFindFirstOrThrowArgs<ExtArgs>>): Prisma__IngredientClient<$Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Ingredients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ingredients
     * const ingredients = await prisma.ingredient.findMany()
     * 
     * // Get first 10 Ingredients
     * const ingredients = await prisma.ingredient.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ingredientWithIdOnly = await prisma.ingredient.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends IngredientFindManyArgs>(args?: SelectSubset<T, IngredientFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Ingredient.
     * @param {IngredientCreateArgs} args - Arguments to create a Ingredient.
     * @example
     * // Create one Ingredient
     * const Ingredient = await prisma.ingredient.create({
     *   data: {
     *     // ... data to create a Ingredient
     *   }
     * })
     * 
     */
    create<T extends IngredientCreateArgs>(args: SelectSubset<T, IngredientCreateArgs<ExtArgs>>): Prisma__IngredientClient<$Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Ingredients.
     * @param {IngredientCreateManyArgs} args - Arguments to create many Ingredients.
     * @example
     * // Create many Ingredients
     * const ingredient = await prisma.ingredient.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends IngredientCreateManyArgs>(args?: SelectSubset<T, IngredientCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Ingredients and returns the data saved in the database.
     * @param {IngredientCreateManyAndReturnArgs} args - Arguments to create many Ingredients.
     * @example
     * // Create many Ingredients
     * const ingredient = await prisma.ingredient.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Ingredients and only return the `id`
     * const ingredientWithIdOnly = await prisma.ingredient.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends IngredientCreateManyAndReturnArgs>(args?: SelectSubset<T, IngredientCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Ingredient.
     * @param {IngredientDeleteArgs} args - Arguments to delete one Ingredient.
     * @example
     * // Delete one Ingredient
     * const Ingredient = await prisma.ingredient.delete({
     *   where: {
     *     // ... filter to delete one Ingredient
     *   }
     * })
     * 
     */
    delete<T extends IngredientDeleteArgs>(args: SelectSubset<T, IngredientDeleteArgs<ExtArgs>>): Prisma__IngredientClient<$Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Ingredient.
     * @param {IngredientUpdateArgs} args - Arguments to update one Ingredient.
     * @example
     * // Update one Ingredient
     * const ingredient = await prisma.ingredient.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends IngredientUpdateArgs>(args: SelectSubset<T, IngredientUpdateArgs<ExtArgs>>): Prisma__IngredientClient<$Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Ingredients.
     * @param {IngredientDeleteManyArgs} args - Arguments to filter Ingredients to delete.
     * @example
     * // Delete a few Ingredients
     * const { count } = await prisma.ingredient.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends IngredientDeleteManyArgs>(args?: SelectSubset<T, IngredientDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ingredients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ingredients
     * const ingredient = await prisma.ingredient.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends IngredientUpdateManyArgs>(args: SelectSubset<T, IngredientUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Ingredient.
     * @param {IngredientUpsertArgs} args - Arguments to update or create a Ingredient.
     * @example
     * // Update or create a Ingredient
     * const ingredient = await prisma.ingredient.upsert({
     *   create: {
     *     // ... data to create a Ingredient
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ingredient we want to update
     *   }
     * })
     */
    upsert<T extends IngredientUpsertArgs>(args: SelectSubset<T, IngredientUpsertArgs<ExtArgs>>): Prisma__IngredientClient<$Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Ingredients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientCountArgs} args - Arguments to filter Ingredients to count.
     * @example
     * // Count the number of Ingredients
     * const count = await prisma.ingredient.count({
     *   where: {
     *     // ... the filter for the Ingredients we want to count
     *   }
     * })
    **/
    count<T extends IngredientCountArgs>(
      args?: Subset<T, IngredientCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IngredientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ingredient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IngredientAggregateArgs>(args: Subset<T, IngredientAggregateArgs>): Prisma.PrismaPromise<GetIngredientAggregateType<T>>

    /**
     * Group by Ingredient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends IngredientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: IngredientGroupByArgs['orderBy'] }
        : { orderBy?: IngredientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, IngredientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIngredientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Ingredient model
   */
  readonly fields: IngredientFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Ingredient.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__IngredientClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    recipes<T extends Ingredient$recipesArgs<ExtArgs> = {}>(args?: Subset<T, Ingredient$recipesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecipeIngredientPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Ingredient model
   */ 
  interface IngredientFieldRefs {
    readonly id: FieldRef<"Ingredient", 'Int'>
    readonly name: FieldRef<"Ingredient", 'String'>
    readonly calories: FieldRef<"Ingredient", 'Int'>
    readonly protein: FieldRef<"Ingredient", 'Float'>
    readonly carbs: FieldRef<"Ingredient", 'Float'>
    readonly fat: FieldRef<"Ingredient", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * Ingredient findUnique
   */
  export type IngredientFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredientInclude<ExtArgs> | null
    /**
     * Filter, which Ingredient to fetch.
     */
    where: IngredientWhereUniqueInput
  }

  /**
   * Ingredient findUniqueOrThrow
   */
  export type IngredientFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredientInclude<ExtArgs> | null
    /**
     * Filter, which Ingredient to fetch.
     */
    where: IngredientWhereUniqueInput
  }

  /**
   * Ingredient findFirst
   */
  export type IngredientFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredientInclude<ExtArgs> | null
    /**
     * Filter, which Ingredient to fetch.
     */
    where?: IngredientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ingredients to fetch.
     */
    orderBy?: IngredientOrderByWithRelationInput | IngredientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ingredients.
     */
    cursor?: IngredientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ingredients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ingredients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ingredients.
     */
    distinct?: IngredientScalarFieldEnum | IngredientScalarFieldEnum[]
  }

  /**
   * Ingredient findFirstOrThrow
   */
  export type IngredientFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredientInclude<ExtArgs> | null
    /**
     * Filter, which Ingredient to fetch.
     */
    where?: IngredientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ingredients to fetch.
     */
    orderBy?: IngredientOrderByWithRelationInput | IngredientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ingredients.
     */
    cursor?: IngredientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ingredients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ingredients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ingredients.
     */
    distinct?: IngredientScalarFieldEnum | IngredientScalarFieldEnum[]
  }

  /**
   * Ingredient findMany
   */
  export type IngredientFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredientInclude<ExtArgs> | null
    /**
     * Filter, which Ingredients to fetch.
     */
    where?: IngredientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ingredients to fetch.
     */
    orderBy?: IngredientOrderByWithRelationInput | IngredientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Ingredients.
     */
    cursor?: IngredientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ingredients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ingredients.
     */
    skip?: number
    distinct?: IngredientScalarFieldEnum | IngredientScalarFieldEnum[]
  }

  /**
   * Ingredient create
   */
  export type IngredientCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredientInclude<ExtArgs> | null
    /**
     * The data needed to create a Ingredient.
     */
    data: XOR<IngredientCreateInput, IngredientUncheckedCreateInput>
  }

  /**
   * Ingredient createMany
   */
  export type IngredientCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Ingredients.
     */
    data: IngredientCreateManyInput | IngredientCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Ingredient createManyAndReturn
   */
  export type IngredientCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Ingredients.
     */
    data: IngredientCreateManyInput | IngredientCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Ingredient update
   */
  export type IngredientUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredientInclude<ExtArgs> | null
    /**
     * The data needed to update a Ingredient.
     */
    data: XOR<IngredientUpdateInput, IngredientUncheckedUpdateInput>
    /**
     * Choose, which Ingredient to update.
     */
    where: IngredientWhereUniqueInput
  }

  /**
   * Ingredient updateMany
   */
  export type IngredientUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Ingredients.
     */
    data: XOR<IngredientUpdateManyMutationInput, IngredientUncheckedUpdateManyInput>
    /**
     * Filter which Ingredients to update
     */
    where?: IngredientWhereInput
  }

  /**
   * Ingredient upsert
   */
  export type IngredientUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredientInclude<ExtArgs> | null
    /**
     * The filter to search for the Ingredient to update in case it exists.
     */
    where: IngredientWhereUniqueInput
    /**
     * In case the Ingredient found by the `where` argument doesn't exist, create a new Ingredient with this data.
     */
    create: XOR<IngredientCreateInput, IngredientUncheckedCreateInput>
    /**
     * In case the Ingredient was found with the provided `where` argument, update it with this data.
     */
    update: XOR<IngredientUpdateInput, IngredientUncheckedUpdateInput>
  }

  /**
   * Ingredient delete
   */
  export type IngredientDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredientInclude<ExtArgs> | null
    /**
     * Filter which Ingredient to delete.
     */
    where: IngredientWhereUniqueInput
  }

  /**
   * Ingredient deleteMany
   */
  export type IngredientDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ingredients to delete
     */
    where?: IngredientWhereInput
  }

  /**
   * Ingredient.recipes
   */
  export type Ingredient$recipesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeIngredient
     */
    select?: RecipeIngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeIngredientInclude<ExtArgs> | null
    where?: RecipeIngredientWhereInput
    orderBy?: RecipeIngredientOrderByWithRelationInput | RecipeIngredientOrderByWithRelationInput[]
    cursor?: RecipeIngredientWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RecipeIngredientScalarFieldEnum | RecipeIngredientScalarFieldEnum[]
  }

  /**
   * Ingredient without action
   */
  export type IngredientDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredientInclude<ExtArgs> | null
  }


  /**
   * Model RecipeIngredient
   */

  export type AggregateRecipeIngredient = {
    _count: RecipeIngredientCountAggregateOutputType | null
    _avg: RecipeIngredientAvgAggregateOutputType | null
    _sum: RecipeIngredientSumAggregateOutputType | null
    _min: RecipeIngredientMinAggregateOutputType | null
    _max: RecipeIngredientMaxAggregateOutputType | null
  }

  export type RecipeIngredientAvgAggregateOutputType = {
    id: number | null
    recipeId: number | null
    ingredientId: number | null
  }

  export type RecipeIngredientSumAggregateOutputType = {
    id: number | null
    recipeId: number | null
    ingredientId: number | null
  }

  export type RecipeIngredientMinAggregateOutputType = {
    id: number | null
    recipeId: number | null
    ingredientId: number | null
    quantity: string | null
    unit: string | null
  }

  export type RecipeIngredientMaxAggregateOutputType = {
    id: number | null
    recipeId: number | null
    ingredientId: number | null
    quantity: string | null
    unit: string | null
  }

  export type RecipeIngredientCountAggregateOutputType = {
    id: number
    recipeId: number
    ingredientId: number
    quantity: number
    unit: number
    _all: number
  }


  export type RecipeIngredientAvgAggregateInputType = {
    id?: true
    recipeId?: true
    ingredientId?: true
  }

  export type RecipeIngredientSumAggregateInputType = {
    id?: true
    recipeId?: true
    ingredientId?: true
  }

  export type RecipeIngredientMinAggregateInputType = {
    id?: true
    recipeId?: true
    ingredientId?: true
    quantity?: true
    unit?: true
  }

  export type RecipeIngredientMaxAggregateInputType = {
    id?: true
    recipeId?: true
    ingredientId?: true
    quantity?: true
    unit?: true
  }

  export type RecipeIngredientCountAggregateInputType = {
    id?: true
    recipeId?: true
    ingredientId?: true
    quantity?: true
    unit?: true
    _all?: true
  }

  export type RecipeIngredientAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RecipeIngredient to aggregate.
     */
    where?: RecipeIngredientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecipeIngredients to fetch.
     */
    orderBy?: RecipeIngredientOrderByWithRelationInput | RecipeIngredientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RecipeIngredientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecipeIngredients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecipeIngredients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RecipeIngredients
    **/
    _count?: true | RecipeIngredientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RecipeIngredientAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RecipeIngredientSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RecipeIngredientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RecipeIngredientMaxAggregateInputType
  }

  export type GetRecipeIngredientAggregateType<T extends RecipeIngredientAggregateArgs> = {
        [P in keyof T & keyof AggregateRecipeIngredient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecipeIngredient[P]>
      : GetScalarType<T[P], AggregateRecipeIngredient[P]>
  }




  export type RecipeIngredientGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecipeIngredientWhereInput
    orderBy?: RecipeIngredientOrderByWithAggregationInput | RecipeIngredientOrderByWithAggregationInput[]
    by: RecipeIngredientScalarFieldEnum[] | RecipeIngredientScalarFieldEnum
    having?: RecipeIngredientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RecipeIngredientCountAggregateInputType | true
    _avg?: RecipeIngredientAvgAggregateInputType
    _sum?: RecipeIngredientSumAggregateInputType
    _min?: RecipeIngredientMinAggregateInputType
    _max?: RecipeIngredientMaxAggregateInputType
  }

  export type RecipeIngredientGroupByOutputType = {
    id: number
    recipeId: number
    ingredientId: number
    quantity: string
    unit: string
    _count: RecipeIngredientCountAggregateOutputType | null
    _avg: RecipeIngredientAvgAggregateOutputType | null
    _sum: RecipeIngredientSumAggregateOutputType | null
    _min: RecipeIngredientMinAggregateOutputType | null
    _max: RecipeIngredientMaxAggregateOutputType | null
  }

  type GetRecipeIngredientGroupByPayload<T extends RecipeIngredientGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RecipeIngredientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RecipeIngredientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RecipeIngredientGroupByOutputType[P]>
            : GetScalarType<T[P], RecipeIngredientGroupByOutputType[P]>
        }
      >
    >


  export type RecipeIngredientSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    recipeId?: boolean
    ingredientId?: boolean
    quantity?: boolean
    unit?: boolean
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
    ingredient?: boolean | IngredientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["recipeIngredient"]>

  export type RecipeIngredientSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    recipeId?: boolean
    ingredientId?: boolean
    quantity?: boolean
    unit?: boolean
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
    ingredient?: boolean | IngredientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["recipeIngredient"]>

  export type RecipeIngredientSelectScalar = {
    id?: boolean
    recipeId?: boolean
    ingredientId?: boolean
    quantity?: boolean
    unit?: boolean
  }

  export type RecipeIngredientInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
    ingredient?: boolean | IngredientDefaultArgs<ExtArgs>
  }
  export type RecipeIngredientIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
    ingredient?: boolean | IngredientDefaultArgs<ExtArgs>
  }

  export type $RecipeIngredientPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RecipeIngredient"
    objects: {
      recipe: Prisma.$RecipePayload<ExtArgs>
      ingredient: Prisma.$IngredientPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      recipeId: number
      ingredientId: number
      quantity: string
      unit: string
    }, ExtArgs["result"]["recipeIngredient"]>
    composites: {}
  }

  type RecipeIngredientGetPayload<S extends boolean | null | undefined | RecipeIngredientDefaultArgs> = $Result.GetResult<Prisma.$RecipeIngredientPayload, S>

  type RecipeIngredientCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RecipeIngredientFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RecipeIngredientCountAggregateInputType | true
    }

  export interface RecipeIngredientDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RecipeIngredient'], meta: { name: 'RecipeIngredient' } }
    /**
     * Find zero or one RecipeIngredient that matches the filter.
     * @param {RecipeIngredientFindUniqueArgs} args - Arguments to find a RecipeIngredient
     * @example
     * // Get one RecipeIngredient
     * const recipeIngredient = await prisma.recipeIngredient.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RecipeIngredientFindUniqueArgs>(args: SelectSubset<T, RecipeIngredientFindUniqueArgs<ExtArgs>>): Prisma__RecipeIngredientClient<$Result.GetResult<Prisma.$RecipeIngredientPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RecipeIngredient that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RecipeIngredientFindUniqueOrThrowArgs} args - Arguments to find a RecipeIngredient
     * @example
     * // Get one RecipeIngredient
     * const recipeIngredient = await prisma.recipeIngredient.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RecipeIngredientFindUniqueOrThrowArgs>(args: SelectSubset<T, RecipeIngredientFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RecipeIngredientClient<$Result.GetResult<Prisma.$RecipeIngredientPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RecipeIngredient that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeIngredientFindFirstArgs} args - Arguments to find a RecipeIngredient
     * @example
     * // Get one RecipeIngredient
     * const recipeIngredient = await prisma.recipeIngredient.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RecipeIngredientFindFirstArgs>(args?: SelectSubset<T, RecipeIngredientFindFirstArgs<ExtArgs>>): Prisma__RecipeIngredientClient<$Result.GetResult<Prisma.$RecipeIngredientPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RecipeIngredient that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeIngredientFindFirstOrThrowArgs} args - Arguments to find a RecipeIngredient
     * @example
     * // Get one RecipeIngredient
     * const recipeIngredient = await prisma.recipeIngredient.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RecipeIngredientFindFirstOrThrowArgs>(args?: SelectSubset<T, RecipeIngredientFindFirstOrThrowArgs<ExtArgs>>): Prisma__RecipeIngredientClient<$Result.GetResult<Prisma.$RecipeIngredientPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RecipeIngredients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeIngredientFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RecipeIngredients
     * const recipeIngredients = await prisma.recipeIngredient.findMany()
     * 
     * // Get first 10 RecipeIngredients
     * const recipeIngredients = await prisma.recipeIngredient.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const recipeIngredientWithIdOnly = await prisma.recipeIngredient.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RecipeIngredientFindManyArgs>(args?: SelectSubset<T, RecipeIngredientFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecipeIngredientPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RecipeIngredient.
     * @param {RecipeIngredientCreateArgs} args - Arguments to create a RecipeIngredient.
     * @example
     * // Create one RecipeIngredient
     * const RecipeIngredient = await prisma.recipeIngredient.create({
     *   data: {
     *     // ... data to create a RecipeIngredient
     *   }
     * })
     * 
     */
    create<T extends RecipeIngredientCreateArgs>(args: SelectSubset<T, RecipeIngredientCreateArgs<ExtArgs>>): Prisma__RecipeIngredientClient<$Result.GetResult<Prisma.$RecipeIngredientPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RecipeIngredients.
     * @param {RecipeIngredientCreateManyArgs} args - Arguments to create many RecipeIngredients.
     * @example
     * // Create many RecipeIngredients
     * const recipeIngredient = await prisma.recipeIngredient.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RecipeIngredientCreateManyArgs>(args?: SelectSubset<T, RecipeIngredientCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RecipeIngredients and returns the data saved in the database.
     * @param {RecipeIngredientCreateManyAndReturnArgs} args - Arguments to create many RecipeIngredients.
     * @example
     * // Create many RecipeIngredients
     * const recipeIngredient = await prisma.recipeIngredient.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RecipeIngredients and only return the `id`
     * const recipeIngredientWithIdOnly = await prisma.recipeIngredient.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RecipeIngredientCreateManyAndReturnArgs>(args?: SelectSubset<T, RecipeIngredientCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecipeIngredientPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a RecipeIngredient.
     * @param {RecipeIngredientDeleteArgs} args - Arguments to delete one RecipeIngredient.
     * @example
     * // Delete one RecipeIngredient
     * const RecipeIngredient = await prisma.recipeIngredient.delete({
     *   where: {
     *     // ... filter to delete one RecipeIngredient
     *   }
     * })
     * 
     */
    delete<T extends RecipeIngredientDeleteArgs>(args: SelectSubset<T, RecipeIngredientDeleteArgs<ExtArgs>>): Prisma__RecipeIngredientClient<$Result.GetResult<Prisma.$RecipeIngredientPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RecipeIngredient.
     * @param {RecipeIngredientUpdateArgs} args - Arguments to update one RecipeIngredient.
     * @example
     * // Update one RecipeIngredient
     * const recipeIngredient = await prisma.recipeIngredient.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RecipeIngredientUpdateArgs>(args: SelectSubset<T, RecipeIngredientUpdateArgs<ExtArgs>>): Prisma__RecipeIngredientClient<$Result.GetResult<Prisma.$RecipeIngredientPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RecipeIngredients.
     * @param {RecipeIngredientDeleteManyArgs} args - Arguments to filter RecipeIngredients to delete.
     * @example
     * // Delete a few RecipeIngredients
     * const { count } = await prisma.recipeIngredient.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RecipeIngredientDeleteManyArgs>(args?: SelectSubset<T, RecipeIngredientDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RecipeIngredients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeIngredientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RecipeIngredients
     * const recipeIngredient = await prisma.recipeIngredient.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RecipeIngredientUpdateManyArgs>(args: SelectSubset<T, RecipeIngredientUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RecipeIngredient.
     * @param {RecipeIngredientUpsertArgs} args - Arguments to update or create a RecipeIngredient.
     * @example
     * // Update or create a RecipeIngredient
     * const recipeIngredient = await prisma.recipeIngredient.upsert({
     *   create: {
     *     // ... data to create a RecipeIngredient
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RecipeIngredient we want to update
     *   }
     * })
     */
    upsert<T extends RecipeIngredientUpsertArgs>(args: SelectSubset<T, RecipeIngredientUpsertArgs<ExtArgs>>): Prisma__RecipeIngredientClient<$Result.GetResult<Prisma.$RecipeIngredientPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RecipeIngredients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeIngredientCountArgs} args - Arguments to filter RecipeIngredients to count.
     * @example
     * // Count the number of RecipeIngredients
     * const count = await prisma.recipeIngredient.count({
     *   where: {
     *     // ... the filter for the RecipeIngredients we want to count
     *   }
     * })
    **/
    count<T extends RecipeIngredientCountArgs>(
      args?: Subset<T, RecipeIngredientCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RecipeIngredientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RecipeIngredient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeIngredientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RecipeIngredientAggregateArgs>(args: Subset<T, RecipeIngredientAggregateArgs>): Prisma.PrismaPromise<GetRecipeIngredientAggregateType<T>>

    /**
     * Group by RecipeIngredient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeIngredientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RecipeIngredientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RecipeIngredientGroupByArgs['orderBy'] }
        : { orderBy?: RecipeIngredientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RecipeIngredientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecipeIngredientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RecipeIngredient model
   */
  readonly fields: RecipeIngredientFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RecipeIngredient.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RecipeIngredientClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    recipe<T extends RecipeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RecipeDefaultArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    ingredient<T extends IngredientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, IngredientDefaultArgs<ExtArgs>>): Prisma__IngredientClient<$Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RecipeIngredient model
   */ 
  interface RecipeIngredientFieldRefs {
    readonly id: FieldRef<"RecipeIngredient", 'Int'>
    readonly recipeId: FieldRef<"RecipeIngredient", 'Int'>
    readonly ingredientId: FieldRef<"RecipeIngredient", 'Int'>
    readonly quantity: FieldRef<"RecipeIngredient", 'String'>
    readonly unit: FieldRef<"RecipeIngredient", 'String'>
  }
    

  // Custom InputTypes
  /**
   * RecipeIngredient findUnique
   */
  export type RecipeIngredientFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeIngredient
     */
    select?: RecipeIngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeIngredientInclude<ExtArgs> | null
    /**
     * Filter, which RecipeIngredient to fetch.
     */
    where: RecipeIngredientWhereUniqueInput
  }

  /**
   * RecipeIngredient findUniqueOrThrow
   */
  export type RecipeIngredientFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeIngredient
     */
    select?: RecipeIngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeIngredientInclude<ExtArgs> | null
    /**
     * Filter, which RecipeIngredient to fetch.
     */
    where: RecipeIngredientWhereUniqueInput
  }

  /**
   * RecipeIngredient findFirst
   */
  export type RecipeIngredientFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeIngredient
     */
    select?: RecipeIngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeIngredientInclude<ExtArgs> | null
    /**
     * Filter, which RecipeIngredient to fetch.
     */
    where?: RecipeIngredientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecipeIngredients to fetch.
     */
    orderBy?: RecipeIngredientOrderByWithRelationInput | RecipeIngredientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RecipeIngredients.
     */
    cursor?: RecipeIngredientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecipeIngredients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecipeIngredients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RecipeIngredients.
     */
    distinct?: RecipeIngredientScalarFieldEnum | RecipeIngredientScalarFieldEnum[]
  }

  /**
   * RecipeIngredient findFirstOrThrow
   */
  export type RecipeIngredientFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeIngredient
     */
    select?: RecipeIngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeIngredientInclude<ExtArgs> | null
    /**
     * Filter, which RecipeIngredient to fetch.
     */
    where?: RecipeIngredientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecipeIngredients to fetch.
     */
    orderBy?: RecipeIngredientOrderByWithRelationInput | RecipeIngredientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RecipeIngredients.
     */
    cursor?: RecipeIngredientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecipeIngredients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecipeIngredients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RecipeIngredients.
     */
    distinct?: RecipeIngredientScalarFieldEnum | RecipeIngredientScalarFieldEnum[]
  }

  /**
   * RecipeIngredient findMany
   */
  export type RecipeIngredientFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeIngredient
     */
    select?: RecipeIngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeIngredientInclude<ExtArgs> | null
    /**
     * Filter, which RecipeIngredients to fetch.
     */
    where?: RecipeIngredientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecipeIngredients to fetch.
     */
    orderBy?: RecipeIngredientOrderByWithRelationInput | RecipeIngredientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RecipeIngredients.
     */
    cursor?: RecipeIngredientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecipeIngredients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecipeIngredients.
     */
    skip?: number
    distinct?: RecipeIngredientScalarFieldEnum | RecipeIngredientScalarFieldEnum[]
  }

  /**
   * RecipeIngredient create
   */
  export type RecipeIngredientCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeIngredient
     */
    select?: RecipeIngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeIngredientInclude<ExtArgs> | null
    /**
     * The data needed to create a RecipeIngredient.
     */
    data: XOR<RecipeIngredientCreateInput, RecipeIngredientUncheckedCreateInput>
  }

  /**
   * RecipeIngredient createMany
   */
  export type RecipeIngredientCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RecipeIngredients.
     */
    data: RecipeIngredientCreateManyInput | RecipeIngredientCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RecipeIngredient createManyAndReturn
   */
  export type RecipeIngredientCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeIngredient
     */
    select?: RecipeIngredientSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many RecipeIngredients.
     */
    data: RecipeIngredientCreateManyInput | RecipeIngredientCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeIngredientIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RecipeIngredient update
   */
  export type RecipeIngredientUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeIngredient
     */
    select?: RecipeIngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeIngredientInclude<ExtArgs> | null
    /**
     * The data needed to update a RecipeIngredient.
     */
    data: XOR<RecipeIngredientUpdateInput, RecipeIngredientUncheckedUpdateInput>
    /**
     * Choose, which RecipeIngredient to update.
     */
    where: RecipeIngredientWhereUniqueInput
  }

  /**
   * RecipeIngredient updateMany
   */
  export type RecipeIngredientUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RecipeIngredients.
     */
    data: XOR<RecipeIngredientUpdateManyMutationInput, RecipeIngredientUncheckedUpdateManyInput>
    /**
     * Filter which RecipeIngredients to update
     */
    where?: RecipeIngredientWhereInput
  }

  /**
   * RecipeIngredient upsert
   */
  export type RecipeIngredientUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeIngredient
     */
    select?: RecipeIngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeIngredientInclude<ExtArgs> | null
    /**
     * The filter to search for the RecipeIngredient to update in case it exists.
     */
    where: RecipeIngredientWhereUniqueInput
    /**
     * In case the RecipeIngredient found by the `where` argument doesn't exist, create a new RecipeIngredient with this data.
     */
    create: XOR<RecipeIngredientCreateInput, RecipeIngredientUncheckedCreateInput>
    /**
     * In case the RecipeIngredient was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RecipeIngredientUpdateInput, RecipeIngredientUncheckedUpdateInput>
  }

  /**
   * RecipeIngredient delete
   */
  export type RecipeIngredientDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeIngredient
     */
    select?: RecipeIngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeIngredientInclude<ExtArgs> | null
    /**
     * Filter which RecipeIngredient to delete.
     */
    where: RecipeIngredientWhereUniqueInput
  }

  /**
   * RecipeIngredient deleteMany
   */
  export type RecipeIngredientDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RecipeIngredients to delete
     */
    where?: RecipeIngredientWhereInput
  }

  /**
   * RecipeIngredient without action
   */
  export type RecipeIngredientDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeIngredient
     */
    select?: RecipeIngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeIngredientInclude<ExtArgs> | null
  }


  /**
   * Model RecipeInstruction
   */

  export type AggregateRecipeInstruction = {
    _count: RecipeInstructionCountAggregateOutputType | null
    _avg: RecipeInstructionAvgAggregateOutputType | null
    _sum: RecipeInstructionSumAggregateOutputType | null
    _min: RecipeInstructionMinAggregateOutputType | null
    _max: RecipeInstructionMaxAggregateOutputType | null
  }

  export type RecipeInstructionAvgAggregateOutputType = {
    id: number | null
    recipeId: number | null
    stepNumber: number | null
  }

  export type RecipeInstructionSumAggregateOutputType = {
    id: number | null
    recipeId: number | null
    stepNumber: number | null
  }

  export type RecipeInstructionMinAggregateOutputType = {
    id: number | null
    recipeId: number | null
    stepNumber: number | null
    instruction: string | null
  }

  export type RecipeInstructionMaxAggregateOutputType = {
    id: number | null
    recipeId: number | null
    stepNumber: number | null
    instruction: string | null
  }

  export type RecipeInstructionCountAggregateOutputType = {
    id: number
    recipeId: number
    stepNumber: number
    instruction: number
    _all: number
  }


  export type RecipeInstructionAvgAggregateInputType = {
    id?: true
    recipeId?: true
    stepNumber?: true
  }

  export type RecipeInstructionSumAggregateInputType = {
    id?: true
    recipeId?: true
    stepNumber?: true
  }

  export type RecipeInstructionMinAggregateInputType = {
    id?: true
    recipeId?: true
    stepNumber?: true
    instruction?: true
  }

  export type RecipeInstructionMaxAggregateInputType = {
    id?: true
    recipeId?: true
    stepNumber?: true
    instruction?: true
  }

  export type RecipeInstructionCountAggregateInputType = {
    id?: true
    recipeId?: true
    stepNumber?: true
    instruction?: true
    _all?: true
  }

  export type RecipeInstructionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RecipeInstruction to aggregate.
     */
    where?: RecipeInstructionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecipeInstructions to fetch.
     */
    orderBy?: RecipeInstructionOrderByWithRelationInput | RecipeInstructionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RecipeInstructionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecipeInstructions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecipeInstructions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RecipeInstructions
    **/
    _count?: true | RecipeInstructionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RecipeInstructionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RecipeInstructionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RecipeInstructionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RecipeInstructionMaxAggregateInputType
  }

  export type GetRecipeInstructionAggregateType<T extends RecipeInstructionAggregateArgs> = {
        [P in keyof T & keyof AggregateRecipeInstruction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecipeInstruction[P]>
      : GetScalarType<T[P], AggregateRecipeInstruction[P]>
  }




  export type RecipeInstructionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecipeInstructionWhereInput
    orderBy?: RecipeInstructionOrderByWithAggregationInput | RecipeInstructionOrderByWithAggregationInput[]
    by: RecipeInstructionScalarFieldEnum[] | RecipeInstructionScalarFieldEnum
    having?: RecipeInstructionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RecipeInstructionCountAggregateInputType | true
    _avg?: RecipeInstructionAvgAggregateInputType
    _sum?: RecipeInstructionSumAggregateInputType
    _min?: RecipeInstructionMinAggregateInputType
    _max?: RecipeInstructionMaxAggregateInputType
  }

  export type RecipeInstructionGroupByOutputType = {
    id: number
    recipeId: number
    stepNumber: number
    instruction: string
    _count: RecipeInstructionCountAggregateOutputType | null
    _avg: RecipeInstructionAvgAggregateOutputType | null
    _sum: RecipeInstructionSumAggregateOutputType | null
    _min: RecipeInstructionMinAggregateOutputType | null
    _max: RecipeInstructionMaxAggregateOutputType | null
  }

  type GetRecipeInstructionGroupByPayload<T extends RecipeInstructionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RecipeInstructionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RecipeInstructionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RecipeInstructionGroupByOutputType[P]>
            : GetScalarType<T[P], RecipeInstructionGroupByOutputType[P]>
        }
      >
    >


  export type RecipeInstructionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    recipeId?: boolean
    stepNumber?: boolean
    instruction?: boolean
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["recipeInstruction"]>

  export type RecipeInstructionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    recipeId?: boolean
    stepNumber?: boolean
    instruction?: boolean
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["recipeInstruction"]>

  export type RecipeInstructionSelectScalar = {
    id?: boolean
    recipeId?: boolean
    stepNumber?: boolean
    instruction?: boolean
  }

  export type RecipeInstructionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
  }
  export type RecipeInstructionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
  }

  export type $RecipeInstructionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RecipeInstruction"
    objects: {
      recipe: Prisma.$RecipePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      recipeId: number
      stepNumber: number
      instruction: string
    }, ExtArgs["result"]["recipeInstruction"]>
    composites: {}
  }

  type RecipeInstructionGetPayload<S extends boolean | null | undefined | RecipeInstructionDefaultArgs> = $Result.GetResult<Prisma.$RecipeInstructionPayload, S>

  type RecipeInstructionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RecipeInstructionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RecipeInstructionCountAggregateInputType | true
    }

  export interface RecipeInstructionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RecipeInstruction'], meta: { name: 'RecipeInstruction' } }
    /**
     * Find zero or one RecipeInstruction that matches the filter.
     * @param {RecipeInstructionFindUniqueArgs} args - Arguments to find a RecipeInstruction
     * @example
     * // Get one RecipeInstruction
     * const recipeInstruction = await prisma.recipeInstruction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RecipeInstructionFindUniqueArgs>(args: SelectSubset<T, RecipeInstructionFindUniqueArgs<ExtArgs>>): Prisma__RecipeInstructionClient<$Result.GetResult<Prisma.$RecipeInstructionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RecipeInstruction that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RecipeInstructionFindUniqueOrThrowArgs} args - Arguments to find a RecipeInstruction
     * @example
     * // Get one RecipeInstruction
     * const recipeInstruction = await prisma.recipeInstruction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RecipeInstructionFindUniqueOrThrowArgs>(args: SelectSubset<T, RecipeInstructionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RecipeInstructionClient<$Result.GetResult<Prisma.$RecipeInstructionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RecipeInstruction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeInstructionFindFirstArgs} args - Arguments to find a RecipeInstruction
     * @example
     * // Get one RecipeInstruction
     * const recipeInstruction = await prisma.recipeInstruction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RecipeInstructionFindFirstArgs>(args?: SelectSubset<T, RecipeInstructionFindFirstArgs<ExtArgs>>): Prisma__RecipeInstructionClient<$Result.GetResult<Prisma.$RecipeInstructionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RecipeInstruction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeInstructionFindFirstOrThrowArgs} args - Arguments to find a RecipeInstruction
     * @example
     * // Get one RecipeInstruction
     * const recipeInstruction = await prisma.recipeInstruction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RecipeInstructionFindFirstOrThrowArgs>(args?: SelectSubset<T, RecipeInstructionFindFirstOrThrowArgs<ExtArgs>>): Prisma__RecipeInstructionClient<$Result.GetResult<Prisma.$RecipeInstructionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RecipeInstructions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeInstructionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RecipeInstructions
     * const recipeInstructions = await prisma.recipeInstruction.findMany()
     * 
     * // Get first 10 RecipeInstructions
     * const recipeInstructions = await prisma.recipeInstruction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const recipeInstructionWithIdOnly = await prisma.recipeInstruction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RecipeInstructionFindManyArgs>(args?: SelectSubset<T, RecipeInstructionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecipeInstructionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RecipeInstruction.
     * @param {RecipeInstructionCreateArgs} args - Arguments to create a RecipeInstruction.
     * @example
     * // Create one RecipeInstruction
     * const RecipeInstruction = await prisma.recipeInstruction.create({
     *   data: {
     *     // ... data to create a RecipeInstruction
     *   }
     * })
     * 
     */
    create<T extends RecipeInstructionCreateArgs>(args: SelectSubset<T, RecipeInstructionCreateArgs<ExtArgs>>): Prisma__RecipeInstructionClient<$Result.GetResult<Prisma.$RecipeInstructionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RecipeInstructions.
     * @param {RecipeInstructionCreateManyArgs} args - Arguments to create many RecipeInstructions.
     * @example
     * // Create many RecipeInstructions
     * const recipeInstruction = await prisma.recipeInstruction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RecipeInstructionCreateManyArgs>(args?: SelectSubset<T, RecipeInstructionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RecipeInstructions and returns the data saved in the database.
     * @param {RecipeInstructionCreateManyAndReturnArgs} args - Arguments to create many RecipeInstructions.
     * @example
     * // Create many RecipeInstructions
     * const recipeInstruction = await prisma.recipeInstruction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RecipeInstructions and only return the `id`
     * const recipeInstructionWithIdOnly = await prisma.recipeInstruction.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RecipeInstructionCreateManyAndReturnArgs>(args?: SelectSubset<T, RecipeInstructionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecipeInstructionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a RecipeInstruction.
     * @param {RecipeInstructionDeleteArgs} args - Arguments to delete one RecipeInstruction.
     * @example
     * // Delete one RecipeInstruction
     * const RecipeInstruction = await prisma.recipeInstruction.delete({
     *   where: {
     *     // ... filter to delete one RecipeInstruction
     *   }
     * })
     * 
     */
    delete<T extends RecipeInstructionDeleteArgs>(args: SelectSubset<T, RecipeInstructionDeleteArgs<ExtArgs>>): Prisma__RecipeInstructionClient<$Result.GetResult<Prisma.$RecipeInstructionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RecipeInstruction.
     * @param {RecipeInstructionUpdateArgs} args - Arguments to update one RecipeInstruction.
     * @example
     * // Update one RecipeInstruction
     * const recipeInstruction = await prisma.recipeInstruction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RecipeInstructionUpdateArgs>(args: SelectSubset<T, RecipeInstructionUpdateArgs<ExtArgs>>): Prisma__RecipeInstructionClient<$Result.GetResult<Prisma.$RecipeInstructionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RecipeInstructions.
     * @param {RecipeInstructionDeleteManyArgs} args - Arguments to filter RecipeInstructions to delete.
     * @example
     * // Delete a few RecipeInstructions
     * const { count } = await prisma.recipeInstruction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RecipeInstructionDeleteManyArgs>(args?: SelectSubset<T, RecipeInstructionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RecipeInstructions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeInstructionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RecipeInstructions
     * const recipeInstruction = await prisma.recipeInstruction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RecipeInstructionUpdateManyArgs>(args: SelectSubset<T, RecipeInstructionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RecipeInstruction.
     * @param {RecipeInstructionUpsertArgs} args - Arguments to update or create a RecipeInstruction.
     * @example
     * // Update or create a RecipeInstruction
     * const recipeInstruction = await prisma.recipeInstruction.upsert({
     *   create: {
     *     // ... data to create a RecipeInstruction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RecipeInstruction we want to update
     *   }
     * })
     */
    upsert<T extends RecipeInstructionUpsertArgs>(args: SelectSubset<T, RecipeInstructionUpsertArgs<ExtArgs>>): Prisma__RecipeInstructionClient<$Result.GetResult<Prisma.$RecipeInstructionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RecipeInstructions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeInstructionCountArgs} args - Arguments to filter RecipeInstructions to count.
     * @example
     * // Count the number of RecipeInstructions
     * const count = await prisma.recipeInstruction.count({
     *   where: {
     *     // ... the filter for the RecipeInstructions we want to count
     *   }
     * })
    **/
    count<T extends RecipeInstructionCountArgs>(
      args?: Subset<T, RecipeInstructionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RecipeInstructionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RecipeInstruction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeInstructionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RecipeInstructionAggregateArgs>(args: Subset<T, RecipeInstructionAggregateArgs>): Prisma.PrismaPromise<GetRecipeInstructionAggregateType<T>>

    /**
     * Group by RecipeInstruction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeInstructionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RecipeInstructionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RecipeInstructionGroupByArgs['orderBy'] }
        : { orderBy?: RecipeInstructionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RecipeInstructionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecipeInstructionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RecipeInstruction model
   */
  readonly fields: RecipeInstructionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RecipeInstruction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RecipeInstructionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    recipe<T extends RecipeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RecipeDefaultArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RecipeInstruction model
   */ 
  interface RecipeInstructionFieldRefs {
    readonly id: FieldRef<"RecipeInstruction", 'Int'>
    readonly recipeId: FieldRef<"RecipeInstruction", 'Int'>
    readonly stepNumber: FieldRef<"RecipeInstruction", 'Int'>
    readonly instruction: FieldRef<"RecipeInstruction", 'String'>
  }
    

  // Custom InputTypes
  /**
   * RecipeInstruction findUnique
   */
  export type RecipeInstructionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeInstruction
     */
    select?: RecipeInstructionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInstructionInclude<ExtArgs> | null
    /**
     * Filter, which RecipeInstruction to fetch.
     */
    where: RecipeInstructionWhereUniqueInput
  }

  /**
   * RecipeInstruction findUniqueOrThrow
   */
  export type RecipeInstructionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeInstruction
     */
    select?: RecipeInstructionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInstructionInclude<ExtArgs> | null
    /**
     * Filter, which RecipeInstruction to fetch.
     */
    where: RecipeInstructionWhereUniqueInput
  }

  /**
   * RecipeInstruction findFirst
   */
  export type RecipeInstructionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeInstruction
     */
    select?: RecipeInstructionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInstructionInclude<ExtArgs> | null
    /**
     * Filter, which RecipeInstruction to fetch.
     */
    where?: RecipeInstructionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecipeInstructions to fetch.
     */
    orderBy?: RecipeInstructionOrderByWithRelationInput | RecipeInstructionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RecipeInstructions.
     */
    cursor?: RecipeInstructionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecipeInstructions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecipeInstructions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RecipeInstructions.
     */
    distinct?: RecipeInstructionScalarFieldEnum | RecipeInstructionScalarFieldEnum[]
  }

  /**
   * RecipeInstruction findFirstOrThrow
   */
  export type RecipeInstructionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeInstruction
     */
    select?: RecipeInstructionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInstructionInclude<ExtArgs> | null
    /**
     * Filter, which RecipeInstruction to fetch.
     */
    where?: RecipeInstructionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecipeInstructions to fetch.
     */
    orderBy?: RecipeInstructionOrderByWithRelationInput | RecipeInstructionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RecipeInstructions.
     */
    cursor?: RecipeInstructionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecipeInstructions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecipeInstructions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RecipeInstructions.
     */
    distinct?: RecipeInstructionScalarFieldEnum | RecipeInstructionScalarFieldEnum[]
  }

  /**
   * RecipeInstruction findMany
   */
  export type RecipeInstructionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeInstruction
     */
    select?: RecipeInstructionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInstructionInclude<ExtArgs> | null
    /**
     * Filter, which RecipeInstructions to fetch.
     */
    where?: RecipeInstructionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecipeInstructions to fetch.
     */
    orderBy?: RecipeInstructionOrderByWithRelationInput | RecipeInstructionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RecipeInstructions.
     */
    cursor?: RecipeInstructionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecipeInstructions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecipeInstructions.
     */
    skip?: number
    distinct?: RecipeInstructionScalarFieldEnum | RecipeInstructionScalarFieldEnum[]
  }

  /**
   * RecipeInstruction create
   */
  export type RecipeInstructionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeInstruction
     */
    select?: RecipeInstructionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInstructionInclude<ExtArgs> | null
    /**
     * The data needed to create a RecipeInstruction.
     */
    data: XOR<RecipeInstructionCreateInput, RecipeInstructionUncheckedCreateInput>
  }

  /**
   * RecipeInstruction createMany
   */
  export type RecipeInstructionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RecipeInstructions.
     */
    data: RecipeInstructionCreateManyInput | RecipeInstructionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RecipeInstruction createManyAndReturn
   */
  export type RecipeInstructionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeInstruction
     */
    select?: RecipeInstructionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many RecipeInstructions.
     */
    data: RecipeInstructionCreateManyInput | RecipeInstructionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInstructionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RecipeInstruction update
   */
  export type RecipeInstructionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeInstruction
     */
    select?: RecipeInstructionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInstructionInclude<ExtArgs> | null
    /**
     * The data needed to update a RecipeInstruction.
     */
    data: XOR<RecipeInstructionUpdateInput, RecipeInstructionUncheckedUpdateInput>
    /**
     * Choose, which RecipeInstruction to update.
     */
    where: RecipeInstructionWhereUniqueInput
  }

  /**
   * RecipeInstruction updateMany
   */
  export type RecipeInstructionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RecipeInstructions.
     */
    data: XOR<RecipeInstructionUpdateManyMutationInput, RecipeInstructionUncheckedUpdateManyInput>
    /**
     * Filter which RecipeInstructions to update
     */
    where?: RecipeInstructionWhereInput
  }

  /**
   * RecipeInstruction upsert
   */
  export type RecipeInstructionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeInstruction
     */
    select?: RecipeInstructionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInstructionInclude<ExtArgs> | null
    /**
     * The filter to search for the RecipeInstruction to update in case it exists.
     */
    where: RecipeInstructionWhereUniqueInput
    /**
     * In case the RecipeInstruction found by the `where` argument doesn't exist, create a new RecipeInstruction with this data.
     */
    create: XOR<RecipeInstructionCreateInput, RecipeInstructionUncheckedCreateInput>
    /**
     * In case the RecipeInstruction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RecipeInstructionUpdateInput, RecipeInstructionUncheckedUpdateInput>
  }

  /**
   * RecipeInstruction delete
   */
  export type RecipeInstructionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeInstruction
     */
    select?: RecipeInstructionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInstructionInclude<ExtArgs> | null
    /**
     * Filter which RecipeInstruction to delete.
     */
    where: RecipeInstructionWhereUniqueInput
  }

  /**
   * RecipeInstruction deleteMany
   */
  export type RecipeInstructionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RecipeInstructions to delete
     */
    where?: RecipeInstructionWhereInput
  }

  /**
   * RecipeInstruction without action
   */
  export type RecipeInstructionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeInstruction
     */
    select?: RecipeInstructionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInstructionInclude<ExtArgs> | null
  }


  /**
   * Model BlogPost
   */

  export type AggregateBlogPost = {
    _count: BlogPostCountAggregateOutputType | null
    _avg: BlogPostAvgAggregateOutputType | null
    _sum: BlogPostSumAggregateOutputType | null
    _min: BlogPostMinAggregateOutputType | null
    _max: BlogPostMaxAggregateOutputType | null
  }

  export type BlogPostAvgAggregateOutputType = {
    id: number | null
  }

  export type BlogPostSumAggregateOutputType = {
    id: number | null
  }

  export type BlogPostMinAggregateOutputType = {
    id: number | null
    title: string | null
    content: string | null
    excerpt: string | null
    category: string | null
    imageUrl: string | null
    author: string | null
    published: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    publishedAt: Date | null
  }

  export type BlogPostMaxAggregateOutputType = {
    id: number | null
    title: string | null
    content: string | null
    excerpt: string | null
    category: string | null
    imageUrl: string | null
    author: string | null
    published: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    publishedAt: Date | null
  }

  export type BlogPostCountAggregateOutputType = {
    id: number
    title: number
    content: number
    excerpt: number
    category: number
    tags: number
    imageUrl: number
    author: number
    published: number
    createdAt: number
    updatedAt: number
    publishedAt: number
    _all: number
  }


  export type BlogPostAvgAggregateInputType = {
    id?: true
  }

  export type BlogPostSumAggregateInputType = {
    id?: true
  }

  export type BlogPostMinAggregateInputType = {
    id?: true
    title?: true
    content?: true
    excerpt?: true
    category?: true
    imageUrl?: true
    author?: true
    published?: true
    createdAt?: true
    updatedAt?: true
    publishedAt?: true
  }

  export type BlogPostMaxAggregateInputType = {
    id?: true
    title?: true
    content?: true
    excerpt?: true
    category?: true
    imageUrl?: true
    author?: true
    published?: true
    createdAt?: true
    updatedAt?: true
    publishedAt?: true
  }

  export type BlogPostCountAggregateInputType = {
    id?: true
    title?: true
    content?: true
    excerpt?: true
    category?: true
    tags?: true
    imageUrl?: true
    author?: true
    published?: true
    createdAt?: true
    updatedAt?: true
    publishedAt?: true
    _all?: true
  }

  export type BlogPostAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BlogPost to aggregate.
     */
    where?: BlogPostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BlogPosts to fetch.
     */
    orderBy?: BlogPostOrderByWithRelationInput | BlogPostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BlogPostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BlogPosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BlogPosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BlogPosts
    **/
    _count?: true | BlogPostCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BlogPostAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BlogPostSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BlogPostMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BlogPostMaxAggregateInputType
  }

  export type GetBlogPostAggregateType<T extends BlogPostAggregateArgs> = {
        [P in keyof T & keyof AggregateBlogPost]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBlogPost[P]>
      : GetScalarType<T[P], AggregateBlogPost[P]>
  }




  export type BlogPostGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BlogPostWhereInput
    orderBy?: BlogPostOrderByWithAggregationInput | BlogPostOrderByWithAggregationInput[]
    by: BlogPostScalarFieldEnum[] | BlogPostScalarFieldEnum
    having?: BlogPostScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BlogPostCountAggregateInputType | true
    _avg?: BlogPostAvgAggregateInputType
    _sum?: BlogPostSumAggregateInputType
    _min?: BlogPostMinAggregateInputType
    _max?: BlogPostMaxAggregateInputType
  }

  export type BlogPostGroupByOutputType = {
    id: number
    title: string
    content: string
    excerpt: string
    category: string
    tags: string[]
    imageUrl: string | null
    author: string
    published: boolean
    createdAt: Date
    updatedAt: Date
    publishedAt: Date | null
    _count: BlogPostCountAggregateOutputType | null
    _avg: BlogPostAvgAggregateOutputType | null
    _sum: BlogPostSumAggregateOutputType | null
    _min: BlogPostMinAggregateOutputType | null
    _max: BlogPostMaxAggregateOutputType | null
  }

  type GetBlogPostGroupByPayload<T extends BlogPostGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BlogPostGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BlogPostGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BlogPostGroupByOutputType[P]>
            : GetScalarType<T[P], BlogPostGroupByOutputType[P]>
        }
      >
    >


  export type BlogPostSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    excerpt?: boolean
    category?: boolean
    tags?: boolean
    imageUrl?: boolean
    author?: boolean
    published?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    publishedAt?: boolean
  }, ExtArgs["result"]["blogPost"]>

  export type BlogPostSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    excerpt?: boolean
    category?: boolean
    tags?: boolean
    imageUrl?: boolean
    author?: boolean
    published?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    publishedAt?: boolean
  }, ExtArgs["result"]["blogPost"]>

  export type BlogPostSelectScalar = {
    id?: boolean
    title?: boolean
    content?: boolean
    excerpt?: boolean
    category?: boolean
    tags?: boolean
    imageUrl?: boolean
    author?: boolean
    published?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    publishedAt?: boolean
  }


  export type $BlogPostPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BlogPost"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      content: string
      excerpt: string
      category: string
      tags: string[]
      imageUrl: string | null
      author: string
      published: boolean
      createdAt: Date
      updatedAt: Date
      publishedAt: Date | null
    }, ExtArgs["result"]["blogPost"]>
    composites: {}
  }

  type BlogPostGetPayload<S extends boolean | null | undefined | BlogPostDefaultArgs> = $Result.GetResult<Prisma.$BlogPostPayload, S>

  type BlogPostCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BlogPostFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BlogPostCountAggregateInputType | true
    }

  export interface BlogPostDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BlogPost'], meta: { name: 'BlogPost' } }
    /**
     * Find zero or one BlogPost that matches the filter.
     * @param {BlogPostFindUniqueArgs} args - Arguments to find a BlogPost
     * @example
     * // Get one BlogPost
     * const blogPost = await prisma.blogPost.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BlogPostFindUniqueArgs>(args: SelectSubset<T, BlogPostFindUniqueArgs<ExtArgs>>): Prisma__BlogPostClient<$Result.GetResult<Prisma.$BlogPostPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one BlogPost that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BlogPostFindUniqueOrThrowArgs} args - Arguments to find a BlogPost
     * @example
     * // Get one BlogPost
     * const blogPost = await prisma.blogPost.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BlogPostFindUniqueOrThrowArgs>(args: SelectSubset<T, BlogPostFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BlogPostClient<$Result.GetResult<Prisma.$BlogPostPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first BlogPost that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogPostFindFirstArgs} args - Arguments to find a BlogPost
     * @example
     * // Get one BlogPost
     * const blogPost = await prisma.blogPost.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BlogPostFindFirstArgs>(args?: SelectSubset<T, BlogPostFindFirstArgs<ExtArgs>>): Prisma__BlogPostClient<$Result.GetResult<Prisma.$BlogPostPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first BlogPost that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogPostFindFirstOrThrowArgs} args - Arguments to find a BlogPost
     * @example
     * // Get one BlogPost
     * const blogPost = await prisma.blogPost.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BlogPostFindFirstOrThrowArgs>(args?: SelectSubset<T, BlogPostFindFirstOrThrowArgs<ExtArgs>>): Prisma__BlogPostClient<$Result.GetResult<Prisma.$BlogPostPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more BlogPosts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogPostFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BlogPosts
     * const blogPosts = await prisma.blogPost.findMany()
     * 
     * // Get first 10 BlogPosts
     * const blogPosts = await prisma.blogPost.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const blogPostWithIdOnly = await prisma.blogPost.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BlogPostFindManyArgs>(args?: SelectSubset<T, BlogPostFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BlogPostPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a BlogPost.
     * @param {BlogPostCreateArgs} args - Arguments to create a BlogPost.
     * @example
     * // Create one BlogPost
     * const BlogPost = await prisma.blogPost.create({
     *   data: {
     *     // ... data to create a BlogPost
     *   }
     * })
     * 
     */
    create<T extends BlogPostCreateArgs>(args: SelectSubset<T, BlogPostCreateArgs<ExtArgs>>): Prisma__BlogPostClient<$Result.GetResult<Prisma.$BlogPostPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many BlogPosts.
     * @param {BlogPostCreateManyArgs} args - Arguments to create many BlogPosts.
     * @example
     * // Create many BlogPosts
     * const blogPost = await prisma.blogPost.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BlogPostCreateManyArgs>(args?: SelectSubset<T, BlogPostCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BlogPosts and returns the data saved in the database.
     * @param {BlogPostCreateManyAndReturnArgs} args - Arguments to create many BlogPosts.
     * @example
     * // Create many BlogPosts
     * const blogPost = await prisma.blogPost.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BlogPosts and only return the `id`
     * const blogPostWithIdOnly = await prisma.blogPost.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BlogPostCreateManyAndReturnArgs>(args?: SelectSubset<T, BlogPostCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BlogPostPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a BlogPost.
     * @param {BlogPostDeleteArgs} args - Arguments to delete one BlogPost.
     * @example
     * // Delete one BlogPost
     * const BlogPost = await prisma.blogPost.delete({
     *   where: {
     *     // ... filter to delete one BlogPost
     *   }
     * })
     * 
     */
    delete<T extends BlogPostDeleteArgs>(args: SelectSubset<T, BlogPostDeleteArgs<ExtArgs>>): Prisma__BlogPostClient<$Result.GetResult<Prisma.$BlogPostPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one BlogPost.
     * @param {BlogPostUpdateArgs} args - Arguments to update one BlogPost.
     * @example
     * // Update one BlogPost
     * const blogPost = await prisma.blogPost.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BlogPostUpdateArgs>(args: SelectSubset<T, BlogPostUpdateArgs<ExtArgs>>): Prisma__BlogPostClient<$Result.GetResult<Prisma.$BlogPostPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more BlogPosts.
     * @param {BlogPostDeleteManyArgs} args - Arguments to filter BlogPosts to delete.
     * @example
     * // Delete a few BlogPosts
     * const { count } = await prisma.blogPost.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BlogPostDeleteManyArgs>(args?: SelectSubset<T, BlogPostDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BlogPosts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogPostUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BlogPosts
     * const blogPost = await prisma.blogPost.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BlogPostUpdateManyArgs>(args: SelectSubset<T, BlogPostUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BlogPost.
     * @param {BlogPostUpsertArgs} args - Arguments to update or create a BlogPost.
     * @example
     * // Update or create a BlogPost
     * const blogPost = await prisma.blogPost.upsert({
     *   create: {
     *     // ... data to create a BlogPost
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BlogPost we want to update
     *   }
     * })
     */
    upsert<T extends BlogPostUpsertArgs>(args: SelectSubset<T, BlogPostUpsertArgs<ExtArgs>>): Prisma__BlogPostClient<$Result.GetResult<Prisma.$BlogPostPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of BlogPosts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogPostCountArgs} args - Arguments to filter BlogPosts to count.
     * @example
     * // Count the number of BlogPosts
     * const count = await prisma.blogPost.count({
     *   where: {
     *     // ... the filter for the BlogPosts we want to count
     *   }
     * })
    **/
    count<T extends BlogPostCountArgs>(
      args?: Subset<T, BlogPostCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BlogPostCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BlogPost.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogPostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BlogPostAggregateArgs>(args: Subset<T, BlogPostAggregateArgs>): Prisma.PrismaPromise<GetBlogPostAggregateType<T>>

    /**
     * Group by BlogPost.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogPostGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BlogPostGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BlogPostGroupByArgs['orderBy'] }
        : { orderBy?: BlogPostGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BlogPostGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBlogPostGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BlogPost model
   */
  readonly fields: BlogPostFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BlogPost.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BlogPostClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BlogPost model
   */ 
  interface BlogPostFieldRefs {
    readonly id: FieldRef<"BlogPost", 'Int'>
    readonly title: FieldRef<"BlogPost", 'String'>
    readonly content: FieldRef<"BlogPost", 'String'>
    readonly excerpt: FieldRef<"BlogPost", 'String'>
    readonly category: FieldRef<"BlogPost", 'String'>
    readonly tags: FieldRef<"BlogPost", 'String[]'>
    readonly imageUrl: FieldRef<"BlogPost", 'String'>
    readonly author: FieldRef<"BlogPost", 'String'>
    readonly published: FieldRef<"BlogPost", 'Boolean'>
    readonly createdAt: FieldRef<"BlogPost", 'DateTime'>
    readonly updatedAt: FieldRef<"BlogPost", 'DateTime'>
    readonly publishedAt: FieldRef<"BlogPost", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BlogPost findUnique
   */
  export type BlogPostFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlogPost
     */
    select?: BlogPostSelect<ExtArgs> | null
    /**
     * Filter, which BlogPost to fetch.
     */
    where: BlogPostWhereUniqueInput
  }

  /**
   * BlogPost findUniqueOrThrow
   */
  export type BlogPostFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlogPost
     */
    select?: BlogPostSelect<ExtArgs> | null
    /**
     * Filter, which BlogPost to fetch.
     */
    where: BlogPostWhereUniqueInput
  }

  /**
   * BlogPost findFirst
   */
  export type BlogPostFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlogPost
     */
    select?: BlogPostSelect<ExtArgs> | null
    /**
     * Filter, which BlogPost to fetch.
     */
    where?: BlogPostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BlogPosts to fetch.
     */
    orderBy?: BlogPostOrderByWithRelationInput | BlogPostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BlogPosts.
     */
    cursor?: BlogPostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BlogPosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BlogPosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BlogPosts.
     */
    distinct?: BlogPostScalarFieldEnum | BlogPostScalarFieldEnum[]
  }

  /**
   * BlogPost findFirstOrThrow
   */
  export type BlogPostFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlogPost
     */
    select?: BlogPostSelect<ExtArgs> | null
    /**
     * Filter, which BlogPost to fetch.
     */
    where?: BlogPostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BlogPosts to fetch.
     */
    orderBy?: BlogPostOrderByWithRelationInput | BlogPostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BlogPosts.
     */
    cursor?: BlogPostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BlogPosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BlogPosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BlogPosts.
     */
    distinct?: BlogPostScalarFieldEnum | BlogPostScalarFieldEnum[]
  }

  /**
   * BlogPost findMany
   */
  export type BlogPostFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlogPost
     */
    select?: BlogPostSelect<ExtArgs> | null
    /**
     * Filter, which BlogPosts to fetch.
     */
    where?: BlogPostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BlogPosts to fetch.
     */
    orderBy?: BlogPostOrderByWithRelationInput | BlogPostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BlogPosts.
     */
    cursor?: BlogPostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BlogPosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BlogPosts.
     */
    skip?: number
    distinct?: BlogPostScalarFieldEnum | BlogPostScalarFieldEnum[]
  }

  /**
   * BlogPost create
   */
  export type BlogPostCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlogPost
     */
    select?: BlogPostSelect<ExtArgs> | null
    /**
     * The data needed to create a BlogPost.
     */
    data: XOR<BlogPostCreateInput, BlogPostUncheckedCreateInput>
  }

  /**
   * BlogPost createMany
   */
  export type BlogPostCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BlogPosts.
     */
    data: BlogPostCreateManyInput | BlogPostCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BlogPost createManyAndReturn
   */
  export type BlogPostCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlogPost
     */
    select?: BlogPostSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many BlogPosts.
     */
    data: BlogPostCreateManyInput | BlogPostCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BlogPost update
   */
  export type BlogPostUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlogPost
     */
    select?: BlogPostSelect<ExtArgs> | null
    /**
     * The data needed to update a BlogPost.
     */
    data: XOR<BlogPostUpdateInput, BlogPostUncheckedUpdateInput>
    /**
     * Choose, which BlogPost to update.
     */
    where: BlogPostWhereUniqueInput
  }

  /**
   * BlogPost updateMany
   */
  export type BlogPostUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BlogPosts.
     */
    data: XOR<BlogPostUpdateManyMutationInput, BlogPostUncheckedUpdateManyInput>
    /**
     * Filter which BlogPosts to update
     */
    where?: BlogPostWhereInput
  }

  /**
   * BlogPost upsert
   */
  export type BlogPostUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlogPost
     */
    select?: BlogPostSelect<ExtArgs> | null
    /**
     * The filter to search for the BlogPost to update in case it exists.
     */
    where: BlogPostWhereUniqueInput
    /**
     * In case the BlogPost found by the `where` argument doesn't exist, create a new BlogPost with this data.
     */
    create: XOR<BlogPostCreateInput, BlogPostUncheckedCreateInput>
    /**
     * In case the BlogPost was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BlogPostUpdateInput, BlogPostUncheckedUpdateInput>
  }

  /**
   * BlogPost delete
   */
  export type BlogPostDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlogPost
     */
    select?: BlogPostSelect<ExtArgs> | null
    /**
     * Filter which BlogPost to delete.
     */
    where: BlogPostWhereUniqueInput
  }

  /**
   * BlogPost deleteMany
   */
  export type BlogPostDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BlogPosts to delete
     */
    where?: BlogPostWhereInput
  }

  /**
   * BlogPost without action
   */
  export type BlogPostDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlogPost
     */
    select?: BlogPostSelect<ExtArgs> | null
  }


  /**
   * Model ScheduledEvent
   */

  export type AggregateScheduledEvent = {
    _count: ScheduledEventCountAggregateOutputType | null
    _avg: ScheduledEventAvgAggregateOutputType | null
    _sum: ScheduledEventSumAggregateOutputType | null
    _min: ScheduledEventMinAggregateOutputType | null
    _max: ScheduledEventMaxAggregateOutputType | null
  }

  export type ScheduledEventAvgAggregateOutputType = {
    duration: number | null
    workoutId: number | null
    meditationId: number | null
    yogaId: number | null
  }

  export type ScheduledEventSumAggregateOutputType = {
    duration: number | null
    workoutId: number | null
    meditationId: number | null
    yogaId: number | null
  }

  export type ScheduledEventMinAggregateOutputType = {
    id: string | null
    userId: string | null
    title: string | null
    date: Date | null
    time: string | null
    duration: number | null
    eventType: string | null
    completed: boolean | null
    notes: string | null
    workoutId: number | null
    meditationId: number | null
    yogaId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ScheduledEventMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    title: string | null
    date: Date | null
    time: string | null
    duration: number | null
    eventType: string | null
    completed: boolean | null
    notes: string | null
    workoutId: number | null
    meditationId: number | null
    yogaId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ScheduledEventCountAggregateOutputType = {
    id: number
    userId: number
    title: number
    date: number
    time: number
    duration: number
    eventType: number
    completed: number
    notes: number
    workoutId: number
    meditationId: number
    yogaId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ScheduledEventAvgAggregateInputType = {
    duration?: true
    workoutId?: true
    meditationId?: true
    yogaId?: true
  }

  export type ScheduledEventSumAggregateInputType = {
    duration?: true
    workoutId?: true
    meditationId?: true
    yogaId?: true
  }

  export type ScheduledEventMinAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    date?: true
    time?: true
    duration?: true
    eventType?: true
    completed?: true
    notes?: true
    workoutId?: true
    meditationId?: true
    yogaId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ScheduledEventMaxAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    date?: true
    time?: true
    duration?: true
    eventType?: true
    completed?: true
    notes?: true
    workoutId?: true
    meditationId?: true
    yogaId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ScheduledEventCountAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    date?: true
    time?: true
    duration?: true
    eventType?: true
    completed?: true
    notes?: true
    workoutId?: true
    meditationId?: true
    yogaId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ScheduledEventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScheduledEvent to aggregate.
     */
    where?: ScheduledEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScheduledEvents to fetch.
     */
    orderBy?: ScheduledEventOrderByWithRelationInput | ScheduledEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ScheduledEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScheduledEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScheduledEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ScheduledEvents
    **/
    _count?: true | ScheduledEventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ScheduledEventAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ScheduledEventSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ScheduledEventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ScheduledEventMaxAggregateInputType
  }

  export type GetScheduledEventAggregateType<T extends ScheduledEventAggregateArgs> = {
        [P in keyof T & keyof AggregateScheduledEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateScheduledEvent[P]>
      : GetScalarType<T[P], AggregateScheduledEvent[P]>
  }




  export type ScheduledEventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduledEventWhereInput
    orderBy?: ScheduledEventOrderByWithAggregationInput | ScheduledEventOrderByWithAggregationInput[]
    by: ScheduledEventScalarFieldEnum[] | ScheduledEventScalarFieldEnum
    having?: ScheduledEventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ScheduledEventCountAggregateInputType | true
    _avg?: ScheduledEventAvgAggregateInputType
    _sum?: ScheduledEventSumAggregateInputType
    _min?: ScheduledEventMinAggregateInputType
    _max?: ScheduledEventMaxAggregateInputType
  }

  export type ScheduledEventGroupByOutputType = {
    id: string
    userId: string
    title: string
    date: Date
    time: string
    duration: number
    eventType: string
    completed: boolean
    notes: string | null
    workoutId: number | null
    meditationId: number | null
    yogaId: number | null
    createdAt: Date
    updatedAt: Date
    _count: ScheduledEventCountAggregateOutputType | null
    _avg: ScheduledEventAvgAggregateOutputType | null
    _sum: ScheduledEventSumAggregateOutputType | null
    _min: ScheduledEventMinAggregateOutputType | null
    _max: ScheduledEventMaxAggregateOutputType | null
  }

  type GetScheduledEventGroupByPayload<T extends ScheduledEventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ScheduledEventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ScheduledEventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ScheduledEventGroupByOutputType[P]>
            : GetScalarType<T[P], ScheduledEventGroupByOutputType[P]>
        }
      >
    >


  export type ScheduledEventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    title?: boolean
    date?: boolean
    time?: boolean
    duration?: boolean
    eventType?: boolean
    completed?: boolean
    notes?: boolean
    workoutId?: boolean
    meditationId?: boolean
    yogaId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workout?: boolean | ScheduledEvent$workoutArgs<ExtArgs>
    meditation?: boolean | ScheduledEvent$meditationArgs<ExtArgs>
    yoga?: boolean | ScheduledEvent$yogaArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scheduledEvent"]>

  export type ScheduledEventSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    title?: boolean
    date?: boolean
    time?: boolean
    duration?: boolean
    eventType?: boolean
    completed?: boolean
    notes?: boolean
    workoutId?: boolean
    meditationId?: boolean
    yogaId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    workout?: boolean | ScheduledEvent$workoutArgs<ExtArgs>
    meditation?: boolean | ScheduledEvent$meditationArgs<ExtArgs>
    yoga?: boolean | ScheduledEvent$yogaArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scheduledEvent"]>

  export type ScheduledEventSelectScalar = {
    id?: boolean
    userId?: boolean
    title?: boolean
    date?: boolean
    time?: boolean
    duration?: boolean
    eventType?: boolean
    completed?: boolean
    notes?: boolean
    workoutId?: boolean
    meditationId?: boolean
    yogaId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ScheduledEventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workout?: boolean | ScheduledEvent$workoutArgs<ExtArgs>
    meditation?: boolean | ScheduledEvent$meditationArgs<ExtArgs>
    yoga?: boolean | ScheduledEvent$yogaArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ScheduledEventIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workout?: boolean | ScheduledEvent$workoutArgs<ExtArgs>
    meditation?: boolean | ScheduledEvent$meditationArgs<ExtArgs>
    yoga?: boolean | ScheduledEvent$yogaArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ScheduledEventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ScheduledEvent"
    objects: {
      workout: Prisma.$WorkoutPayload<ExtArgs> | null
      meditation: Prisma.$MeditationSessionPayload<ExtArgs> | null
      yoga: Prisma.$YogaSessionPayload<ExtArgs> | null
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      title: string
      date: Date
      time: string
      duration: number
      eventType: string
      completed: boolean
      notes: string | null
      workoutId: number | null
      meditationId: number | null
      yogaId: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["scheduledEvent"]>
    composites: {}
  }

  type ScheduledEventGetPayload<S extends boolean | null | undefined | ScheduledEventDefaultArgs> = $Result.GetResult<Prisma.$ScheduledEventPayload, S>

  type ScheduledEventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ScheduledEventFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ScheduledEventCountAggregateInputType | true
    }

  export interface ScheduledEventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ScheduledEvent'], meta: { name: 'ScheduledEvent' } }
    /**
     * Find zero or one ScheduledEvent that matches the filter.
     * @param {ScheduledEventFindUniqueArgs} args - Arguments to find a ScheduledEvent
     * @example
     * // Get one ScheduledEvent
     * const scheduledEvent = await prisma.scheduledEvent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ScheduledEventFindUniqueArgs>(args: SelectSubset<T, ScheduledEventFindUniqueArgs<ExtArgs>>): Prisma__ScheduledEventClient<$Result.GetResult<Prisma.$ScheduledEventPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ScheduledEvent that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ScheduledEventFindUniqueOrThrowArgs} args - Arguments to find a ScheduledEvent
     * @example
     * // Get one ScheduledEvent
     * const scheduledEvent = await prisma.scheduledEvent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ScheduledEventFindUniqueOrThrowArgs>(args: SelectSubset<T, ScheduledEventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ScheduledEventClient<$Result.GetResult<Prisma.$ScheduledEventPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ScheduledEvent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduledEventFindFirstArgs} args - Arguments to find a ScheduledEvent
     * @example
     * // Get one ScheduledEvent
     * const scheduledEvent = await prisma.scheduledEvent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ScheduledEventFindFirstArgs>(args?: SelectSubset<T, ScheduledEventFindFirstArgs<ExtArgs>>): Prisma__ScheduledEventClient<$Result.GetResult<Prisma.$ScheduledEventPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ScheduledEvent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduledEventFindFirstOrThrowArgs} args - Arguments to find a ScheduledEvent
     * @example
     * // Get one ScheduledEvent
     * const scheduledEvent = await prisma.scheduledEvent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ScheduledEventFindFirstOrThrowArgs>(args?: SelectSubset<T, ScheduledEventFindFirstOrThrowArgs<ExtArgs>>): Prisma__ScheduledEventClient<$Result.GetResult<Prisma.$ScheduledEventPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ScheduledEvents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduledEventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ScheduledEvents
     * const scheduledEvents = await prisma.scheduledEvent.findMany()
     * 
     * // Get first 10 ScheduledEvents
     * const scheduledEvents = await prisma.scheduledEvent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const scheduledEventWithIdOnly = await prisma.scheduledEvent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ScheduledEventFindManyArgs>(args?: SelectSubset<T, ScheduledEventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScheduledEventPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ScheduledEvent.
     * @param {ScheduledEventCreateArgs} args - Arguments to create a ScheduledEvent.
     * @example
     * // Create one ScheduledEvent
     * const ScheduledEvent = await prisma.scheduledEvent.create({
     *   data: {
     *     // ... data to create a ScheduledEvent
     *   }
     * })
     * 
     */
    create<T extends ScheduledEventCreateArgs>(args: SelectSubset<T, ScheduledEventCreateArgs<ExtArgs>>): Prisma__ScheduledEventClient<$Result.GetResult<Prisma.$ScheduledEventPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ScheduledEvents.
     * @param {ScheduledEventCreateManyArgs} args - Arguments to create many ScheduledEvents.
     * @example
     * // Create many ScheduledEvents
     * const scheduledEvent = await prisma.scheduledEvent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ScheduledEventCreateManyArgs>(args?: SelectSubset<T, ScheduledEventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ScheduledEvents and returns the data saved in the database.
     * @param {ScheduledEventCreateManyAndReturnArgs} args - Arguments to create many ScheduledEvents.
     * @example
     * // Create many ScheduledEvents
     * const scheduledEvent = await prisma.scheduledEvent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ScheduledEvents and only return the `id`
     * const scheduledEventWithIdOnly = await prisma.scheduledEvent.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ScheduledEventCreateManyAndReturnArgs>(args?: SelectSubset<T, ScheduledEventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScheduledEventPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ScheduledEvent.
     * @param {ScheduledEventDeleteArgs} args - Arguments to delete one ScheduledEvent.
     * @example
     * // Delete one ScheduledEvent
     * const ScheduledEvent = await prisma.scheduledEvent.delete({
     *   where: {
     *     // ... filter to delete one ScheduledEvent
     *   }
     * })
     * 
     */
    delete<T extends ScheduledEventDeleteArgs>(args: SelectSubset<T, ScheduledEventDeleteArgs<ExtArgs>>): Prisma__ScheduledEventClient<$Result.GetResult<Prisma.$ScheduledEventPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ScheduledEvent.
     * @param {ScheduledEventUpdateArgs} args - Arguments to update one ScheduledEvent.
     * @example
     * // Update one ScheduledEvent
     * const scheduledEvent = await prisma.scheduledEvent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ScheduledEventUpdateArgs>(args: SelectSubset<T, ScheduledEventUpdateArgs<ExtArgs>>): Prisma__ScheduledEventClient<$Result.GetResult<Prisma.$ScheduledEventPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ScheduledEvents.
     * @param {ScheduledEventDeleteManyArgs} args - Arguments to filter ScheduledEvents to delete.
     * @example
     * // Delete a few ScheduledEvents
     * const { count } = await prisma.scheduledEvent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ScheduledEventDeleteManyArgs>(args?: SelectSubset<T, ScheduledEventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ScheduledEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduledEventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ScheduledEvents
     * const scheduledEvent = await prisma.scheduledEvent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ScheduledEventUpdateManyArgs>(args: SelectSubset<T, ScheduledEventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ScheduledEvent.
     * @param {ScheduledEventUpsertArgs} args - Arguments to update or create a ScheduledEvent.
     * @example
     * // Update or create a ScheduledEvent
     * const scheduledEvent = await prisma.scheduledEvent.upsert({
     *   create: {
     *     // ... data to create a ScheduledEvent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ScheduledEvent we want to update
     *   }
     * })
     */
    upsert<T extends ScheduledEventUpsertArgs>(args: SelectSubset<T, ScheduledEventUpsertArgs<ExtArgs>>): Prisma__ScheduledEventClient<$Result.GetResult<Prisma.$ScheduledEventPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ScheduledEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduledEventCountArgs} args - Arguments to filter ScheduledEvents to count.
     * @example
     * // Count the number of ScheduledEvents
     * const count = await prisma.scheduledEvent.count({
     *   where: {
     *     // ... the filter for the ScheduledEvents we want to count
     *   }
     * })
    **/
    count<T extends ScheduledEventCountArgs>(
      args?: Subset<T, ScheduledEventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ScheduledEventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ScheduledEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduledEventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ScheduledEventAggregateArgs>(args: Subset<T, ScheduledEventAggregateArgs>): Prisma.PrismaPromise<GetScheduledEventAggregateType<T>>

    /**
     * Group by ScheduledEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduledEventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ScheduledEventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ScheduledEventGroupByArgs['orderBy'] }
        : { orderBy?: ScheduledEventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ScheduledEventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScheduledEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ScheduledEvent model
   */
  readonly fields: ScheduledEventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ScheduledEvent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ScheduledEventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    workout<T extends ScheduledEvent$workoutArgs<ExtArgs> = {}>(args?: Subset<T, ScheduledEvent$workoutArgs<ExtArgs>>): Prisma__WorkoutClient<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    meditation<T extends ScheduledEvent$meditationArgs<ExtArgs> = {}>(args?: Subset<T, ScheduledEvent$meditationArgs<ExtArgs>>): Prisma__MeditationSessionClient<$Result.GetResult<Prisma.$MeditationSessionPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    yoga<T extends ScheduledEvent$yogaArgs<ExtArgs> = {}>(args?: Subset<T, ScheduledEvent$yogaArgs<ExtArgs>>): Prisma__YogaSessionClient<$Result.GetResult<Prisma.$YogaSessionPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ScheduledEvent model
   */ 
  interface ScheduledEventFieldRefs {
    readonly id: FieldRef<"ScheduledEvent", 'String'>
    readonly userId: FieldRef<"ScheduledEvent", 'String'>
    readonly title: FieldRef<"ScheduledEvent", 'String'>
    readonly date: FieldRef<"ScheduledEvent", 'DateTime'>
    readonly time: FieldRef<"ScheduledEvent", 'String'>
    readonly duration: FieldRef<"ScheduledEvent", 'Int'>
    readonly eventType: FieldRef<"ScheduledEvent", 'String'>
    readonly completed: FieldRef<"ScheduledEvent", 'Boolean'>
    readonly notes: FieldRef<"ScheduledEvent", 'String'>
    readonly workoutId: FieldRef<"ScheduledEvent", 'Int'>
    readonly meditationId: FieldRef<"ScheduledEvent", 'Int'>
    readonly yogaId: FieldRef<"ScheduledEvent", 'Int'>
    readonly createdAt: FieldRef<"ScheduledEvent", 'DateTime'>
    readonly updatedAt: FieldRef<"ScheduledEvent", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ScheduledEvent findUnique
   */
  export type ScheduledEventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduledEvent
     */
    select?: ScheduledEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduledEventInclude<ExtArgs> | null
    /**
     * Filter, which ScheduledEvent to fetch.
     */
    where: ScheduledEventWhereUniqueInput
  }

  /**
   * ScheduledEvent findUniqueOrThrow
   */
  export type ScheduledEventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduledEvent
     */
    select?: ScheduledEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduledEventInclude<ExtArgs> | null
    /**
     * Filter, which ScheduledEvent to fetch.
     */
    where: ScheduledEventWhereUniqueInput
  }

  /**
   * ScheduledEvent findFirst
   */
  export type ScheduledEventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduledEvent
     */
    select?: ScheduledEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduledEventInclude<ExtArgs> | null
    /**
     * Filter, which ScheduledEvent to fetch.
     */
    where?: ScheduledEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScheduledEvents to fetch.
     */
    orderBy?: ScheduledEventOrderByWithRelationInput | ScheduledEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScheduledEvents.
     */
    cursor?: ScheduledEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScheduledEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScheduledEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScheduledEvents.
     */
    distinct?: ScheduledEventScalarFieldEnum | ScheduledEventScalarFieldEnum[]
  }

  /**
   * ScheduledEvent findFirstOrThrow
   */
  export type ScheduledEventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduledEvent
     */
    select?: ScheduledEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduledEventInclude<ExtArgs> | null
    /**
     * Filter, which ScheduledEvent to fetch.
     */
    where?: ScheduledEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScheduledEvents to fetch.
     */
    orderBy?: ScheduledEventOrderByWithRelationInput | ScheduledEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScheduledEvents.
     */
    cursor?: ScheduledEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScheduledEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScheduledEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScheduledEvents.
     */
    distinct?: ScheduledEventScalarFieldEnum | ScheduledEventScalarFieldEnum[]
  }

  /**
   * ScheduledEvent findMany
   */
  export type ScheduledEventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduledEvent
     */
    select?: ScheduledEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduledEventInclude<ExtArgs> | null
    /**
     * Filter, which ScheduledEvents to fetch.
     */
    where?: ScheduledEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScheduledEvents to fetch.
     */
    orderBy?: ScheduledEventOrderByWithRelationInput | ScheduledEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ScheduledEvents.
     */
    cursor?: ScheduledEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScheduledEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScheduledEvents.
     */
    skip?: number
    distinct?: ScheduledEventScalarFieldEnum | ScheduledEventScalarFieldEnum[]
  }

  /**
   * ScheduledEvent create
   */
  export type ScheduledEventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduledEvent
     */
    select?: ScheduledEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduledEventInclude<ExtArgs> | null
    /**
     * The data needed to create a ScheduledEvent.
     */
    data: XOR<ScheduledEventCreateInput, ScheduledEventUncheckedCreateInput>
  }

  /**
   * ScheduledEvent createMany
   */
  export type ScheduledEventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ScheduledEvents.
     */
    data: ScheduledEventCreateManyInput | ScheduledEventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ScheduledEvent createManyAndReturn
   */
  export type ScheduledEventCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduledEvent
     */
    select?: ScheduledEventSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ScheduledEvents.
     */
    data: ScheduledEventCreateManyInput | ScheduledEventCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduledEventIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ScheduledEvent update
   */
  export type ScheduledEventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduledEvent
     */
    select?: ScheduledEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduledEventInclude<ExtArgs> | null
    /**
     * The data needed to update a ScheduledEvent.
     */
    data: XOR<ScheduledEventUpdateInput, ScheduledEventUncheckedUpdateInput>
    /**
     * Choose, which ScheduledEvent to update.
     */
    where: ScheduledEventWhereUniqueInput
  }

  /**
   * ScheduledEvent updateMany
   */
  export type ScheduledEventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ScheduledEvents.
     */
    data: XOR<ScheduledEventUpdateManyMutationInput, ScheduledEventUncheckedUpdateManyInput>
    /**
     * Filter which ScheduledEvents to update
     */
    where?: ScheduledEventWhereInput
  }

  /**
   * ScheduledEvent upsert
   */
  export type ScheduledEventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduledEvent
     */
    select?: ScheduledEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduledEventInclude<ExtArgs> | null
    /**
     * The filter to search for the ScheduledEvent to update in case it exists.
     */
    where: ScheduledEventWhereUniqueInput
    /**
     * In case the ScheduledEvent found by the `where` argument doesn't exist, create a new ScheduledEvent with this data.
     */
    create: XOR<ScheduledEventCreateInput, ScheduledEventUncheckedCreateInput>
    /**
     * In case the ScheduledEvent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ScheduledEventUpdateInput, ScheduledEventUncheckedUpdateInput>
  }

  /**
   * ScheduledEvent delete
   */
  export type ScheduledEventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduledEvent
     */
    select?: ScheduledEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduledEventInclude<ExtArgs> | null
    /**
     * Filter which ScheduledEvent to delete.
     */
    where: ScheduledEventWhereUniqueInput
  }

  /**
   * ScheduledEvent deleteMany
   */
  export type ScheduledEventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScheduledEvents to delete
     */
    where?: ScheduledEventWhereInput
  }

  /**
   * ScheduledEvent.workout
   */
  export type ScheduledEvent$workoutArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutInclude<ExtArgs> | null
    where?: WorkoutWhereInput
  }

  /**
   * ScheduledEvent.meditation
   */
  export type ScheduledEvent$meditationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeditationSession
     */
    select?: MeditationSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeditationSessionInclude<ExtArgs> | null
    where?: MeditationSessionWhereInput
  }

  /**
   * ScheduledEvent.yoga
   */
  export type ScheduledEvent$yogaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YogaSession
     */
    select?: YogaSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YogaSessionInclude<ExtArgs> | null
    where?: YogaSessionWhereInput
  }

  /**
   * ScheduledEvent without action
   */
  export type ScheduledEventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduledEvent
     */
    select?: ScheduledEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduledEventInclude<ExtArgs> | null
  }


  /**
   * Model WorkoutHistory
   */

  export type AggregateWorkoutHistory = {
    _count: WorkoutHistoryCountAggregateOutputType | null
    _avg: WorkoutHistoryAvgAggregateOutputType | null
    _sum: WorkoutHistorySumAggregateOutputType | null
    _min: WorkoutHistoryMinAggregateOutputType | null
    _max: WorkoutHistoryMaxAggregateOutputType | null
  }

  export type WorkoutHistoryAvgAggregateOutputType = {
    workoutId: number | null
    duration: number | null
    rating: number | null
  }

  export type WorkoutHistorySumAggregateOutputType = {
    workoutId: number | null
    duration: number | null
    rating: number | null
  }

  export type WorkoutHistoryMinAggregateOutputType = {
    id: string | null
    userId: string | null
    workoutId: number | null
    completedAt: Date | null
    duration: number | null
    notes: string | null
    rating: number | null
  }

  export type WorkoutHistoryMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    workoutId: number | null
    completedAt: Date | null
    duration: number | null
    notes: string | null
    rating: number | null
  }

  export type WorkoutHistoryCountAggregateOutputType = {
    id: number
    userId: number
    workoutId: number
    completedAt: number
    duration: number
    notes: number
    rating: number
    exerciseResults: number
    _all: number
  }


  export type WorkoutHistoryAvgAggregateInputType = {
    workoutId?: true
    duration?: true
    rating?: true
  }

  export type WorkoutHistorySumAggregateInputType = {
    workoutId?: true
    duration?: true
    rating?: true
  }

  export type WorkoutHistoryMinAggregateInputType = {
    id?: true
    userId?: true
    workoutId?: true
    completedAt?: true
    duration?: true
    notes?: true
    rating?: true
  }

  export type WorkoutHistoryMaxAggregateInputType = {
    id?: true
    userId?: true
    workoutId?: true
    completedAt?: true
    duration?: true
    notes?: true
    rating?: true
  }

  export type WorkoutHistoryCountAggregateInputType = {
    id?: true
    userId?: true
    workoutId?: true
    completedAt?: true
    duration?: true
    notes?: true
    rating?: true
    exerciseResults?: true
    _all?: true
  }

  export type WorkoutHistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkoutHistory to aggregate.
     */
    where?: WorkoutHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutHistories to fetch.
     */
    orderBy?: WorkoutHistoryOrderByWithRelationInput | WorkoutHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkoutHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkoutHistories
    **/
    _count?: true | WorkoutHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkoutHistoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkoutHistorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkoutHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkoutHistoryMaxAggregateInputType
  }

  export type GetWorkoutHistoryAggregateType<T extends WorkoutHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkoutHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkoutHistory[P]>
      : GetScalarType<T[P], AggregateWorkoutHistory[P]>
  }




  export type WorkoutHistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutHistoryWhereInput
    orderBy?: WorkoutHistoryOrderByWithAggregationInput | WorkoutHistoryOrderByWithAggregationInput[]
    by: WorkoutHistoryScalarFieldEnum[] | WorkoutHistoryScalarFieldEnum
    having?: WorkoutHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkoutHistoryCountAggregateInputType | true
    _avg?: WorkoutHistoryAvgAggregateInputType
    _sum?: WorkoutHistorySumAggregateInputType
    _min?: WorkoutHistoryMinAggregateInputType
    _max?: WorkoutHistoryMaxAggregateInputType
  }

  export type WorkoutHistoryGroupByOutputType = {
    id: string
    userId: string
    workoutId: number
    completedAt: Date
    duration: number
    notes: string | null
    rating: number | null
    exerciseResults: JsonValue | null
    _count: WorkoutHistoryCountAggregateOutputType | null
    _avg: WorkoutHistoryAvgAggregateOutputType | null
    _sum: WorkoutHistorySumAggregateOutputType | null
    _min: WorkoutHistoryMinAggregateOutputType | null
    _max: WorkoutHistoryMaxAggregateOutputType | null
  }

  type GetWorkoutHistoryGroupByPayload<T extends WorkoutHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkoutHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkoutHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkoutHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], WorkoutHistoryGroupByOutputType[P]>
        }
      >
    >


  export type WorkoutHistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    workoutId?: boolean
    completedAt?: boolean
    duration?: boolean
    notes?: boolean
    rating?: boolean
    exerciseResults?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    workout?: boolean | WorkoutDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workoutHistory"]>

  export type WorkoutHistorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    workoutId?: boolean
    completedAt?: boolean
    duration?: boolean
    notes?: boolean
    rating?: boolean
    exerciseResults?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    workout?: boolean | WorkoutDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workoutHistory"]>

  export type WorkoutHistorySelectScalar = {
    id?: boolean
    userId?: boolean
    workoutId?: boolean
    completedAt?: boolean
    duration?: boolean
    notes?: boolean
    rating?: boolean
    exerciseResults?: boolean
  }

  export type WorkoutHistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    workout?: boolean | WorkoutDefaultArgs<ExtArgs>
  }
  export type WorkoutHistoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    workout?: boolean | WorkoutDefaultArgs<ExtArgs>
  }

  export type $WorkoutHistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkoutHistory"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      workout: Prisma.$WorkoutPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      workoutId: number
      completedAt: Date
      duration: number
      notes: string | null
      rating: number | null
      exerciseResults: Prisma.JsonValue | null
    }, ExtArgs["result"]["workoutHistory"]>
    composites: {}
  }

  type WorkoutHistoryGetPayload<S extends boolean | null | undefined | WorkoutHistoryDefaultArgs> = $Result.GetResult<Prisma.$WorkoutHistoryPayload, S>

  type WorkoutHistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WorkoutHistoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WorkoutHistoryCountAggregateInputType | true
    }

  export interface WorkoutHistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkoutHistory'], meta: { name: 'WorkoutHistory' } }
    /**
     * Find zero or one WorkoutHistory that matches the filter.
     * @param {WorkoutHistoryFindUniqueArgs} args - Arguments to find a WorkoutHistory
     * @example
     * // Get one WorkoutHistory
     * const workoutHistory = await prisma.workoutHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkoutHistoryFindUniqueArgs>(args: SelectSubset<T, WorkoutHistoryFindUniqueArgs<ExtArgs>>): Prisma__WorkoutHistoryClient<$Result.GetResult<Prisma.$WorkoutHistoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one WorkoutHistory that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {WorkoutHistoryFindUniqueOrThrowArgs} args - Arguments to find a WorkoutHistory
     * @example
     * // Get one WorkoutHistory
     * const workoutHistory = await prisma.workoutHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkoutHistoryFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkoutHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkoutHistoryClient<$Result.GetResult<Prisma.$WorkoutHistoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first WorkoutHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutHistoryFindFirstArgs} args - Arguments to find a WorkoutHistory
     * @example
     * // Get one WorkoutHistory
     * const workoutHistory = await prisma.workoutHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkoutHistoryFindFirstArgs>(args?: SelectSubset<T, WorkoutHistoryFindFirstArgs<ExtArgs>>): Prisma__WorkoutHistoryClient<$Result.GetResult<Prisma.$WorkoutHistoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first WorkoutHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutHistoryFindFirstOrThrowArgs} args - Arguments to find a WorkoutHistory
     * @example
     * // Get one WorkoutHistory
     * const workoutHistory = await prisma.workoutHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkoutHistoryFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkoutHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkoutHistoryClient<$Result.GetResult<Prisma.$WorkoutHistoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more WorkoutHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkoutHistories
     * const workoutHistories = await prisma.workoutHistory.findMany()
     * 
     * // Get first 10 WorkoutHistories
     * const workoutHistories = await prisma.workoutHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workoutHistoryWithIdOnly = await prisma.workoutHistory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkoutHistoryFindManyArgs>(args?: SelectSubset<T, WorkoutHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutHistoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a WorkoutHistory.
     * @param {WorkoutHistoryCreateArgs} args - Arguments to create a WorkoutHistory.
     * @example
     * // Create one WorkoutHistory
     * const WorkoutHistory = await prisma.workoutHistory.create({
     *   data: {
     *     // ... data to create a WorkoutHistory
     *   }
     * })
     * 
     */
    create<T extends WorkoutHistoryCreateArgs>(args: SelectSubset<T, WorkoutHistoryCreateArgs<ExtArgs>>): Prisma__WorkoutHistoryClient<$Result.GetResult<Prisma.$WorkoutHistoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many WorkoutHistories.
     * @param {WorkoutHistoryCreateManyArgs} args - Arguments to create many WorkoutHistories.
     * @example
     * // Create many WorkoutHistories
     * const workoutHistory = await prisma.workoutHistory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkoutHistoryCreateManyArgs>(args?: SelectSubset<T, WorkoutHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkoutHistories and returns the data saved in the database.
     * @param {WorkoutHistoryCreateManyAndReturnArgs} args - Arguments to create many WorkoutHistories.
     * @example
     * // Create many WorkoutHistories
     * const workoutHistory = await prisma.workoutHistory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkoutHistories and only return the `id`
     * const workoutHistoryWithIdOnly = await prisma.workoutHistory.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkoutHistoryCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkoutHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutHistoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a WorkoutHistory.
     * @param {WorkoutHistoryDeleteArgs} args - Arguments to delete one WorkoutHistory.
     * @example
     * // Delete one WorkoutHistory
     * const WorkoutHistory = await prisma.workoutHistory.delete({
     *   where: {
     *     // ... filter to delete one WorkoutHistory
     *   }
     * })
     * 
     */
    delete<T extends WorkoutHistoryDeleteArgs>(args: SelectSubset<T, WorkoutHistoryDeleteArgs<ExtArgs>>): Prisma__WorkoutHistoryClient<$Result.GetResult<Prisma.$WorkoutHistoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one WorkoutHistory.
     * @param {WorkoutHistoryUpdateArgs} args - Arguments to update one WorkoutHistory.
     * @example
     * // Update one WorkoutHistory
     * const workoutHistory = await prisma.workoutHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkoutHistoryUpdateArgs>(args: SelectSubset<T, WorkoutHistoryUpdateArgs<ExtArgs>>): Prisma__WorkoutHistoryClient<$Result.GetResult<Prisma.$WorkoutHistoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more WorkoutHistories.
     * @param {WorkoutHistoryDeleteManyArgs} args - Arguments to filter WorkoutHistories to delete.
     * @example
     * // Delete a few WorkoutHistories
     * const { count } = await prisma.workoutHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkoutHistoryDeleteManyArgs>(args?: SelectSubset<T, WorkoutHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkoutHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkoutHistories
     * const workoutHistory = await prisma.workoutHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkoutHistoryUpdateManyArgs>(args: SelectSubset<T, WorkoutHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WorkoutHistory.
     * @param {WorkoutHistoryUpsertArgs} args - Arguments to update or create a WorkoutHistory.
     * @example
     * // Update or create a WorkoutHistory
     * const workoutHistory = await prisma.workoutHistory.upsert({
     *   create: {
     *     // ... data to create a WorkoutHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkoutHistory we want to update
     *   }
     * })
     */
    upsert<T extends WorkoutHistoryUpsertArgs>(args: SelectSubset<T, WorkoutHistoryUpsertArgs<ExtArgs>>): Prisma__WorkoutHistoryClient<$Result.GetResult<Prisma.$WorkoutHistoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of WorkoutHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutHistoryCountArgs} args - Arguments to filter WorkoutHistories to count.
     * @example
     * // Count the number of WorkoutHistories
     * const count = await prisma.workoutHistory.count({
     *   where: {
     *     // ... the filter for the WorkoutHistories we want to count
     *   }
     * })
    **/
    count<T extends WorkoutHistoryCountArgs>(
      args?: Subset<T, WorkoutHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkoutHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkoutHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkoutHistoryAggregateArgs>(args: Subset<T, WorkoutHistoryAggregateArgs>): Prisma.PrismaPromise<GetWorkoutHistoryAggregateType<T>>

    /**
     * Group by WorkoutHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkoutHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkoutHistoryGroupByArgs['orderBy'] }
        : { orderBy?: WorkoutHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkoutHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkoutHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkoutHistory model
   */
  readonly fields: WorkoutHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkoutHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkoutHistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    workout<T extends WorkoutDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkoutDefaultArgs<ExtArgs>>): Prisma__WorkoutClient<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkoutHistory model
   */ 
  interface WorkoutHistoryFieldRefs {
    readonly id: FieldRef<"WorkoutHistory", 'String'>
    readonly userId: FieldRef<"WorkoutHistory", 'String'>
    readonly workoutId: FieldRef<"WorkoutHistory", 'Int'>
    readonly completedAt: FieldRef<"WorkoutHistory", 'DateTime'>
    readonly duration: FieldRef<"WorkoutHistory", 'Int'>
    readonly notes: FieldRef<"WorkoutHistory", 'String'>
    readonly rating: FieldRef<"WorkoutHistory", 'Int'>
    readonly exerciseResults: FieldRef<"WorkoutHistory", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * WorkoutHistory findUnique
   */
  export type WorkoutHistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutHistory
     */
    select?: WorkoutHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutHistoryInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutHistory to fetch.
     */
    where: WorkoutHistoryWhereUniqueInput
  }

  /**
   * WorkoutHistory findUniqueOrThrow
   */
  export type WorkoutHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutHistory
     */
    select?: WorkoutHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutHistoryInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutHistory to fetch.
     */
    where: WorkoutHistoryWhereUniqueInput
  }

  /**
   * WorkoutHistory findFirst
   */
  export type WorkoutHistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutHistory
     */
    select?: WorkoutHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutHistoryInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutHistory to fetch.
     */
    where?: WorkoutHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutHistories to fetch.
     */
    orderBy?: WorkoutHistoryOrderByWithRelationInput | WorkoutHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkoutHistories.
     */
    cursor?: WorkoutHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkoutHistories.
     */
    distinct?: WorkoutHistoryScalarFieldEnum | WorkoutHistoryScalarFieldEnum[]
  }

  /**
   * WorkoutHistory findFirstOrThrow
   */
  export type WorkoutHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutHistory
     */
    select?: WorkoutHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutHistoryInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutHistory to fetch.
     */
    where?: WorkoutHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutHistories to fetch.
     */
    orderBy?: WorkoutHistoryOrderByWithRelationInput | WorkoutHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkoutHistories.
     */
    cursor?: WorkoutHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkoutHistories.
     */
    distinct?: WorkoutHistoryScalarFieldEnum | WorkoutHistoryScalarFieldEnum[]
  }

  /**
   * WorkoutHistory findMany
   */
  export type WorkoutHistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutHistory
     */
    select?: WorkoutHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutHistoryInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutHistories to fetch.
     */
    where?: WorkoutHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutHistories to fetch.
     */
    orderBy?: WorkoutHistoryOrderByWithRelationInput | WorkoutHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkoutHistories.
     */
    cursor?: WorkoutHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutHistories.
     */
    skip?: number
    distinct?: WorkoutHistoryScalarFieldEnum | WorkoutHistoryScalarFieldEnum[]
  }

  /**
   * WorkoutHistory create
   */
  export type WorkoutHistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutHistory
     */
    select?: WorkoutHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutHistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkoutHistory.
     */
    data: XOR<WorkoutHistoryCreateInput, WorkoutHistoryUncheckedCreateInput>
  }

  /**
   * WorkoutHistory createMany
   */
  export type WorkoutHistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkoutHistories.
     */
    data: WorkoutHistoryCreateManyInput | WorkoutHistoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkoutHistory createManyAndReturn
   */
  export type WorkoutHistoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutHistory
     */
    select?: WorkoutHistorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many WorkoutHistories.
     */
    data: WorkoutHistoryCreateManyInput | WorkoutHistoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutHistoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkoutHistory update
   */
  export type WorkoutHistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutHistory
     */
    select?: WorkoutHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutHistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkoutHistory.
     */
    data: XOR<WorkoutHistoryUpdateInput, WorkoutHistoryUncheckedUpdateInput>
    /**
     * Choose, which WorkoutHistory to update.
     */
    where: WorkoutHistoryWhereUniqueInput
  }

  /**
   * WorkoutHistory updateMany
   */
  export type WorkoutHistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkoutHistories.
     */
    data: XOR<WorkoutHistoryUpdateManyMutationInput, WorkoutHistoryUncheckedUpdateManyInput>
    /**
     * Filter which WorkoutHistories to update
     */
    where?: WorkoutHistoryWhereInput
  }

  /**
   * WorkoutHistory upsert
   */
  export type WorkoutHistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutHistory
     */
    select?: WorkoutHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutHistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkoutHistory to update in case it exists.
     */
    where: WorkoutHistoryWhereUniqueInput
    /**
     * In case the WorkoutHistory found by the `where` argument doesn't exist, create a new WorkoutHistory with this data.
     */
    create: XOR<WorkoutHistoryCreateInput, WorkoutHistoryUncheckedCreateInput>
    /**
     * In case the WorkoutHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkoutHistoryUpdateInput, WorkoutHistoryUncheckedUpdateInput>
  }

  /**
   * WorkoutHistory delete
   */
  export type WorkoutHistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutHistory
     */
    select?: WorkoutHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutHistoryInclude<ExtArgs> | null
    /**
     * Filter which WorkoutHistory to delete.
     */
    where: WorkoutHistoryWhereUniqueInput
  }

  /**
   * WorkoutHistory deleteMany
   */
  export type WorkoutHistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkoutHistories to delete
     */
    where?: WorkoutHistoryWhereInput
  }

  /**
   * WorkoutHistory without action
   */
  export type WorkoutHistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutHistory
     */
    select?: WorkoutHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutHistoryInclude<ExtArgs> | null
  }


  /**
   * Model FavoriteWorkout
   */

  export type AggregateFavoriteWorkout = {
    _count: FavoriteWorkoutCountAggregateOutputType | null
    _avg: FavoriteWorkoutAvgAggregateOutputType | null
    _sum: FavoriteWorkoutSumAggregateOutputType | null
    _min: FavoriteWorkoutMinAggregateOutputType | null
    _max: FavoriteWorkoutMaxAggregateOutputType | null
  }

  export type FavoriteWorkoutAvgAggregateOutputType = {
    workoutId: number | null
  }

  export type FavoriteWorkoutSumAggregateOutputType = {
    workoutId: number | null
  }

  export type FavoriteWorkoutMinAggregateOutputType = {
    id: string | null
    userId: string | null
    workoutId: number | null
    addedAt: Date | null
  }

  export type FavoriteWorkoutMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    workoutId: number | null
    addedAt: Date | null
  }

  export type FavoriteWorkoutCountAggregateOutputType = {
    id: number
    userId: number
    workoutId: number
    addedAt: number
    _all: number
  }


  export type FavoriteWorkoutAvgAggregateInputType = {
    workoutId?: true
  }

  export type FavoriteWorkoutSumAggregateInputType = {
    workoutId?: true
  }

  export type FavoriteWorkoutMinAggregateInputType = {
    id?: true
    userId?: true
    workoutId?: true
    addedAt?: true
  }

  export type FavoriteWorkoutMaxAggregateInputType = {
    id?: true
    userId?: true
    workoutId?: true
    addedAt?: true
  }

  export type FavoriteWorkoutCountAggregateInputType = {
    id?: true
    userId?: true
    workoutId?: true
    addedAt?: true
    _all?: true
  }

  export type FavoriteWorkoutAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FavoriteWorkout to aggregate.
     */
    where?: FavoriteWorkoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FavoriteWorkouts to fetch.
     */
    orderBy?: FavoriteWorkoutOrderByWithRelationInput | FavoriteWorkoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FavoriteWorkoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FavoriteWorkouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FavoriteWorkouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FavoriteWorkouts
    **/
    _count?: true | FavoriteWorkoutCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FavoriteWorkoutAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FavoriteWorkoutSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FavoriteWorkoutMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FavoriteWorkoutMaxAggregateInputType
  }

  export type GetFavoriteWorkoutAggregateType<T extends FavoriteWorkoutAggregateArgs> = {
        [P in keyof T & keyof AggregateFavoriteWorkout]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFavoriteWorkout[P]>
      : GetScalarType<T[P], AggregateFavoriteWorkout[P]>
  }




  export type FavoriteWorkoutGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FavoriteWorkoutWhereInput
    orderBy?: FavoriteWorkoutOrderByWithAggregationInput | FavoriteWorkoutOrderByWithAggregationInput[]
    by: FavoriteWorkoutScalarFieldEnum[] | FavoriteWorkoutScalarFieldEnum
    having?: FavoriteWorkoutScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FavoriteWorkoutCountAggregateInputType | true
    _avg?: FavoriteWorkoutAvgAggregateInputType
    _sum?: FavoriteWorkoutSumAggregateInputType
    _min?: FavoriteWorkoutMinAggregateInputType
    _max?: FavoriteWorkoutMaxAggregateInputType
  }

  export type FavoriteWorkoutGroupByOutputType = {
    id: string
    userId: string
    workoutId: number
    addedAt: Date
    _count: FavoriteWorkoutCountAggregateOutputType | null
    _avg: FavoriteWorkoutAvgAggregateOutputType | null
    _sum: FavoriteWorkoutSumAggregateOutputType | null
    _min: FavoriteWorkoutMinAggregateOutputType | null
    _max: FavoriteWorkoutMaxAggregateOutputType | null
  }

  type GetFavoriteWorkoutGroupByPayload<T extends FavoriteWorkoutGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FavoriteWorkoutGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FavoriteWorkoutGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FavoriteWorkoutGroupByOutputType[P]>
            : GetScalarType<T[P], FavoriteWorkoutGroupByOutputType[P]>
        }
      >
    >


  export type FavoriteWorkoutSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    workoutId?: boolean
    addedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    workout?: boolean | WorkoutDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["favoriteWorkout"]>

  export type FavoriteWorkoutSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    workoutId?: boolean
    addedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    workout?: boolean | WorkoutDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["favoriteWorkout"]>

  export type FavoriteWorkoutSelectScalar = {
    id?: boolean
    userId?: boolean
    workoutId?: boolean
    addedAt?: boolean
  }

  export type FavoriteWorkoutInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    workout?: boolean | WorkoutDefaultArgs<ExtArgs>
  }
  export type FavoriteWorkoutIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    workout?: boolean | WorkoutDefaultArgs<ExtArgs>
  }

  export type $FavoriteWorkoutPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FavoriteWorkout"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      workout: Prisma.$WorkoutPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      workoutId: number
      addedAt: Date
    }, ExtArgs["result"]["favoriteWorkout"]>
    composites: {}
  }

  type FavoriteWorkoutGetPayload<S extends boolean | null | undefined | FavoriteWorkoutDefaultArgs> = $Result.GetResult<Prisma.$FavoriteWorkoutPayload, S>

  type FavoriteWorkoutCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FavoriteWorkoutFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FavoriteWorkoutCountAggregateInputType | true
    }

  export interface FavoriteWorkoutDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FavoriteWorkout'], meta: { name: 'FavoriteWorkout' } }
    /**
     * Find zero or one FavoriteWorkout that matches the filter.
     * @param {FavoriteWorkoutFindUniqueArgs} args - Arguments to find a FavoriteWorkout
     * @example
     * // Get one FavoriteWorkout
     * const favoriteWorkout = await prisma.favoriteWorkout.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FavoriteWorkoutFindUniqueArgs>(args: SelectSubset<T, FavoriteWorkoutFindUniqueArgs<ExtArgs>>): Prisma__FavoriteWorkoutClient<$Result.GetResult<Prisma.$FavoriteWorkoutPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one FavoriteWorkout that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FavoriteWorkoutFindUniqueOrThrowArgs} args - Arguments to find a FavoriteWorkout
     * @example
     * // Get one FavoriteWorkout
     * const favoriteWorkout = await prisma.favoriteWorkout.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FavoriteWorkoutFindUniqueOrThrowArgs>(args: SelectSubset<T, FavoriteWorkoutFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FavoriteWorkoutClient<$Result.GetResult<Prisma.$FavoriteWorkoutPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first FavoriteWorkout that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteWorkoutFindFirstArgs} args - Arguments to find a FavoriteWorkout
     * @example
     * // Get one FavoriteWorkout
     * const favoriteWorkout = await prisma.favoriteWorkout.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FavoriteWorkoutFindFirstArgs>(args?: SelectSubset<T, FavoriteWorkoutFindFirstArgs<ExtArgs>>): Prisma__FavoriteWorkoutClient<$Result.GetResult<Prisma.$FavoriteWorkoutPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first FavoriteWorkout that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteWorkoutFindFirstOrThrowArgs} args - Arguments to find a FavoriteWorkout
     * @example
     * // Get one FavoriteWorkout
     * const favoriteWorkout = await prisma.favoriteWorkout.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FavoriteWorkoutFindFirstOrThrowArgs>(args?: SelectSubset<T, FavoriteWorkoutFindFirstOrThrowArgs<ExtArgs>>): Prisma__FavoriteWorkoutClient<$Result.GetResult<Prisma.$FavoriteWorkoutPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more FavoriteWorkouts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteWorkoutFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FavoriteWorkouts
     * const favoriteWorkouts = await prisma.favoriteWorkout.findMany()
     * 
     * // Get first 10 FavoriteWorkouts
     * const favoriteWorkouts = await prisma.favoriteWorkout.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const favoriteWorkoutWithIdOnly = await prisma.favoriteWorkout.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FavoriteWorkoutFindManyArgs>(args?: SelectSubset<T, FavoriteWorkoutFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoriteWorkoutPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a FavoriteWorkout.
     * @param {FavoriteWorkoutCreateArgs} args - Arguments to create a FavoriteWorkout.
     * @example
     * // Create one FavoriteWorkout
     * const FavoriteWorkout = await prisma.favoriteWorkout.create({
     *   data: {
     *     // ... data to create a FavoriteWorkout
     *   }
     * })
     * 
     */
    create<T extends FavoriteWorkoutCreateArgs>(args: SelectSubset<T, FavoriteWorkoutCreateArgs<ExtArgs>>): Prisma__FavoriteWorkoutClient<$Result.GetResult<Prisma.$FavoriteWorkoutPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many FavoriteWorkouts.
     * @param {FavoriteWorkoutCreateManyArgs} args - Arguments to create many FavoriteWorkouts.
     * @example
     * // Create many FavoriteWorkouts
     * const favoriteWorkout = await prisma.favoriteWorkout.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FavoriteWorkoutCreateManyArgs>(args?: SelectSubset<T, FavoriteWorkoutCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FavoriteWorkouts and returns the data saved in the database.
     * @param {FavoriteWorkoutCreateManyAndReturnArgs} args - Arguments to create many FavoriteWorkouts.
     * @example
     * // Create many FavoriteWorkouts
     * const favoriteWorkout = await prisma.favoriteWorkout.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FavoriteWorkouts and only return the `id`
     * const favoriteWorkoutWithIdOnly = await prisma.favoriteWorkout.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FavoriteWorkoutCreateManyAndReturnArgs>(args?: SelectSubset<T, FavoriteWorkoutCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoriteWorkoutPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a FavoriteWorkout.
     * @param {FavoriteWorkoutDeleteArgs} args - Arguments to delete one FavoriteWorkout.
     * @example
     * // Delete one FavoriteWorkout
     * const FavoriteWorkout = await prisma.favoriteWorkout.delete({
     *   where: {
     *     // ... filter to delete one FavoriteWorkout
     *   }
     * })
     * 
     */
    delete<T extends FavoriteWorkoutDeleteArgs>(args: SelectSubset<T, FavoriteWorkoutDeleteArgs<ExtArgs>>): Prisma__FavoriteWorkoutClient<$Result.GetResult<Prisma.$FavoriteWorkoutPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one FavoriteWorkout.
     * @param {FavoriteWorkoutUpdateArgs} args - Arguments to update one FavoriteWorkout.
     * @example
     * // Update one FavoriteWorkout
     * const favoriteWorkout = await prisma.favoriteWorkout.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FavoriteWorkoutUpdateArgs>(args: SelectSubset<T, FavoriteWorkoutUpdateArgs<ExtArgs>>): Prisma__FavoriteWorkoutClient<$Result.GetResult<Prisma.$FavoriteWorkoutPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more FavoriteWorkouts.
     * @param {FavoriteWorkoutDeleteManyArgs} args - Arguments to filter FavoriteWorkouts to delete.
     * @example
     * // Delete a few FavoriteWorkouts
     * const { count } = await prisma.favoriteWorkout.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FavoriteWorkoutDeleteManyArgs>(args?: SelectSubset<T, FavoriteWorkoutDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FavoriteWorkouts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteWorkoutUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FavoriteWorkouts
     * const favoriteWorkout = await prisma.favoriteWorkout.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FavoriteWorkoutUpdateManyArgs>(args: SelectSubset<T, FavoriteWorkoutUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FavoriteWorkout.
     * @param {FavoriteWorkoutUpsertArgs} args - Arguments to update or create a FavoriteWorkout.
     * @example
     * // Update or create a FavoriteWorkout
     * const favoriteWorkout = await prisma.favoriteWorkout.upsert({
     *   create: {
     *     // ... data to create a FavoriteWorkout
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FavoriteWorkout we want to update
     *   }
     * })
     */
    upsert<T extends FavoriteWorkoutUpsertArgs>(args: SelectSubset<T, FavoriteWorkoutUpsertArgs<ExtArgs>>): Prisma__FavoriteWorkoutClient<$Result.GetResult<Prisma.$FavoriteWorkoutPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of FavoriteWorkouts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteWorkoutCountArgs} args - Arguments to filter FavoriteWorkouts to count.
     * @example
     * // Count the number of FavoriteWorkouts
     * const count = await prisma.favoriteWorkout.count({
     *   where: {
     *     // ... the filter for the FavoriteWorkouts we want to count
     *   }
     * })
    **/
    count<T extends FavoriteWorkoutCountArgs>(
      args?: Subset<T, FavoriteWorkoutCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FavoriteWorkoutCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FavoriteWorkout.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteWorkoutAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FavoriteWorkoutAggregateArgs>(args: Subset<T, FavoriteWorkoutAggregateArgs>): Prisma.PrismaPromise<GetFavoriteWorkoutAggregateType<T>>

    /**
     * Group by FavoriteWorkout.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteWorkoutGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FavoriteWorkoutGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FavoriteWorkoutGroupByArgs['orderBy'] }
        : { orderBy?: FavoriteWorkoutGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FavoriteWorkoutGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFavoriteWorkoutGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FavoriteWorkout model
   */
  readonly fields: FavoriteWorkoutFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FavoriteWorkout.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FavoriteWorkoutClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    workout<T extends WorkoutDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkoutDefaultArgs<ExtArgs>>): Prisma__WorkoutClient<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FavoriteWorkout model
   */ 
  interface FavoriteWorkoutFieldRefs {
    readonly id: FieldRef<"FavoriteWorkout", 'String'>
    readonly userId: FieldRef<"FavoriteWorkout", 'String'>
    readonly workoutId: FieldRef<"FavoriteWorkout", 'Int'>
    readonly addedAt: FieldRef<"FavoriteWorkout", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FavoriteWorkout findUnique
   */
  export type FavoriteWorkoutFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteWorkout
     */
    select?: FavoriteWorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteWorkoutInclude<ExtArgs> | null
    /**
     * Filter, which FavoriteWorkout to fetch.
     */
    where: FavoriteWorkoutWhereUniqueInput
  }

  /**
   * FavoriteWorkout findUniqueOrThrow
   */
  export type FavoriteWorkoutFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteWorkout
     */
    select?: FavoriteWorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteWorkoutInclude<ExtArgs> | null
    /**
     * Filter, which FavoriteWorkout to fetch.
     */
    where: FavoriteWorkoutWhereUniqueInput
  }

  /**
   * FavoriteWorkout findFirst
   */
  export type FavoriteWorkoutFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteWorkout
     */
    select?: FavoriteWorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteWorkoutInclude<ExtArgs> | null
    /**
     * Filter, which FavoriteWorkout to fetch.
     */
    where?: FavoriteWorkoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FavoriteWorkouts to fetch.
     */
    orderBy?: FavoriteWorkoutOrderByWithRelationInput | FavoriteWorkoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FavoriteWorkouts.
     */
    cursor?: FavoriteWorkoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FavoriteWorkouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FavoriteWorkouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FavoriteWorkouts.
     */
    distinct?: FavoriteWorkoutScalarFieldEnum | FavoriteWorkoutScalarFieldEnum[]
  }

  /**
   * FavoriteWorkout findFirstOrThrow
   */
  export type FavoriteWorkoutFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteWorkout
     */
    select?: FavoriteWorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteWorkoutInclude<ExtArgs> | null
    /**
     * Filter, which FavoriteWorkout to fetch.
     */
    where?: FavoriteWorkoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FavoriteWorkouts to fetch.
     */
    orderBy?: FavoriteWorkoutOrderByWithRelationInput | FavoriteWorkoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FavoriteWorkouts.
     */
    cursor?: FavoriteWorkoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FavoriteWorkouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FavoriteWorkouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FavoriteWorkouts.
     */
    distinct?: FavoriteWorkoutScalarFieldEnum | FavoriteWorkoutScalarFieldEnum[]
  }

  /**
   * FavoriteWorkout findMany
   */
  export type FavoriteWorkoutFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteWorkout
     */
    select?: FavoriteWorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteWorkoutInclude<ExtArgs> | null
    /**
     * Filter, which FavoriteWorkouts to fetch.
     */
    where?: FavoriteWorkoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FavoriteWorkouts to fetch.
     */
    orderBy?: FavoriteWorkoutOrderByWithRelationInput | FavoriteWorkoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FavoriteWorkouts.
     */
    cursor?: FavoriteWorkoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FavoriteWorkouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FavoriteWorkouts.
     */
    skip?: number
    distinct?: FavoriteWorkoutScalarFieldEnum | FavoriteWorkoutScalarFieldEnum[]
  }

  /**
   * FavoriteWorkout create
   */
  export type FavoriteWorkoutCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteWorkout
     */
    select?: FavoriteWorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteWorkoutInclude<ExtArgs> | null
    /**
     * The data needed to create a FavoriteWorkout.
     */
    data: XOR<FavoriteWorkoutCreateInput, FavoriteWorkoutUncheckedCreateInput>
  }

  /**
   * FavoriteWorkout createMany
   */
  export type FavoriteWorkoutCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FavoriteWorkouts.
     */
    data: FavoriteWorkoutCreateManyInput | FavoriteWorkoutCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FavoriteWorkout createManyAndReturn
   */
  export type FavoriteWorkoutCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteWorkout
     */
    select?: FavoriteWorkoutSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many FavoriteWorkouts.
     */
    data: FavoriteWorkoutCreateManyInput | FavoriteWorkoutCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteWorkoutIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FavoriteWorkout update
   */
  export type FavoriteWorkoutUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteWorkout
     */
    select?: FavoriteWorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteWorkoutInclude<ExtArgs> | null
    /**
     * The data needed to update a FavoriteWorkout.
     */
    data: XOR<FavoriteWorkoutUpdateInput, FavoriteWorkoutUncheckedUpdateInput>
    /**
     * Choose, which FavoriteWorkout to update.
     */
    where: FavoriteWorkoutWhereUniqueInput
  }

  /**
   * FavoriteWorkout updateMany
   */
  export type FavoriteWorkoutUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FavoriteWorkouts.
     */
    data: XOR<FavoriteWorkoutUpdateManyMutationInput, FavoriteWorkoutUncheckedUpdateManyInput>
    /**
     * Filter which FavoriteWorkouts to update
     */
    where?: FavoriteWorkoutWhereInput
  }

  /**
   * FavoriteWorkout upsert
   */
  export type FavoriteWorkoutUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteWorkout
     */
    select?: FavoriteWorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteWorkoutInclude<ExtArgs> | null
    /**
     * The filter to search for the FavoriteWorkout to update in case it exists.
     */
    where: FavoriteWorkoutWhereUniqueInput
    /**
     * In case the FavoriteWorkout found by the `where` argument doesn't exist, create a new FavoriteWorkout with this data.
     */
    create: XOR<FavoriteWorkoutCreateInput, FavoriteWorkoutUncheckedCreateInput>
    /**
     * In case the FavoriteWorkout was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FavoriteWorkoutUpdateInput, FavoriteWorkoutUncheckedUpdateInput>
  }

  /**
   * FavoriteWorkout delete
   */
  export type FavoriteWorkoutDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteWorkout
     */
    select?: FavoriteWorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteWorkoutInclude<ExtArgs> | null
    /**
     * Filter which FavoriteWorkout to delete.
     */
    where: FavoriteWorkoutWhereUniqueInput
  }

  /**
   * FavoriteWorkout deleteMany
   */
  export type FavoriteWorkoutDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FavoriteWorkouts to delete
     */
    where?: FavoriteWorkoutWhereInput
  }

  /**
   * FavoriteWorkout without action
   */
  export type FavoriteWorkoutDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteWorkout
     */
    select?: FavoriteWorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteWorkoutInclude<ExtArgs> | null
  }


  /**
   * Model FavoriteMeditation
   */

  export type AggregateFavoriteMeditation = {
    _count: FavoriteMeditationCountAggregateOutputType | null
    _avg: FavoriteMeditationAvgAggregateOutputType | null
    _sum: FavoriteMeditationSumAggregateOutputType | null
    _min: FavoriteMeditationMinAggregateOutputType | null
    _max: FavoriteMeditationMaxAggregateOutputType | null
  }

  export type FavoriteMeditationAvgAggregateOutputType = {
    meditationId: number | null
  }

  export type FavoriteMeditationSumAggregateOutputType = {
    meditationId: number | null
  }

  export type FavoriteMeditationMinAggregateOutputType = {
    id: string | null
    userId: string | null
    meditationId: number | null
    addedAt: Date | null
  }

  export type FavoriteMeditationMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    meditationId: number | null
    addedAt: Date | null
  }

  export type FavoriteMeditationCountAggregateOutputType = {
    id: number
    userId: number
    meditationId: number
    addedAt: number
    _all: number
  }


  export type FavoriteMeditationAvgAggregateInputType = {
    meditationId?: true
  }

  export type FavoriteMeditationSumAggregateInputType = {
    meditationId?: true
  }

  export type FavoriteMeditationMinAggregateInputType = {
    id?: true
    userId?: true
    meditationId?: true
    addedAt?: true
  }

  export type FavoriteMeditationMaxAggregateInputType = {
    id?: true
    userId?: true
    meditationId?: true
    addedAt?: true
  }

  export type FavoriteMeditationCountAggregateInputType = {
    id?: true
    userId?: true
    meditationId?: true
    addedAt?: true
    _all?: true
  }

  export type FavoriteMeditationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FavoriteMeditation to aggregate.
     */
    where?: FavoriteMeditationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FavoriteMeditations to fetch.
     */
    orderBy?: FavoriteMeditationOrderByWithRelationInput | FavoriteMeditationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FavoriteMeditationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FavoriteMeditations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FavoriteMeditations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FavoriteMeditations
    **/
    _count?: true | FavoriteMeditationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FavoriteMeditationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FavoriteMeditationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FavoriteMeditationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FavoriteMeditationMaxAggregateInputType
  }

  export type GetFavoriteMeditationAggregateType<T extends FavoriteMeditationAggregateArgs> = {
        [P in keyof T & keyof AggregateFavoriteMeditation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFavoriteMeditation[P]>
      : GetScalarType<T[P], AggregateFavoriteMeditation[P]>
  }




  export type FavoriteMeditationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FavoriteMeditationWhereInput
    orderBy?: FavoriteMeditationOrderByWithAggregationInput | FavoriteMeditationOrderByWithAggregationInput[]
    by: FavoriteMeditationScalarFieldEnum[] | FavoriteMeditationScalarFieldEnum
    having?: FavoriteMeditationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FavoriteMeditationCountAggregateInputType | true
    _avg?: FavoriteMeditationAvgAggregateInputType
    _sum?: FavoriteMeditationSumAggregateInputType
    _min?: FavoriteMeditationMinAggregateInputType
    _max?: FavoriteMeditationMaxAggregateInputType
  }

  export type FavoriteMeditationGroupByOutputType = {
    id: string
    userId: string
    meditationId: number
    addedAt: Date
    _count: FavoriteMeditationCountAggregateOutputType | null
    _avg: FavoriteMeditationAvgAggregateOutputType | null
    _sum: FavoriteMeditationSumAggregateOutputType | null
    _min: FavoriteMeditationMinAggregateOutputType | null
    _max: FavoriteMeditationMaxAggregateOutputType | null
  }

  type GetFavoriteMeditationGroupByPayload<T extends FavoriteMeditationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FavoriteMeditationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FavoriteMeditationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FavoriteMeditationGroupByOutputType[P]>
            : GetScalarType<T[P], FavoriteMeditationGroupByOutputType[P]>
        }
      >
    >


  export type FavoriteMeditationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    meditationId?: boolean
    addedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    meditation?: boolean | MeditationSessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["favoriteMeditation"]>

  export type FavoriteMeditationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    meditationId?: boolean
    addedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    meditation?: boolean | MeditationSessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["favoriteMeditation"]>

  export type FavoriteMeditationSelectScalar = {
    id?: boolean
    userId?: boolean
    meditationId?: boolean
    addedAt?: boolean
  }

  export type FavoriteMeditationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    meditation?: boolean | MeditationSessionDefaultArgs<ExtArgs>
  }
  export type FavoriteMeditationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    meditation?: boolean | MeditationSessionDefaultArgs<ExtArgs>
  }

  export type $FavoriteMeditationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FavoriteMeditation"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      meditation: Prisma.$MeditationSessionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      meditationId: number
      addedAt: Date
    }, ExtArgs["result"]["favoriteMeditation"]>
    composites: {}
  }

  type FavoriteMeditationGetPayload<S extends boolean | null | undefined | FavoriteMeditationDefaultArgs> = $Result.GetResult<Prisma.$FavoriteMeditationPayload, S>

  type FavoriteMeditationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FavoriteMeditationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FavoriteMeditationCountAggregateInputType | true
    }

  export interface FavoriteMeditationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FavoriteMeditation'], meta: { name: 'FavoriteMeditation' } }
    /**
     * Find zero or one FavoriteMeditation that matches the filter.
     * @param {FavoriteMeditationFindUniqueArgs} args - Arguments to find a FavoriteMeditation
     * @example
     * // Get one FavoriteMeditation
     * const favoriteMeditation = await prisma.favoriteMeditation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FavoriteMeditationFindUniqueArgs>(args: SelectSubset<T, FavoriteMeditationFindUniqueArgs<ExtArgs>>): Prisma__FavoriteMeditationClient<$Result.GetResult<Prisma.$FavoriteMeditationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one FavoriteMeditation that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FavoriteMeditationFindUniqueOrThrowArgs} args - Arguments to find a FavoriteMeditation
     * @example
     * // Get one FavoriteMeditation
     * const favoriteMeditation = await prisma.favoriteMeditation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FavoriteMeditationFindUniqueOrThrowArgs>(args: SelectSubset<T, FavoriteMeditationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FavoriteMeditationClient<$Result.GetResult<Prisma.$FavoriteMeditationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first FavoriteMeditation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteMeditationFindFirstArgs} args - Arguments to find a FavoriteMeditation
     * @example
     * // Get one FavoriteMeditation
     * const favoriteMeditation = await prisma.favoriteMeditation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FavoriteMeditationFindFirstArgs>(args?: SelectSubset<T, FavoriteMeditationFindFirstArgs<ExtArgs>>): Prisma__FavoriteMeditationClient<$Result.GetResult<Prisma.$FavoriteMeditationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first FavoriteMeditation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteMeditationFindFirstOrThrowArgs} args - Arguments to find a FavoriteMeditation
     * @example
     * // Get one FavoriteMeditation
     * const favoriteMeditation = await prisma.favoriteMeditation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FavoriteMeditationFindFirstOrThrowArgs>(args?: SelectSubset<T, FavoriteMeditationFindFirstOrThrowArgs<ExtArgs>>): Prisma__FavoriteMeditationClient<$Result.GetResult<Prisma.$FavoriteMeditationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more FavoriteMeditations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteMeditationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FavoriteMeditations
     * const favoriteMeditations = await prisma.favoriteMeditation.findMany()
     * 
     * // Get first 10 FavoriteMeditations
     * const favoriteMeditations = await prisma.favoriteMeditation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const favoriteMeditationWithIdOnly = await prisma.favoriteMeditation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FavoriteMeditationFindManyArgs>(args?: SelectSubset<T, FavoriteMeditationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoriteMeditationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a FavoriteMeditation.
     * @param {FavoriteMeditationCreateArgs} args - Arguments to create a FavoriteMeditation.
     * @example
     * // Create one FavoriteMeditation
     * const FavoriteMeditation = await prisma.favoriteMeditation.create({
     *   data: {
     *     // ... data to create a FavoriteMeditation
     *   }
     * })
     * 
     */
    create<T extends FavoriteMeditationCreateArgs>(args: SelectSubset<T, FavoriteMeditationCreateArgs<ExtArgs>>): Prisma__FavoriteMeditationClient<$Result.GetResult<Prisma.$FavoriteMeditationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many FavoriteMeditations.
     * @param {FavoriteMeditationCreateManyArgs} args - Arguments to create many FavoriteMeditations.
     * @example
     * // Create many FavoriteMeditations
     * const favoriteMeditation = await prisma.favoriteMeditation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FavoriteMeditationCreateManyArgs>(args?: SelectSubset<T, FavoriteMeditationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FavoriteMeditations and returns the data saved in the database.
     * @param {FavoriteMeditationCreateManyAndReturnArgs} args - Arguments to create many FavoriteMeditations.
     * @example
     * // Create many FavoriteMeditations
     * const favoriteMeditation = await prisma.favoriteMeditation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FavoriteMeditations and only return the `id`
     * const favoriteMeditationWithIdOnly = await prisma.favoriteMeditation.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FavoriteMeditationCreateManyAndReturnArgs>(args?: SelectSubset<T, FavoriteMeditationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoriteMeditationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a FavoriteMeditation.
     * @param {FavoriteMeditationDeleteArgs} args - Arguments to delete one FavoriteMeditation.
     * @example
     * // Delete one FavoriteMeditation
     * const FavoriteMeditation = await prisma.favoriteMeditation.delete({
     *   where: {
     *     // ... filter to delete one FavoriteMeditation
     *   }
     * })
     * 
     */
    delete<T extends FavoriteMeditationDeleteArgs>(args: SelectSubset<T, FavoriteMeditationDeleteArgs<ExtArgs>>): Prisma__FavoriteMeditationClient<$Result.GetResult<Prisma.$FavoriteMeditationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one FavoriteMeditation.
     * @param {FavoriteMeditationUpdateArgs} args - Arguments to update one FavoriteMeditation.
     * @example
     * // Update one FavoriteMeditation
     * const favoriteMeditation = await prisma.favoriteMeditation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FavoriteMeditationUpdateArgs>(args: SelectSubset<T, FavoriteMeditationUpdateArgs<ExtArgs>>): Prisma__FavoriteMeditationClient<$Result.GetResult<Prisma.$FavoriteMeditationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more FavoriteMeditations.
     * @param {FavoriteMeditationDeleteManyArgs} args - Arguments to filter FavoriteMeditations to delete.
     * @example
     * // Delete a few FavoriteMeditations
     * const { count } = await prisma.favoriteMeditation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FavoriteMeditationDeleteManyArgs>(args?: SelectSubset<T, FavoriteMeditationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FavoriteMeditations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteMeditationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FavoriteMeditations
     * const favoriteMeditation = await prisma.favoriteMeditation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FavoriteMeditationUpdateManyArgs>(args: SelectSubset<T, FavoriteMeditationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FavoriteMeditation.
     * @param {FavoriteMeditationUpsertArgs} args - Arguments to update or create a FavoriteMeditation.
     * @example
     * // Update or create a FavoriteMeditation
     * const favoriteMeditation = await prisma.favoriteMeditation.upsert({
     *   create: {
     *     // ... data to create a FavoriteMeditation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FavoriteMeditation we want to update
     *   }
     * })
     */
    upsert<T extends FavoriteMeditationUpsertArgs>(args: SelectSubset<T, FavoriteMeditationUpsertArgs<ExtArgs>>): Prisma__FavoriteMeditationClient<$Result.GetResult<Prisma.$FavoriteMeditationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of FavoriteMeditations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteMeditationCountArgs} args - Arguments to filter FavoriteMeditations to count.
     * @example
     * // Count the number of FavoriteMeditations
     * const count = await prisma.favoriteMeditation.count({
     *   where: {
     *     // ... the filter for the FavoriteMeditations we want to count
     *   }
     * })
    **/
    count<T extends FavoriteMeditationCountArgs>(
      args?: Subset<T, FavoriteMeditationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FavoriteMeditationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FavoriteMeditation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteMeditationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FavoriteMeditationAggregateArgs>(args: Subset<T, FavoriteMeditationAggregateArgs>): Prisma.PrismaPromise<GetFavoriteMeditationAggregateType<T>>

    /**
     * Group by FavoriteMeditation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteMeditationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FavoriteMeditationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FavoriteMeditationGroupByArgs['orderBy'] }
        : { orderBy?: FavoriteMeditationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FavoriteMeditationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFavoriteMeditationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FavoriteMeditation model
   */
  readonly fields: FavoriteMeditationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FavoriteMeditation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FavoriteMeditationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    meditation<T extends MeditationSessionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MeditationSessionDefaultArgs<ExtArgs>>): Prisma__MeditationSessionClient<$Result.GetResult<Prisma.$MeditationSessionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FavoriteMeditation model
   */ 
  interface FavoriteMeditationFieldRefs {
    readonly id: FieldRef<"FavoriteMeditation", 'String'>
    readonly userId: FieldRef<"FavoriteMeditation", 'String'>
    readonly meditationId: FieldRef<"FavoriteMeditation", 'Int'>
    readonly addedAt: FieldRef<"FavoriteMeditation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FavoriteMeditation findUnique
   */
  export type FavoriteMeditationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteMeditation
     */
    select?: FavoriteMeditationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteMeditationInclude<ExtArgs> | null
    /**
     * Filter, which FavoriteMeditation to fetch.
     */
    where: FavoriteMeditationWhereUniqueInput
  }

  /**
   * FavoriteMeditation findUniqueOrThrow
   */
  export type FavoriteMeditationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteMeditation
     */
    select?: FavoriteMeditationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteMeditationInclude<ExtArgs> | null
    /**
     * Filter, which FavoriteMeditation to fetch.
     */
    where: FavoriteMeditationWhereUniqueInput
  }

  /**
   * FavoriteMeditation findFirst
   */
  export type FavoriteMeditationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteMeditation
     */
    select?: FavoriteMeditationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteMeditationInclude<ExtArgs> | null
    /**
     * Filter, which FavoriteMeditation to fetch.
     */
    where?: FavoriteMeditationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FavoriteMeditations to fetch.
     */
    orderBy?: FavoriteMeditationOrderByWithRelationInput | FavoriteMeditationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FavoriteMeditations.
     */
    cursor?: FavoriteMeditationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FavoriteMeditations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FavoriteMeditations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FavoriteMeditations.
     */
    distinct?: FavoriteMeditationScalarFieldEnum | FavoriteMeditationScalarFieldEnum[]
  }

  /**
   * FavoriteMeditation findFirstOrThrow
   */
  export type FavoriteMeditationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteMeditation
     */
    select?: FavoriteMeditationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteMeditationInclude<ExtArgs> | null
    /**
     * Filter, which FavoriteMeditation to fetch.
     */
    where?: FavoriteMeditationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FavoriteMeditations to fetch.
     */
    orderBy?: FavoriteMeditationOrderByWithRelationInput | FavoriteMeditationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FavoriteMeditations.
     */
    cursor?: FavoriteMeditationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FavoriteMeditations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FavoriteMeditations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FavoriteMeditations.
     */
    distinct?: FavoriteMeditationScalarFieldEnum | FavoriteMeditationScalarFieldEnum[]
  }

  /**
   * FavoriteMeditation findMany
   */
  export type FavoriteMeditationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteMeditation
     */
    select?: FavoriteMeditationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteMeditationInclude<ExtArgs> | null
    /**
     * Filter, which FavoriteMeditations to fetch.
     */
    where?: FavoriteMeditationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FavoriteMeditations to fetch.
     */
    orderBy?: FavoriteMeditationOrderByWithRelationInput | FavoriteMeditationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FavoriteMeditations.
     */
    cursor?: FavoriteMeditationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FavoriteMeditations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FavoriteMeditations.
     */
    skip?: number
    distinct?: FavoriteMeditationScalarFieldEnum | FavoriteMeditationScalarFieldEnum[]
  }

  /**
   * FavoriteMeditation create
   */
  export type FavoriteMeditationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteMeditation
     */
    select?: FavoriteMeditationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteMeditationInclude<ExtArgs> | null
    /**
     * The data needed to create a FavoriteMeditation.
     */
    data: XOR<FavoriteMeditationCreateInput, FavoriteMeditationUncheckedCreateInput>
  }

  /**
   * FavoriteMeditation createMany
   */
  export type FavoriteMeditationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FavoriteMeditations.
     */
    data: FavoriteMeditationCreateManyInput | FavoriteMeditationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FavoriteMeditation createManyAndReturn
   */
  export type FavoriteMeditationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteMeditation
     */
    select?: FavoriteMeditationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many FavoriteMeditations.
     */
    data: FavoriteMeditationCreateManyInput | FavoriteMeditationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteMeditationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FavoriteMeditation update
   */
  export type FavoriteMeditationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteMeditation
     */
    select?: FavoriteMeditationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteMeditationInclude<ExtArgs> | null
    /**
     * The data needed to update a FavoriteMeditation.
     */
    data: XOR<FavoriteMeditationUpdateInput, FavoriteMeditationUncheckedUpdateInput>
    /**
     * Choose, which FavoriteMeditation to update.
     */
    where: FavoriteMeditationWhereUniqueInput
  }

  /**
   * FavoriteMeditation updateMany
   */
  export type FavoriteMeditationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FavoriteMeditations.
     */
    data: XOR<FavoriteMeditationUpdateManyMutationInput, FavoriteMeditationUncheckedUpdateManyInput>
    /**
     * Filter which FavoriteMeditations to update
     */
    where?: FavoriteMeditationWhereInput
  }

  /**
   * FavoriteMeditation upsert
   */
  export type FavoriteMeditationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteMeditation
     */
    select?: FavoriteMeditationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteMeditationInclude<ExtArgs> | null
    /**
     * The filter to search for the FavoriteMeditation to update in case it exists.
     */
    where: FavoriteMeditationWhereUniqueInput
    /**
     * In case the FavoriteMeditation found by the `where` argument doesn't exist, create a new FavoriteMeditation with this data.
     */
    create: XOR<FavoriteMeditationCreateInput, FavoriteMeditationUncheckedCreateInput>
    /**
     * In case the FavoriteMeditation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FavoriteMeditationUpdateInput, FavoriteMeditationUncheckedUpdateInput>
  }

  /**
   * FavoriteMeditation delete
   */
  export type FavoriteMeditationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteMeditation
     */
    select?: FavoriteMeditationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteMeditationInclude<ExtArgs> | null
    /**
     * Filter which FavoriteMeditation to delete.
     */
    where: FavoriteMeditationWhereUniqueInput
  }

  /**
   * FavoriteMeditation deleteMany
   */
  export type FavoriteMeditationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FavoriteMeditations to delete
     */
    where?: FavoriteMeditationWhereInput
  }

  /**
   * FavoriteMeditation without action
   */
  export type FavoriteMeditationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteMeditation
     */
    select?: FavoriteMeditationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteMeditationInclude<ExtArgs> | null
  }


  /**
   * Model FavoriteYogaSession
   */

  export type AggregateFavoriteYogaSession = {
    _count: FavoriteYogaSessionCountAggregateOutputType | null
    _avg: FavoriteYogaSessionAvgAggregateOutputType | null
    _sum: FavoriteYogaSessionSumAggregateOutputType | null
    _min: FavoriteYogaSessionMinAggregateOutputType | null
    _max: FavoriteYogaSessionMaxAggregateOutputType | null
  }

  export type FavoriteYogaSessionAvgAggregateOutputType = {
    yogaId: number | null
  }

  export type FavoriteYogaSessionSumAggregateOutputType = {
    yogaId: number | null
  }

  export type FavoriteYogaSessionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    yogaId: number | null
    addedAt: Date | null
  }

  export type FavoriteYogaSessionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    yogaId: number | null
    addedAt: Date | null
  }

  export type FavoriteYogaSessionCountAggregateOutputType = {
    id: number
    userId: number
    yogaId: number
    addedAt: number
    _all: number
  }


  export type FavoriteYogaSessionAvgAggregateInputType = {
    yogaId?: true
  }

  export type FavoriteYogaSessionSumAggregateInputType = {
    yogaId?: true
  }

  export type FavoriteYogaSessionMinAggregateInputType = {
    id?: true
    userId?: true
    yogaId?: true
    addedAt?: true
  }

  export type FavoriteYogaSessionMaxAggregateInputType = {
    id?: true
    userId?: true
    yogaId?: true
    addedAt?: true
  }

  export type FavoriteYogaSessionCountAggregateInputType = {
    id?: true
    userId?: true
    yogaId?: true
    addedAt?: true
    _all?: true
  }

  export type FavoriteYogaSessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FavoriteYogaSession to aggregate.
     */
    where?: FavoriteYogaSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FavoriteYogaSessions to fetch.
     */
    orderBy?: FavoriteYogaSessionOrderByWithRelationInput | FavoriteYogaSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FavoriteYogaSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FavoriteYogaSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FavoriteYogaSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FavoriteYogaSessions
    **/
    _count?: true | FavoriteYogaSessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FavoriteYogaSessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FavoriteYogaSessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FavoriteYogaSessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FavoriteYogaSessionMaxAggregateInputType
  }

  export type GetFavoriteYogaSessionAggregateType<T extends FavoriteYogaSessionAggregateArgs> = {
        [P in keyof T & keyof AggregateFavoriteYogaSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFavoriteYogaSession[P]>
      : GetScalarType<T[P], AggregateFavoriteYogaSession[P]>
  }




  export type FavoriteYogaSessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FavoriteYogaSessionWhereInput
    orderBy?: FavoriteYogaSessionOrderByWithAggregationInput | FavoriteYogaSessionOrderByWithAggregationInput[]
    by: FavoriteYogaSessionScalarFieldEnum[] | FavoriteYogaSessionScalarFieldEnum
    having?: FavoriteYogaSessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FavoriteYogaSessionCountAggregateInputType | true
    _avg?: FavoriteYogaSessionAvgAggregateInputType
    _sum?: FavoriteYogaSessionSumAggregateInputType
    _min?: FavoriteYogaSessionMinAggregateInputType
    _max?: FavoriteYogaSessionMaxAggregateInputType
  }

  export type FavoriteYogaSessionGroupByOutputType = {
    id: string
    userId: string
    yogaId: number
    addedAt: Date
    _count: FavoriteYogaSessionCountAggregateOutputType | null
    _avg: FavoriteYogaSessionAvgAggregateOutputType | null
    _sum: FavoriteYogaSessionSumAggregateOutputType | null
    _min: FavoriteYogaSessionMinAggregateOutputType | null
    _max: FavoriteYogaSessionMaxAggregateOutputType | null
  }

  type GetFavoriteYogaSessionGroupByPayload<T extends FavoriteYogaSessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FavoriteYogaSessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FavoriteYogaSessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FavoriteYogaSessionGroupByOutputType[P]>
            : GetScalarType<T[P], FavoriteYogaSessionGroupByOutputType[P]>
        }
      >
    >


  export type FavoriteYogaSessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    yogaId?: boolean
    addedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    yoga?: boolean | YogaSessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["favoriteYogaSession"]>

  export type FavoriteYogaSessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    yogaId?: boolean
    addedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    yoga?: boolean | YogaSessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["favoriteYogaSession"]>

  export type FavoriteYogaSessionSelectScalar = {
    id?: boolean
    userId?: boolean
    yogaId?: boolean
    addedAt?: boolean
  }

  export type FavoriteYogaSessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    yoga?: boolean | YogaSessionDefaultArgs<ExtArgs>
  }
  export type FavoriteYogaSessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    yoga?: boolean | YogaSessionDefaultArgs<ExtArgs>
  }

  export type $FavoriteYogaSessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FavoriteYogaSession"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      yoga: Prisma.$YogaSessionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      yogaId: number
      addedAt: Date
    }, ExtArgs["result"]["favoriteYogaSession"]>
    composites: {}
  }

  type FavoriteYogaSessionGetPayload<S extends boolean | null | undefined | FavoriteYogaSessionDefaultArgs> = $Result.GetResult<Prisma.$FavoriteYogaSessionPayload, S>

  type FavoriteYogaSessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FavoriteYogaSessionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FavoriteYogaSessionCountAggregateInputType | true
    }

  export interface FavoriteYogaSessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FavoriteYogaSession'], meta: { name: 'FavoriteYogaSession' } }
    /**
     * Find zero or one FavoriteYogaSession that matches the filter.
     * @param {FavoriteYogaSessionFindUniqueArgs} args - Arguments to find a FavoriteYogaSession
     * @example
     * // Get one FavoriteYogaSession
     * const favoriteYogaSession = await prisma.favoriteYogaSession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FavoriteYogaSessionFindUniqueArgs>(args: SelectSubset<T, FavoriteYogaSessionFindUniqueArgs<ExtArgs>>): Prisma__FavoriteYogaSessionClient<$Result.GetResult<Prisma.$FavoriteYogaSessionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one FavoriteYogaSession that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FavoriteYogaSessionFindUniqueOrThrowArgs} args - Arguments to find a FavoriteYogaSession
     * @example
     * // Get one FavoriteYogaSession
     * const favoriteYogaSession = await prisma.favoriteYogaSession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FavoriteYogaSessionFindUniqueOrThrowArgs>(args: SelectSubset<T, FavoriteYogaSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FavoriteYogaSessionClient<$Result.GetResult<Prisma.$FavoriteYogaSessionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first FavoriteYogaSession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteYogaSessionFindFirstArgs} args - Arguments to find a FavoriteYogaSession
     * @example
     * // Get one FavoriteYogaSession
     * const favoriteYogaSession = await prisma.favoriteYogaSession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FavoriteYogaSessionFindFirstArgs>(args?: SelectSubset<T, FavoriteYogaSessionFindFirstArgs<ExtArgs>>): Prisma__FavoriteYogaSessionClient<$Result.GetResult<Prisma.$FavoriteYogaSessionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first FavoriteYogaSession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteYogaSessionFindFirstOrThrowArgs} args - Arguments to find a FavoriteYogaSession
     * @example
     * // Get one FavoriteYogaSession
     * const favoriteYogaSession = await prisma.favoriteYogaSession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FavoriteYogaSessionFindFirstOrThrowArgs>(args?: SelectSubset<T, FavoriteYogaSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__FavoriteYogaSessionClient<$Result.GetResult<Prisma.$FavoriteYogaSessionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more FavoriteYogaSessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteYogaSessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FavoriteYogaSessions
     * const favoriteYogaSessions = await prisma.favoriteYogaSession.findMany()
     * 
     * // Get first 10 FavoriteYogaSessions
     * const favoriteYogaSessions = await prisma.favoriteYogaSession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const favoriteYogaSessionWithIdOnly = await prisma.favoriteYogaSession.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FavoriteYogaSessionFindManyArgs>(args?: SelectSubset<T, FavoriteYogaSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoriteYogaSessionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a FavoriteYogaSession.
     * @param {FavoriteYogaSessionCreateArgs} args - Arguments to create a FavoriteYogaSession.
     * @example
     * // Create one FavoriteYogaSession
     * const FavoriteYogaSession = await prisma.favoriteYogaSession.create({
     *   data: {
     *     // ... data to create a FavoriteYogaSession
     *   }
     * })
     * 
     */
    create<T extends FavoriteYogaSessionCreateArgs>(args: SelectSubset<T, FavoriteYogaSessionCreateArgs<ExtArgs>>): Prisma__FavoriteYogaSessionClient<$Result.GetResult<Prisma.$FavoriteYogaSessionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many FavoriteYogaSessions.
     * @param {FavoriteYogaSessionCreateManyArgs} args - Arguments to create many FavoriteYogaSessions.
     * @example
     * // Create many FavoriteYogaSessions
     * const favoriteYogaSession = await prisma.favoriteYogaSession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FavoriteYogaSessionCreateManyArgs>(args?: SelectSubset<T, FavoriteYogaSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FavoriteYogaSessions and returns the data saved in the database.
     * @param {FavoriteYogaSessionCreateManyAndReturnArgs} args - Arguments to create many FavoriteYogaSessions.
     * @example
     * // Create many FavoriteYogaSessions
     * const favoriteYogaSession = await prisma.favoriteYogaSession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FavoriteYogaSessions and only return the `id`
     * const favoriteYogaSessionWithIdOnly = await prisma.favoriteYogaSession.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FavoriteYogaSessionCreateManyAndReturnArgs>(args?: SelectSubset<T, FavoriteYogaSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoriteYogaSessionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a FavoriteYogaSession.
     * @param {FavoriteYogaSessionDeleteArgs} args - Arguments to delete one FavoriteYogaSession.
     * @example
     * // Delete one FavoriteYogaSession
     * const FavoriteYogaSession = await prisma.favoriteYogaSession.delete({
     *   where: {
     *     // ... filter to delete one FavoriteYogaSession
     *   }
     * })
     * 
     */
    delete<T extends FavoriteYogaSessionDeleteArgs>(args: SelectSubset<T, FavoriteYogaSessionDeleteArgs<ExtArgs>>): Prisma__FavoriteYogaSessionClient<$Result.GetResult<Prisma.$FavoriteYogaSessionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one FavoriteYogaSession.
     * @param {FavoriteYogaSessionUpdateArgs} args - Arguments to update one FavoriteYogaSession.
     * @example
     * // Update one FavoriteYogaSession
     * const favoriteYogaSession = await prisma.favoriteYogaSession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FavoriteYogaSessionUpdateArgs>(args: SelectSubset<T, FavoriteYogaSessionUpdateArgs<ExtArgs>>): Prisma__FavoriteYogaSessionClient<$Result.GetResult<Prisma.$FavoriteYogaSessionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more FavoriteYogaSessions.
     * @param {FavoriteYogaSessionDeleteManyArgs} args - Arguments to filter FavoriteYogaSessions to delete.
     * @example
     * // Delete a few FavoriteYogaSessions
     * const { count } = await prisma.favoriteYogaSession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FavoriteYogaSessionDeleteManyArgs>(args?: SelectSubset<T, FavoriteYogaSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FavoriteYogaSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteYogaSessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FavoriteYogaSessions
     * const favoriteYogaSession = await prisma.favoriteYogaSession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FavoriteYogaSessionUpdateManyArgs>(args: SelectSubset<T, FavoriteYogaSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FavoriteYogaSession.
     * @param {FavoriteYogaSessionUpsertArgs} args - Arguments to update or create a FavoriteYogaSession.
     * @example
     * // Update or create a FavoriteYogaSession
     * const favoriteYogaSession = await prisma.favoriteYogaSession.upsert({
     *   create: {
     *     // ... data to create a FavoriteYogaSession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FavoriteYogaSession we want to update
     *   }
     * })
     */
    upsert<T extends FavoriteYogaSessionUpsertArgs>(args: SelectSubset<T, FavoriteYogaSessionUpsertArgs<ExtArgs>>): Prisma__FavoriteYogaSessionClient<$Result.GetResult<Prisma.$FavoriteYogaSessionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of FavoriteYogaSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteYogaSessionCountArgs} args - Arguments to filter FavoriteYogaSessions to count.
     * @example
     * // Count the number of FavoriteYogaSessions
     * const count = await prisma.favoriteYogaSession.count({
     *   where: {
     *     // ... the filter for the FavoriteYogaSessions we want to count
     *   }
     * })
    **/
    count<T extends FavoriteYogaSessionCountArgs>(
      args?: Subset<T, FavoriteYogaSessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FavoriteYogaSessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FavoriteYogaSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteYogaSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FavoriteYogaSessionAggregateArgs>(args: Subset<T, FavoriteYogaSessionAggregateArgs>): Prisma.PrismaPromise<GetFavoriteYogaSessionAggregateType<T>>

    /**
     * Group by FavoriteYogaSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteYogaSessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FavoriteYogaSessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FavoriteYogaSessionGroupByArgs['orderBy'] }
        : { orderBy?: FavoriteYogaSessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FavoriteYogaSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFavoriteYogaSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FavoriteYogaSession model
   */
  readonly fields: FavoriteYogaSessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FavoriteYogaSession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FavoriteYogaSessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    yoga<T extends YogaSessionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, YogaSessionDefaultArgs<ExtArgs>>): Prisma__YogaSessionClient<$Result.GetResult<Prisma.$YogaSessionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FavoriteYogaSession model
   */ 
  interface FavoriteYogaSessionFieldRefs {
    readonly id: FieldRef<"FavoriteYogaSession", 'String'>
    readonly userId: FieldRef<"FavoriteYogaSession", 'String'>
    readonly yogaId: FieldRef<"FavoriteYogaSession", 'Int'>
    readonly addedAt: FieldRef<"FavoriteYogaSession", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FavoriteYogaSession findUnique
   */
  export type FavoriteYogaSessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteYogaSession
     */
    select?: FavoriteYogaSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteYogaSessionInclude<ExtArgs> | null
    /**
     * Filter, which FavoriteYogaSession to fetch.
     */
    where: FavoriteYogaSessionWhereUniqueInput
  }

  /**
   * FavoriteYogaSession findUniqueOrThrow
   */
  export type FavoriteYogaSessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteYogaSession
     */
    select?: FavoriteYogaSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteYogaSessionInclude<ExtArgs> | null
    /**
     * Filter, which FavoriteYogaSession to fetch.
     */
    where: FavoriteYogaSessionWhereUniqueInput
  }

  /**
   * FavoriteYogaSession findFirst
   */
  export type FavoriteYogaSessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteYogaSession
     */
    select?: FavoriteYogaSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteYogaSessionInclude<ExtArgs> | null
    /**
     * Filter, which FavoriteYogaSession to fetch.
     */
    where?: FavoriteYogaSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FavoriteYogaSessions to fetch.
     */
    orderBy?: FavoriteYogaSessionOrderByWithRelationInput | FavoriteYogaSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FavoriteYogaSessions.
     */
    cursor?: FavoriteYogaSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FavoriteYogaSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FavoriteYogaSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FavoriteYogaSessions.
     */
    distinct?: FavoriteYogaSessionScalarFieldEnum | FavoriteYogaSessionScalarFieldEnum[]
  }

  /**
   * FavoriteYogaSession findFirstOrThrow
   */
  export type FavoriteYogaSessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteYogaSession
     */
    select?: FavoriteYogaSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteYogaSessionInclude<ExtArgs> | null
    /**
     * Filter, which FavoriteYogaSession to fetch.
     */
    where?: FavoriteYogaSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FavoriteYogaSessions to fetch.
     */
    orderBy?: FavoriteYogaSessionOrderByWithRelationInput | FavoriteYogaSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FavoriteYogaSessions.
     */
    cursor?: FavoriteYogaSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FavoriteYogaSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FavoriteYogaSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FavoriteYogaSessions.
     */
    distinct?: FavoriteYogaSessionScalarFieldEnum | FavoriteYogaSessionScalarFieldEnum[]
  }

  /**
   * FavoriteYogaSession findMany
   */
  export type FavoriteYogaSessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteYogaSession
     */
    select?: FavoriteYogaSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteYogaSessionInclude<ExtArgs> | null
    /**
     * Filter, which FavoriteYogaSessions to fetch.
     */
    where?: FavoriteYogaSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FavoriteYogaSessions to fetch.
     */
    orderBy?: FavoriteYogaSessionOrderByWithRelationInput | FavoriteYogaSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FavoriteYogaSessions.
     */
    cursor?: FavoriteYogaSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FavoriteYogaSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FavoriteYogaSessions.
     */
    skip?: number
    distinct?: FavoriteYogaSessionScalarFieldEnum | FavoriteYogaSessionScalarFieldEnum[]
  }

  /**
   * FavoriteYogaSession create
   */
  export type FavoriteYogaSessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteYogaSession
     */
    select?: FavoriteYogaSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteYogaSessionInclude<ExtArgs> | null
    /**
     * The data needed to create a FavoriteYogaSession.
     */
    data: XOR<FavoriteYogaSessionCreateInput, FavoriteYogaSessionUncheckedCreateInput>
  }

  /**
   * FavoriteYogaSession createMany
   */
  export type FavoriteYogaSessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FavoriteYogaSessions.
     */
    data: FavoriteYogaSessionCreateManyInput | FavoriteYogaSessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FavoriteYogaSession createManyAndReturn
   */
  export type FavoriteYogaSessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteYogaSession
     */
    select?: FavoriteYogaSessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many FavoriteYogaSessions.
     */
    data: FavoriteYogaSessionCreateManyInput | FavoriteYogaSessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteYogaSessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FavoriteYogaSession update
   */
  export type FavoriteYogaSessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteYogaSession
     */
    select?: FavoriteYogaSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteYogaSessionInclude<ExtArgs> | null
    /**
     * The data needed to update a FavoriteYogaSession.
     */
    data: XOR<FavoriteYogaSessionUpdateInput, FavoriteYogaSessionUncheckedUpdateInput>
    /**
     * Choose, which FavoriteYogaSession to update.
     */
    where: FavoriteYogaSessionWhereUniqueInput
  }

  /**
   * FavoriteYogaSession updateMany
   */
  export type FavoriteYogaSessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FavoriteYogaSessions.
     */
    data: XOR<FavoriteYogaSessionUpdateManyMutationInput, FavoriteYogaSessionUncheckedUpdateManyInput>
    /**
     * Filter which FavoriteYogaSessions to update
     */
    where?: FavoriteYogaSessionWhereInput
  }

  /**
   * FavoriteYogaSession upsert
   */
  export type FavoriteYogaSessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteYogaSession
     */
    select?: FavoriteYogaSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteYogaSessionInclude<ExtArgs> | null
    /**
     * The filter to search for the FavoriteYogaSession to update in case it exists.
     */
    where: FavoriteYogaSessionWhereUniqueInput
    /**
     * In case the FavoriteYogaSession found by the `where` argument doesn't exist, create a new FavoriteYogaSession with this data.
     */
    create: XOR<FavoriteYogaSessionCreateInput, FavoriteYogaSessionUncheckedCreateInput>
    /**
     * In case the FavoriteYogaSession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FavoriteYogaSessionUpdateInput, FavoriteYogaSessionUncheckedUpdateInput>
  }

  /**
   * FavoriteYogaSession delete
   */
  export type FavoriteYogaSessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteYogaSession
     */
    select?: FavoriteYogaSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteYogaSessionInclude<ExtArgs> | null
    /**
     * Filter which FavoriteYogaSession to delete.
     */
    where: FavoriteYogaSessionWhereUniqueInput
  }

  /**
   * FavoriteYogaSession deleteMany
   */
  export type FavoriteYogaSessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FavoriteYogaSessions to delete
     */
    where?: FavoriteYogaSessionWhereInput
  }

  /**
   * FavoriteYogaSession without action
   */
  export type FavoriteYogaSessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteYogaSession
     */
    select?: FavoriteYogaSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteYogaSessionInclude<ExtArgs> | null
  }


  /**
   * Model FavoriteRecipe
   */

  export type AggregateFavoriteRecipe = {
    _count: FavoriteRecipeCountAggregateOutputType | null
    _avg: FavoriteRecipeAvgAggregateOutputType | null
    _sum: FavoriteRecipeSumAggregateOutputType | null
    _min: FavoriteRecipeMinAggregateOutputType | null
    _max: FavoriteRecipeMaxAggregateOutputType | null
  }

  export type FavoriteRecipeAvgAggregateOutputType = {
    recipeId: number | null
  }

  export type FavoriteRecipeSumAggregateOutputType = {
    recipeId: number | null
  }

  export type FavoriteRecipeMinAggregateOutputType = {
    id: string | null
    userId: string | null
    recipeId: number | null
    addedAt: Date | null
  }

  export type FavoriteRecipeMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    recipeId: number | null
    addedAt: Date | null
  }

  export type FavoriteRecipeCountAggregateOutputType = {
    id: number
    userId: number
    recipeId: number
    addedAt: number
    _all: number
  }


  export type FavoriteRecipeAvgAggregateInputType = {
    recipeId?: true
  }

  export type FavoriteRecipeSumAggregateInputType = {
    recipeId?: true
  }

  export type FavoriteRecipeMinAggregateInputType = {
    id?: true
    userId?: true
    recipeId?: true
    addedAt?: true
  }

  export type FavoriteRecipeMaxAggregateInputType = {
    id?: true
    userId?: true
    recipeId?: true
    addedAt?: true
  }

  export type FavoriteRecipeCountAggregateInputType = {
    id?: true
    userId?: true
    recipeId?: true
    addedAt?: true
    _all?: true
  }

  export type FavoriteRecipeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FavoriteRecipe to aggregate.
     */
    where?: FavoriteRecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FavoriteRecipes to fetch.
     */
    orderBy?: FavoriteRecipeOrderByWithRelationInput | FavoriteRecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FavoriteRecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FavoriteRecipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FavoriteRecipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FavoriteRecipes
    **/
    _count?: true | FavoriteRecipeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FavoriteRecipeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FavoriteRecipeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FavoriteRecipeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FavoriteRecipeMaxAggregateInputType
  }

  export type GetFavoriteRecipeAggregateType<T extends FavoriteRecipeAggregateArgs> = {
        [P in keyof T & keyof AggregateFavoriteRecipe]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFavoriteRecipe[P]>
      : GetScalarType<T[P], AggregateFavoriteRecipe[P]>
  }




  export type FavoriteRecipeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FavoriteRecipeWhereInput
    orderBy?: FavoriteRecipeOrderByWithAggregationInput | FavoriteRecipeOrderByWithAggregationInput[]
    by: FavoriteRecipeScalarFieldEnum[] | FavoriteRecipeScalarFieldEnum
    having?: FavoriteRecipeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FavoriteRecipeCountAggregateInputType | true
    _avg?: FavoriteRecipeAvgAggregateInputType
    _sum?: FavoriteRecipeSumAggregateInputType
    _min?: FavoriteRecipeMinAggregateInputType
    _max?: FavoriteRecipeMaxAggregateInputType
  }

  export type FavoriteRecipeGroupByOutputType = {
    id: string
    userId: string
    recipeId: number
    addedAt: Date
    _count: FavoriteRecipeCountAggregateOutputType | null
    _avg: FavoriteRecipeAvgAggregateOutputType | null
    _sum: FavoriteRecipeSumAggregateOutputType | null
    _min: FavoriteRecipeMinAggregateOutputType | null
    _max: FavoriteRecipeMaxAggregateOutputType | null
  }

  type GetFavoriteRecipeGroupByPayload<T extends FavoriteRecipeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FavoriteRecipeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FavoriteRecipeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FavoriteRecipeGroupByOutputType[P]>
            : GetScalarType<T[P], FavoriteRecipeGroupByOutputType[P]>
        }
      >
    >


  export type FavoriteRecipeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    recipeId?: boolean
    addedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["favoriteRecipe"]>

  export type FavoriteRecipeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    recipeId?: boolean
    addedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["favoriteRecipe"]>

  export type FavoriteRecipeSelectScalar = {
    id?: boolean
    userId?: boolean
    recipeId?: boolean
    addedAt?: boolean
  }

  export type FavoriteRecipeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
  }
  export type FavoriteRecipeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
  }

  export type $FavoriteRecipePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FavoriteRecipe"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      recipe: Prisma.$RecipePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      recipeId: number
      addedAt: Date
    }, ExtArgs["result"]["favoriteRecipe"]>
    composites: {}
  }

  type FavoriteRecipeGetPayload<S extends boolean | null | undefined | FavoriteRecipeDefaultArgs> = $Result.GetResult<Prisma.$FavoriteRecipePayload, S>

  type FavoriteRecipeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FavoriteRecipeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FavoriteRecipeCountAggregateInputType | true
    }

  export interface FavoriteRecipeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FavoriteRecipe'], meta: { name: 'FavoriteRecipe' } }
    /**
     * Find zero or one FavoriteRecipe that matches the filter.
     * @param {FavoriteRecipeFindUniqueArgs} args - Arguments to find a FavoriteRecipe
     * @example
     * // Get one FavoriteRecipe
     * const favoriteRecipe = await prisma.favoriteRecipe.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FavoriteRecipeFindUniqueArgs>(args: SelectSubset<T, FavoriteRecipeFindUniqueArgs<ExtArgs>>): Prisma__FavoriteRecipeClient<$Result.GetResult<Prisma.$FavoriteRecipePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one FavoriteRecipe that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FavoriteRecipeFindUniqueOrThrowArgs} args - Arguments to find a FavoriteRecipe
     * @example
     * // Get one FavoriteRecipe
     * const favoriteRecipe = await prisma.favoriteRecipe.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FavoriteRecipeFindUniqueOrThrowArgs>(args: SelectSubset<T, FavoriteRecipeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FavoriteRecipeClient<$Result.GetResult<Prisma.$FavoriteRecipePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first FavoriteRecipe that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteRecipeFindFirstArgs} args - Arguments to find a FavoriteRecipe
     * @example
     * // Get one FavoriteRecipe
     * const favoriteRecipe = await prisma.favoriteRecipe.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FavoriteRecipeFindFirstArgs>(args?: SelectSubset<T, FavoriteRecipeFindFirstArgs<ExtArgs>>): Prisma__FavoriteRecipeClient<$Result.GetResult<Prisma.$FavoriteRecipePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first FavoriteRecipe that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteRecipeFindFirstOrThrowArgs} args - Arguments to find a FavoriteRecipe
     * @example
     * // Get one FavoriteRecipe
     * const favoriteRecipe = await prisma.favoriteRecipe.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FavoriteRecipeFindFirstOrThrowArgs>(args?: SelectSubset<T, FavoriteRecipeFindFirstOrThrowArgs<ExtArgs>>): Prisma__FavoriteRecipeClient<$Result.GetResult<Prisma.$FavoriteRecipePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more FavoriteRecipes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteRecipeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FavoriteRecipes
     * const favoriteRecipes = await prisma.favoriteRecipe.findMany()
     * 
     * // Get first 10 FavoriteRecipes
     * const favoriteRecipes = await prisma.favoriteRecipe.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const favoriteRecipeWithIdOnly = await prisma.favoriteRecipe.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FavoriteRecipeFindManyArgs>(args?: SelectSubset<T, FavoriteRecipeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoriteRecipePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a FavoriteRecipe.
     * @param {FavoriteRecipeCreateArgs} args - Arguments to create a FavoriteRecipe.
     * @example
     * // Create one FavoriteRecipe
     * const FavoriteRecipe = await prisma.favoriteRecipe.create({
     *   data: {
     *     // ... data to create a FavoriteRecipe
     *   }
     * })
     * 
     */
    create<T extends FavoriteRecipeCreateArgs>(args: SelectSubset<T, FavoriteRecipeCreateArgs<ExtArgs>>): Prisma__FavoriteRecipeClient<$Result.GetResult<Prisma.$FavoriteRecipePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many FavoriteRecipes.
     * @param {FavoriteRecipeCreateManyArgs} args - Arguments to create many FavoriteRecipes.
     * @example
     * // Create many FavoriteRecipes
     * const favoriteRecipe = await prisma.favoriteRecipe.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FavoriteRecipeCreateManyArgs>(args?: SelectSubset<T, FavoriteRecipeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FavoriteRecipes and returns the data saved in the database.
     * @param {FavoriteRecipeCreateManyAndReturnArgs} args - Arguments to create many FavoriteRecipes.
     * @example
     * // Create many FavoriteRecipes
     * const favoriteRecipe = await prisma.favoriteRecipe.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FavoriteRecipes and only return the `id`
     * const favoriteRecipeWithIdOnly = await prisma.favoriteRecipe.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FavoriteRecipeCreateManyAndReturnArgs>(args?: SelectSubset<T, FavoriteRecipeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoriteRecipePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a FavoriteRecipe.
     * @param {FavoriteRecipeDeleteArgs} args - Arguments to delete one FavoriteRecipe.
     * @example
     * // Delete one FavoriteRecipe
     * const FavoriteRecipe = await prisma.favoriteRecipe.delete({
     *   where: {
     *     // ... filter to delete one FavoriteRecipe
     *   }
     * })
     * 
     */
    delete<T extends FavoriteRecipeDeleteArgs>(args: SelectSubset<T, FavoriteRecipeDeleteArgs<ExtArgs>>): Prisma__FavoriteRecipeClient<$Result.GetResult<Prisma.$FavoriteRecipePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one FavoriteRecipe.
     * @param {FavoriteRecipeUpdateArgs} args - Arguments to update one FavoriteRecipe.
     * @example
     * // Update one FavoriteRecipe
     * const favoriteRecipe = await prisma.favoriteRecipe.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FavoriteRecipeUpdateArgs>(args: SelectSubset<T, FavoriteRecipeUpdateArgs<ExtArgs>>): Prisma__FavoriteRecipeClient<$Result.GetResult<Prisma.$FavoriteRecipePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more FavoriteRecipes.
     * @param {FavoriteRecipeDeleteManyArgs} args - Arguments to filter FavoriteRecipes to delete.
     * @example
     * // Delete a few FavoriteRecipes
     * const { count } = await prisma.favoriteRecipe.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FavoriteRecipeDeleteManyArgs>(args?: SelectSubset<T, FavoriteRecipeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FavoriteRecipes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteRecipeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FavoriteRecipes
     * const favoriteRecipe = await prisma.favoriteRecipe.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FavoriteRecipeUpdateManyArgs>(args: SelectSubset<T, FavoriteRecipeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FavoriteRecipe.
     * @param {FavoriteRecipeUpsertArgs} args - Arguments to update or create a FavoriteRecipe.
     * @example
     * // Update or create a FavoriteRecipe
     * const favoriteRecipe = await prisma.favoriteRecipe.upsert({
     *   create: {
     *     // ... data to create a FavoriteRecipe
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FavoriteRecipe we want to update
     *   }
     * })
     */
    upsert<T extends FavoriteRecipeUpsertArgs>(args: SelectSubset<T, FavoriteRecipeUpsertArgs<ExtArgs>>): Prisma__FavoriteRecipeClient<$Result.GetResult<Prisma.$FavoriteRecipePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of FavoriteRecipes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteRecipeCountArgs} args - Arguments to filter FavoriteRecipes to count.
     * @example
     * // Count the number of FavoriteRecipes
     * const count = await prisma.favoriteRecipe.count({
     *   where: {
     *     // ... the filter for the FavoriteRecipes we want to count
     *   }
     * })
    **/
    count<T extends FavoriteRecipeCountArgs>(
      args?: Subset<T, FavoriteRecipeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FavoriteRecipeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FavoriteRecipe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteRecipeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FavoriteRecipeAggregateArgs>(args: Subset<T, FavoriteRecipeAggregateArgs>): Prisma.PrismaPromise<GetFavoriteRecipeAggregateType<T>>

    /**
     * Group by FavoriteRecipe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteRecipeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FavoriteRecipeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FavoriteRecipeGroupByArgs['orderBy'] }
        : { orderBy?: FavoriteRecipeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FavoriteRecipeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFavoriteRecipeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FavoriteRecipe model
   */
  readonly fields: FavoriteRecipeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FavoriteRecipe.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FavoriteRecipeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    recipe<T extends RecipeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RecipeDefaultArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FavoriteRecipe model
   */ 
  interface FavoriteRecipeFieldRefs {
    readonly id: FieldRef<"FavoriteRecipe", 'String'>
    readonly userId: FieldRef<"FavoriteRecipe", 'String'>
    readonly recipeId: FieldRef<"FavoriteRecipe", 'Int'>
    readonly addedAt: FieldRef<"FavoriteRecipe", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FavoriteRecipe findUnique
   */
  export type FavoriteRecipeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteRecipe
     */
    select?: FavoriteRecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteRecipeInclude<ExtArgs> | null
    /**
     * Filter, which FavoriteRecipe to fetch.
     */
    where: FavoriteRecipeWhereUniqueInput
  }

  /**
   * FavoriteRecipe findUniqueOrThrow
   */
  export type FavoriteRecipeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteRecipe
     */
    select?: FavoriteRecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteRecipeInclude<ExtArgs> | null
    /**
     * Filter, which FavoriteRecipe to fetch.
     */
    where: FavoriteRecipeWhereUniqueInput
  }

  /**
   * FavoriteRecipe findFirst
   */
  export type FavoriteRecipeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteRecipe
     */
    select?: FavoriteRecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteRecipeInclude<ExtArgs> | null
    /**
     * Filter, which FavoriteRecipe to fetch.
     */
    where?: FavoriteRecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FavoriteRecipes to fetch.
     */
    orderBy?: FavoriteRecipeOrderByWithRelationInput | FavoriteRecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FavoriteRecipes.
     */
    cursor?: FavoriteRecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FavoriteRecipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FavoriteRecipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FavoriteRecipes.
     */
    distinct?: FavoriteRecipeScalarFieldEnum | FavoriteRecipeScalarFieldEnum[]
  }

  /**
   * FavoriteRecipe findFirstOrThrow
   */
  export type FavoriteRecipeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteRecipe
     */
    select?: FavoriteRecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteRecipeInclude<ExtArgs> | null
    /**
     * Filter, which FavoriteRecipe to fetch.
     */
    where?: FavoriteRecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FavoriteRecipes to fetch.
     */
    orderBy?: FavoriteRecipeOrderByWithRelationInput | FavoriteRecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FavoriteRecipes.
     */
    cursor?: FavoriteRecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FavoriteRecipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FavoriteRecipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FavoriteRecipes.
     */
    distinct?: FavoriteRecipeScalarFieldEnum | FavoriteRecipeScalarFieldEnum[]
  }

  /**
   * FavoriteRecipe findMany
   */
  export type FavoriteRecipeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteRecipe
     */
    select?: FavoriteRecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteRecipeInclude<ExtArgs> | null
    /**
     * Filter, which FavoriteRecipes to fetch.
     */
    where?: FavoriteRecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FavoriteRecipes to fetch.
     */
    orderBy?: FavoriteRecipeOrderByWithRelationInput | FavoriteRecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FavoriteRecipes.
     */
    cursor?: FavoriteRecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FavoriteRecipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FavoriteRecipes.
     */
    skip?: number
    distinct?: FavoriteRecipeScalarFieldEnum | FavoriteRecipeScalarFieldEnum[]
  }

  /**
   * FavoriteRecipe create
   */
  export type FavoriteRecipeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteRecipe
     */
    select?: FavoriteRecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteRecipeInclude<ExtArgs> | null
    /**
     * The data needed to create a FavoriteRecipe.
     */
    data: XOR<FavoriteRecipeCreateInput, FavoriteRecipeUncheckedCreateInput>
  }

  /**
   * FavoriteRecipe createMany
   */
  export type FavoriteRecipeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FavoriteRecipes.
     */
    data: FavoriteRecipeCreateManyInput | FavoriteRecipeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FavoriteRecipe createManyAndReturn
   */
  export type FavoriteRecipeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteRecipe
     */
    select?: FavoriteRecipeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many FavoriteRecipes.
     */
    data: FavoriteRecipeCreateManyInput | FavoriteRecipeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteRecipeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FavoriteRecipe update
   */
  export type FavoriteRecipeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteRecipe
     */
    select?: FavoriteRecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteRecipeInclude<ExtArgs> | null
    /**
     * The data needed to update a FavoriteRecipe.
     */
    data: XOR<FavoriteRecipeUpdateInput, FavoriteRecipeUncheckedUpdateInput>
    /**
     * Choose, which FavoriteRecipe to update.
     */
    where: FavoriteRecipeWhereUniqueInput
  }

  /**
   * FavoriteRecipe updateMany
   */
  export type FavoriteRecipeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FavoriteRecipes.
     */
    data: XOR<FavoriteRecipeUpdateManyMutationInput, FavoriteRecipeUncheckedUpdateManyInput>
    /**
     * Filter which FavoriteRecipes to update
     */
    where?: FavoriteRecipeWhereInput
  }

  /**
   * FavoriteRecipe upsert
   */
  export type FavoriteRecipeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteRecipe
     */
    select?: FavoriteRecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteRecipeInclude<ExtArgs> | null
    /**
     * The filter to search for the FavoriteRecipe to update in case it exists.
     */
    where: FavoriteRecipeWhereUniqueInput
    /**
     * In case the FavoriteRecipe found by the `where` argument doesn't exist, create a new FavoriteRecipe with this data.
     */
    create: XOR<FavoriteRecipeCreateInput, FavoriteRecipeUncheckedCreateInput>
    /**
     * In case the FavoriteRecipe was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FavoriteRecipeUpdateInput, FavoriteRecipeUncheckedUpdateInput>
  }

  /**
   * FavoriteRecipe delete
   */
  export type FavoriteRecipeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteRecipe
     */
    select?: FavoriteRecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteRecipeInclude<ExtArgs> | null
    /**
     * Filter which FavoriteRecipe to delete.
     */
    where: FavoriteRecipeWhereUniqueInput
  }

  /**
   * FavoriteRecipe deleteMany
   */
  export type FavoriteRecipeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FavoriteRecipes to delete
     */
    where?: FavoriteRecipeWhereInput
  }

  /**
   * FavoriteRecipe without action
   */
  export type FavoriteRecipeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteRecipe
     */
    select?: FavoriteRecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteRecipeInclude<ExtArgs> | null
  }


  /**
   * Model WeightHistory
   */

  export type AggregateWeightHistory = {
    _count: WeightHistoryCountAggregateOutputType | null
    _avg: WeightHistoryAvgAggregateOutputType | null
    _sum: WeightHistorySumAggregateOutputType | null
    _min: WeightHistoryMinAggregateOutputType | null
    _max: WeightHistoryMaxAggregateOutputType | null
  }

  export type WeightHistoryAvgAggregateOutputType = {
    weight: number | null
  }

  export type WeightHistorySumAggregateOutputType = {
    weight: number | null
  }

  export type WeightHistoryMinAggregateOutputType = {
    id: string | null
    userId: string | null
    weight: number | null
    date: Date | null
    notes: string | null
  }

  export type WeightHistoryMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    weight: number | null
    date: Date | null
    notes: string | null
  }

  export type WeightHistoryCountAggregateOutputType = {
    id: number
    userId: number
    weight: number
    date: number
    notes: number
    _all: number
  }


  export type WeightHistoryAvgAggregateInputType = {
    weight?: true
  }

  export type WeightHistorySumAggregateInputType = {
    weight?: true
  }

  export type WeightHistoryMinAggregateInputType = {
    id?: true
    userId?: true
    weight?: true
    date?: true
    notes?: true
  }

  export type WeightHistoryMaxAggregateInputType = {
    id?: true
    userId?: true
    weight?: true
    date?: true
    notes?: true
  }

  export type WeightHistoryCountAggregateInputType = {
    id?: true
    userId?: true
    weight?: true
    date?: true
    notes?: true
    _all?: true
  }

  export type WeightHistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WeightHistory to aggregate.
     */
    where?: WeightHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WeightHistories to fetch.
     */
    orderBy?: WeightHistoryOrderByWithRelationInput | WeightHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WeightHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WeightHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WeightHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WeightHistories
    **/
    _count?: true | WeightHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WeightHistoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WeightHistorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WeightHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WeightHistoryMaxAggregateInputType
  }

  export type GetWeightHistoryAggregateType<T extends WeightHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateWeightHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWeightHistory[P]>
      : GetScalarType<T[P], AggregateWeightHistory[P]>
  }




  export type WeightHistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WeightHistoryWhereInput
    orderBy?: WeightHistoryOrderByWithAggregationInput | WeightHistoryOrderByWithAggregationInput[]
    by: WeightHistoryScalarFieldEnum[] | WeightHistoryScalarFieldEnum
    having?: WeightHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WeightHistoryCountAggregateInputType | true
    _avg?: WeightHistoryAvgAggregateInputType
    _sum?: WeightHistorySumAggregateInputType
    _min?: WeightHistoryMinAggregateInputType
    _max?: WeightHistoryMaxAggregateInputType
  }

  export type WeightHistoryGroupByOutputType = {
    id: string
    userId: string
    weight: number
    date: Date
    notes: string | null
    _count: WeightHistoryCountAggregateOutputType | null
    _avg: WeightHistoryAvgAggregateOutputType | null
    _sum: WeightHistorySumAggregateOutputType | null
    _min: WeightHistoryMinAggregateOutputType | null
    _max: WeightHistoryMaxAggregateOutputType | null
  }

  type GetWeightHistoryGroupByPayload<T extends WeightHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WeightHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WeightHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WeightHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], WeightHistoryGroupByOutputType[P]>
        }
      >
    >


  export type WeightHistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    weight?: boolean
    date?: boolean
    notes?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["weightHistory"]>

  export type WeightHistorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    weight?: boolean
    date?: boolean
    notes?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["weightHistory"]>

  export type WeightHistorySelectScalar = {
    id?: boolean
    userId?: boolean
    weight?: boolean
    date?: boolean
    notes?: boolean
  }

  export type WeightHistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type WeightHistoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $WeightHistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WeightHistory"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      weight: number
      date: Date
      notes: string | null
    }, ExtArgs["result"]["weightHistory"]>
    composites: {}
  }

  type WeightHistoryGetPayload<S extends boolean | null | undefined | WeightHistoryDefaultArgs> = $Result.GetResult<Prisma.$WeightHistoryPayload, S>

  type WeightHistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WeightHistoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WeightHistoryCountAggregateInputType | true
    }

  export interface WeightHistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WeightHistory'], meta: { name: 'WeightHistory' } }
    /**
     * Find zero or one WeightHistory that matches the filter.
     * @param {WeightHistoryFindUniqueArgs} args - Arguments to find a WeightHistory
     * @example
     * // Get one WeightHistory
     * const weightHistory = await prisma.weightHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WeightHistoryFindUniqueArgs>(args: SelectSubset<T, WeightHistoryFindUniqueArgs<ExtArgs>>): Prisma__WeightHistoryClient<$Result.GetResult<Prisma.$WeightHistoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one WeightHistory that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {WeightHistoryFindUniqueOrThrowArgs} args - Arguments to find a WeightHistory
     * @example
     * // Get one WeightHistory
     * const weightHistory = await prisma.weightHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WeightHistoryFindUniqueOrThrowArgs>(args: SelectSubset<T, WeightHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WeightHistoryClient<$Result.GetResult<Prisma.$WeightHistoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first WeightHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeightHistoryFindFirstArgs} args - Arguments to find a WeightHistory
     * @example
     * // Get one WeightHistory
     * const weightHistory = await prisma.weightHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WeightHistoryFindFirstArgs>(args?: SelectSubset<T, WeightHistoryFindFirstArgs<ExtArgs>>): Prisma__WeightHistoryClient<$Result.GetResult<Prisma.$WeightHistoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first WeightHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeightHistoryFindFirstOrThrowArgs} args - Arguments to find a WeightHistory
     * @example
     * // Get one WeightHistory
     * const weightHistory = await prisma.weightHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WeightHistoryFindFirstOrThrowArgs>(args?: SelectSubset<T, WeightHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__WeightHistoryClient<$Result.GetResult<Prisma.$WeightHistoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more WeightHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeightHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WeightHistories
     * const weightHistories = await prisma.weightHistory.findMany()
     * 
     * // Get first 10 WeightHistories
     * const weightHistories = await prisma.weightHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const weightHistoryWithIdOnly = await prisma.weightHistory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WeightHistoryFindManyArgs>(args?: SelectSubset<T, WeightHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WeightHistoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a WeightHistory.
     * @param {WeightHistoryCreateArgs} args - Arguments to create a WeightHistory.
     * @example
     * // Create one WeightHistory
     * const WeightHistory = await prisma.weightHistory.create({
     *   data: {
     *     // ... data to create a WeightHistory
     *   }
     * })
     * 
     */
    create<T extends WeightHistoryCreateArgs>(args: SelectSubset<T, WeightHistoryCreateArgs<ExtArgs>>): Prisma__WeightHistoryClient<$Result.GetResult<Prisma.$WeightHistoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many WeightHistories.
     * @param {WeightHistoryCreateManyArgs} args - Arguments to create many WeightHistories.
     * @example
     * // Create many WeightHistories
     * const weightHistory = await prisma.weightHistory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WeightHistoryCreateManyArgs>(args?: SelectSubset<T, WeightHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WeightHistories and returns the data saved in the database.
     * @param {WeightHistoryCreateManyAndReturnArgs} args - Arguments to create many WeightHistories.
     * @example
     * // Create many WeightHistories
     * const weightHistory = await prisma.weightHistory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WeightHistories and only return the `id`
     * const weightHistoryWithIdOnly = await prisma.weightHistory.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WeightHistoryCreateManyAndReturnArgs>(args?: SelectSubset<T, WeightHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WeightHistoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a WeightHistory.
     * @param {WeightHistoryDeleteArgs} args - Arguments to delete one WeightHistory.
     * @example
     * // Delete one WeightHistory
     * const WeightHistory = await prisma.weightHistory.delete({
     *   where: {
     *     // ... filter to delete one WeightHistory
     *   }
     * })
     * 
     */
    delete<T extends WeightHistoryDeleteArgs>(args: SelectSubset<T, WeightHistoryDeleteArgs<ExtArgs>>): Prisma__WeightHistoryClient<$Result.GetResult<Prisma.$WeightHistoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one WeightHistory.
     * @param {WeightHistoryUpdateArgs} args - Arguments to update one WeightHistory.
     * @example
     * // Update one WeightHistory
     * const weightHistory = await prisma.weightHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WeightHistoryUpdateArgs>(args: SelectSubset<T, WeightHistoryUpdateArgs<ExtArgs>>): Prisma__WeightHistoryClient<$Result.GetResult<Prisma.$WeightHistoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more WeightHistories.
     * @param {WeightHistoryDeleteManyArgs} args - Arguments to filter WeightHistories to delete.
     * @example
     * // Delete a few WeightHistories
     * const { count } = await prisma.weightHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WeightHistoryDeleteManyArgs>(args?: SelectSubset<T, WeightHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WeightHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeightHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WeightHistories
     * const weightHistory = await prisma.weightHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WeightHistoryUpdateManyArgs>(args: SelectSubset<T, WeightHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WeightHistory.
     * @param {WeightHistoryUpsertArgs} args - Arguments to update or create a WeightHistory.
     * @example
     * // Update or create a WeightHistory
     * const weightHistory = await prisma.weightHistory.upsert({
     *   create: {
     *     // ... data to create a WeightHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WeightHistory we want to update
     *   }
     * })
     */
    upsert<T extends WeightHistoryUpsertArgs>(args: SelectSubset<T, WeightHistoryUpsertArgs<ExtArgs>>): Prisma__WeightHistoryClient<$Result.GetResult<Prisma.$WeightHistoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of WeightHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeightHistoryCountArgs} args - Arguments to filter WeightHistories to count.
     * @example
     * // Count the number of WeightHistories
     * const count = await prisma.weightHistory.count({
     *   where: {
     *     // ... the filter for the WeightHistories we want to count
     *   }
     * })
    **/
    count<T extends WeightHistoryCountArgs>(
      args?: Subset<T, WeightHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WeightHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WeightHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeightHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WeightHistoryAggregateArgs>(args: Subset<T, WeightHistoryAggregateArgs>): Prisma.PrismaPromise<GetWeightHistoryAggregateType<T>>

    /**
     * Group by WeightHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeightHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WeightHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WeightHistoryGroupByArgs['orderBy'] }
        : { orderBy?: WeightHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WeightHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWeightHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WeightHistory model
   */
  readonly fields: WeightHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WeightHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WeightHistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WeightHistory model
   */ 
  interface WeightHistoryFieldRefs {
    readonly id: FieldRef<"WeightHistory", 'String'>
    readonly userId: FieldRef<"WeightHistory", 'String'>
    readonly weight: FieldRef<"WeightHistory", 'Float'>
    readonly date: FieldRef<"WeightHistory", 'DateTime'>
    readonly notes: FieldRef<"WeightHistory", 'String'>
  }
    

  // Custom InputTypes
  /**
   * WeightHistory findUnique
   */
  export type WeightHistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeightHistory
     */
    select?: WeightHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeightHistoryInclude<ExtArgs> | null
    /**
     * Filter, which WeightHistory to fetch.
     */
    where: WeightHistoryWhereUniqueInput
  }

  /**
   * WeightHistory findUniqueOrThrow
   */
  export type WeightHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeightHistory
     */
    select?: WeightHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeightHistoryInclude<ExtArgs> | null
    /**
     * Filter, which WeightHistory to fetch.
     */
    where: WeightHistoryWhereUniqueInput
  }

  /**
   * WeightHistory findFirst
   */
  export type WeightHistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeightHistory
     */
    select?: WeightHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeightHistoryInclude<ExtArgs> | null
    /**
     * Filter, which WeightHistory to fetch.
     */
    where?: WeightHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WeightHistories to fetch.
     */
    orderBy?: WeightHistoryOrderByWithRelationInput | WeightHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WeightHistories.
     */
    cursor?: WeightHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WeightHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WeightHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WeightHistories.
     */
    distinct?: WeightHistoryScalarFieldEnum | WeightHistoryScalarFieldEnum[]
  }

  /**
   * WeightHistory findFirstOrThrow
   */
  export type WeightHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeightHistory
     */
    select?: WeightHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeightHistoryInclude<ExtArgs> | null
    /**
     * Filter, which WeightHistory to fetch.
     */
    where?: WeightHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WeightHistories to fetch.
     */
    orderBy?: WeightHistoryOrderByWithRelationInput | WeightHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WeightHistories.
     */
    cursor?: WeightHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WeightHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WeightHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WeightHistories.
     */
    distinct?: WeightHistoryScalarFieldEnum | WeightHistoryScalarFieldEnum[]
  }

  /**
   * WeightHistory findMany
   */
  export type WeightHistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeightHistory
     */
    select?: WeightHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeightHistoryInclude<ExtArgs> | null
    /**
     * Filter, which WeightHistories to fetch.
     */
    where?: WeightHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WeightHistories to fetch.
     */
    orderBy?: WeightHistoryOrderByWithRelationInput | WeightHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WeightHistories.
     */
    cursor?: WeightHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WeightHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WeightHistories.
     */
    skip?: number
    distinct?: WeightHistoryScalarFieldEnum | WeightHistoryScalarFieldEnum[]
  }

  /**
   * WeightHistory create
   */
  export type WeightHistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeightHistory
     */
    select?: WeightHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeightHistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a WeightHistory.
     */
    data: XOR<WeightHistoryCreateInput, WeightHistoryUncheckedCreateInput>
  }

  /**
   * WeightHistory createMany
   */
  export type WeightHistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WeightHistories.
     */
    data: WeightHistoryCreateManyInput | WeightHistoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WeightHistory createManyAndReturn
   */
  export type WeightHistoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeightHistory
     */
    select?: WeightHistorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many WeightHistories.
     */
    data: WeightHistoryCreateManyInput | WeightHistoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeightHistoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WeightHistory update
   */
  export type WeightHistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeightHistory
     */
    select?: WeightHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeightHistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a WeightHistory.
     */
    data: XOR<WeightHistoryUpdateInput, WeightHistoryUncheckedUpdateInput>
    /**
     * Choose, which WeightHistory to update.
     */
    where: WeightHistoryWhereUniqueInput
  }

  /**
   * WeightHistory updateMany
   */
  export type WeightHistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WeightHistories.
     */
    data: XOR<WeightHistoryUpdateManyMutationInput, WeightHistoryUncheckedUpdateManyInput>
    /**
     * Filter which WeightHistories to update
     */
    where?: WeightHistoryWhereInput
  }

  /**
   * WeightHistory upsert
   */
  export type WeightHistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeightHistory
     */
    select?: WeightHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeightHistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the WeightHistory to update in case it exists.
     */
    where: WeightHistoryWhereUniqueInput
    /**
     * In case the WeightHistory found by the `where` argument doesn't exist, create a new WeightHistory with this data.
     */
    create: XOR<WeightHistoryCreateInput, WeightHistoryUncheckedCreateInput>
    /**
     * In case the WeightHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WeightHistoryUpdateInput, WeightHistoryUncheckedUpdateInput>
  }

  /**
   * WeightHistory delete
   */
  export type WeightHistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeightHistory
     */
    select?: WeightHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeightHistoryInclude<ExtArgs> | null
    /**
     * Filter which WeightHistory to delete.
     */
    where: WeightHistoryWhereUniqueInput
  }

  /**
   * WeightHistory deleteMany
   */
  export type WeightHistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WeightHistories to delete
     */
    where?: WeightHistoryWhereInput
  }

  /**
   * WeightHistory without action
   */
  export type WeightHistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeightHistory
     */
    select?: WeightHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeightHistoryInclude<ExtArgs> | null
  }


  /**
   * Model Achievement
   */

  export type AggregateAchievement = {
    _count: AchievementCountAggregateOutputType | null
    _min: AchievementMinAggregateOutputType | null
    _max: AchievementMaxAggregateOutputType | null
  }

  export type AchievementMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    category: string | null
    imageUrl: string | null
  }

  export type AchievementMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    category: string | null
    imageUrl: string | null
  }

  export type AchievementCountAggregateOutputType = {
    id: number
    name: number
    description: number
    category: number
    imageUrl: number
    criteria: number
    _all: number
  }


  export type AchievementMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    category?: true
    imageUrl?: true
  }

  export type AchievementMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    category?: true
    imageUrl?: true
  }

  export type AchievementCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    category?: true
    imageUrl?: true
    criteria?: true
    _all?: true
  }

  export type AchievementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Achievement to aggregate.
     */
    where?: AchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Achievements to fetch.
     */
    orderBy?: AchievementOrderByWithRelationInput | AchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Achievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Achievements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Achievements
    **/
    _count?: true | AchievementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AchievementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AchievementMaxAggregateInputType
  }

  export type GetAchievementAggregateType<T extends AchievementAggregateArgs> = {
        [P in keyof T & keyof AggregateAchievement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAchievement[P]>
      : GetScalarType<T[P], AggregateAchievement[P]>
  }




  export type AchievementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AchievementWhereInput
    orderBy?: AchievementOrderByWithAggregationInput | AchievementOrderByWithAggregationInput[]
    by: AchievementScalarFieldEnum[] | AchievementScalarFieldEnum
    having?: AchievementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AchievementCountAggregateInputType | true
    _min?: AchievementMinAggregateInputType
    _max?: AchievementMaxAggregateInputType
  }

  export type AchievementGroupByOutputType = {
    id: string
    name: string
    description: string
    category: string
    imageUrl: string | null
    criteria: JsonValue
    _count: AchievementCountAggregateOutputType | null
    _min: AchievementMinAggregateOutputType | null
    _max: AchievementMaxAggregateOutputType | null
  }

  type GetAchievementGroupByPayload<T extends AchievementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AchievementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AchievementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AchievementGroupByOutputType[P]>
            : GetScalarType<T[P], AchievementGroupByOutputType[P]>
        }
      >
    >


  export type AchievementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    imageUrl?: boolean
    criteria?: boolean
    users?: boolean | Achievement$usersArgs<ExtArgs>
    _count?: boolean | AchievementCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["achievement"]>

  export type AchievementSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    imageUrl?: boolean
    criteria?: boolean
  }, ExtArgs["result"]["achievement"]>

  export type AchievementSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    imageUrl?: boolean
    criteria?: boolean
  }

  export type AchievementInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Achievement$usersArgs<ExtArgs>
    _count?: boolean | AchievementCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AchievementIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $AchievementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Achievement"
    objects: {
      users: Prisma.$UserAchievementPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string
      category: string
      imageUrl: string | null
      criteria: Prisma.JsonValue
    }, ExtArgs["result"]["achievement"]>
    composites: {}
  }

  type AchievementGetPayload<S extends boolean | null | undefined | AchievementDefaultArgs> = $Result.GetResult<Prisma.$AchievementPayload, S>

  type AchievementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AchievementFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AchievementCountAggregateInputType | true
    }

  export interface AchievementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Achievement'], meta: { name: 'Achievement' } }
    /**
     * Find zero or one Achievement that matches the filter.
     * @param {AchievementFindUniqueArgs} args - Arguments to find a Achievement
     * @example
     * // Get one Achievement
     * const achievement = await prisma.achievement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AchievementFindUniqueArgs>(args: SelectSubset<T, AchievementFindUniqueArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Achievement that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AchievementFindUniqueOrThrowArgs} args - Arguments to find a Achievement
     * @example
     * // Get one Achievement
     * const achievement = await prisma.achievement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AchievementFindUniqueOrThrowArgs>(args: SelectSubset<T, AchievementFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Achievement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementFindFirstArgs} args - Arguments to find a Achievement
     * @example
     * // Get one Achievement
     * const achievement = await prisma.achievement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AchievementFindFirstArgs>(args?: SelectSubset<T, AchievementFindFirstArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Achievement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementFindFirstOrThrowArgs} args - Arguments to find a Achievement
     * @example
     * // Get one Achievement
     * const achievement = await prisma.achievement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AchievementFindFirstOrThrowArgs>(args?: SelectSubset<T, AchievementFindFirstOrThrowArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Achievements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Achievements
     * const achievements = await prisma.achievement.findMany()
     * 
     * // Get first 10 Achievements
     * const achievements = await prisma.achievement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const achievementWithIdOnly = await prisma.achievement.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AchievementFindManyArgs>(args?: SelectSubset<T, AchievementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Achievement.
     * @param {AchievementCreateArgs} args - Arguments to create a Achievement.
     * @example
     * // Create one Achievement
     * const Achievement = await prisma.achievement.create({
     *   data: {
     *     // ... data to create a Achievement
     *   }
     * })
     * 
     */
    create<T extends AchievementCreateArgs>(args: SelectSubset<T, AchievementCreateArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Achievements.
     * @param {AchievementCreateManyArgs} args - Arguments to create many Achievements.
     * @example
     * // Create many Achievements
     * const achievement = await prisma.achievement.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AchievementCreateManyArgs>(args?: SelectSubset<T, AchievementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Achievements and returns the data saved in the database.
     * @param {AchievementCreateManyAndReturnArgs} args - Arguments to create many Achievements.
     * @example
     * // Create many Achievements
     * const achievement = await prisma.achievement.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Achievements and only return the `id`
     * const achievementWithIdOnly = await prisma.achievement.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AchievementCreateManyAndReturnArgs>(args?: SelectSubset<T, AchievementCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Achievement.
     * @param {AchievementDeleteArgs} args - Arguments to delete one Achievement.
     * @example
     * // Delete one Achievement
     * const Achievement = await prisma.achievement.delete({
     *   where: {
     *     // ... filter to delete one Achievement
     *   }
     * })
     * 
     */
    delete<T extends AchievementDeleteArgs>(args: SelectSubset<T, AchievementDeleteArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Achievement.
     * @param {AchievementUpdateArgs} args - Arguments to update one Achievement.
     * @example
     * // Update one Achievement
     * const achievement = await prisma.achievement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AchievementUpdateArgs>(args: SelectSubset<T, AchievementUpdateArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Achievements.
     * @param {AchievementDeleteManyArgs} args - Arguments to filter Achievements to delete.
     * @example
     * // Delete a few Achievements
     * const { count } = await prisma.achievement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AchievementDeleteManyArgs>(args?: SelectSubset<T, AchievementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Achievements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Achievements
     * const achievement = await prisma.achievement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AchievementUpdateManyArgs>(args: SelectSubset<T, AchievementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Achievement.
     * @param {AchievementUpsertArgs} args - Arguments to update or create a Achievement.
     * @example
     * // Update or create a Achievement
     * const achievement = await prisma.achievement.upsert({
     *   create: {
     *     // ... data to create a Achievement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Achievement we want to update
     *   }
     * })
     */
    upsert<T extends AchievementUpsertArgs>(args: SelectSubset<T, AchievementUpsertArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Achievements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementCountArgs} args - Arguments to filter Achievements to count.
     * @example
     * // Count the number of Achievements
     * const count = await prisma.achievement.count({
     *   where: {
     *     // ... the filter for the Achievements we want to count
     *   }
     * })
    **/
    count<T extends AchievementCountArgs>(
      args?: Subset<T, AchievementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AchievementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Achievement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AchievementAggregateArgs>(args: Subset<T, AchievementAggregateArgs>): Prisma.PrismaPromise<GetAchievementAggregateType<T>>

    /**
     * Group by Achievement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AchievementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AchievementGroupByArgs['orderBy'] }
        : { orderBy?: AchievementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AchievementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAchievementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Achievement model
   */
  readonly fields: AchievementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Achievement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AchievementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Achievement$usersArgs<ExtArgs> = {}>(args?: Subset<T, Achievement$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Achievement model
   */ 
  interface AchievementFieldRefs {
    readonly id: FieldRef<"Achievement", 'String'>
    readonly name: FieldRef<"Achievement", 'String'>
    readonly description: FieldRef<"Achievement", 'String'>
    readonly category: FieldRef<"Achievement", 'String'>
    readonly imageUrl: FieldRef<"Achievement", 'String'>
    readonly criteria: FieldRef<"Achievement", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * Achievement findUnique
   */
  export type AchievementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * Filter, which Achievement to fetch.
     */
    where: AchievementWhereUniqueInput
  }

  /**
   * Achievement findUniqueOrThrow
   */
  export type AchievementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * Filter, which Achievement to fetch.
     */
    where: AchievementWhereUniqueInput
  }

  /**
   * Achievement findFirst
   */
  export type AchievementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * Filter, which Achievement to fetch.
     */
    where?: AchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Achievements to fetch.
     */
    orderBy?: AchievementOrderByWithRelationInput | AchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Achievements.
     */
    cursor?: AchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Achievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Achievements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Achievements.
     */
    distinct?: AchievementScalarFieldEnum | AchievementScalarFieldEnum[]
  }

  /**
   * Achievement findFirstOrThrow
   */
  export type AchievementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * Filter, which Achievement to fetch.
     */
    where?: AchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Achievements to fetch.
     */
    orderBy?: AchievementOrderByWithRelationInput | AchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Achievements.
     */
    cursor?: AchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Achievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Achievements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Achievements.
     */
    distinct?: AchievementScalarFieldEnum | AchievementScalarFieldEnum[]
  }

  /**
   * Achievement findMany
   */
  export type AchievementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * Filter, which Achievements to fetch.
     */
    where?: AchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Achievements to fetch.
     */
    orderBy?: AchievementOrderByWithRelationInput | AchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Achievements.
     */
    cursor?: AchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Achievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Achievements.
     */
    skip?: number
    distinct?: AchievementScalarFieldEnum | AchievementScalarFieldEnum[]
  }

  /**
   * Achievement create
   */
  export type AchievementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * The data needed to create a Achievement.
     */
    data: XOR<AchievementCreateInput, AchievementUncheckedCreateInput>
  }

  /**
   * Achievement createMany
   */
  export type AchievementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Achievements.
     */
    data: AchievementCreateManyInput | AchievementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Achievement createManyAndReturn
   */
  export type AchievementCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Achievements.
     */
    data: AchievementCreateManyInput | AchievementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Achievement update
   */
  export type AchievementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * The data needed to update a Achievement.
     */
    data: XOR<AchievementUpdateInput, AchievementUncheckedUpdateInput>
    /**
     * Choose, which Achievement to update.
     */
    where: AchievementWhereUniqueInput
  }

  /**
   * Achievement updateMany
   */
  export type AchievementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Achievements.
     */
    data: XOR<AchievementUpdateManyMutationInput, AchievementUncheckedUpdateManyInput>
    /**
     * Filter which Achievements to update
     */
    where?: AchievementWhereInput
  }

  /**
   * Achievement upsert
   */
  export type AchievementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * The filter to search for the Achievement to update in case it exists.
     */
    where: AchievementWhereUniqueInput
    /**
     * In case the Achievement found by the `where` argument doesn't exist, create a new Achievement with this data.
     */
    create: XOR<AchievementCreateInput, AchievementUncheckedCreateInput>
    /**
     * In case the Achievement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AchievementUpdateInput, AchievementUncheckedUpdateInput>
  }

  /**
   * Achievement delete
   */
  export type AchievementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * Filter which Achievement to delete.
     */
    where: AchievementWhereUniqueInput
  }

  /**
   * Achievement deleteMany
   */
  export type AchievementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Achievements to delete
     */
    where?: AchievementWhereInput
  }

  /**
   * Achievement.users
   */
  export type Achievement$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    where?: UserAchievementWhereInput
    orderBy?: UserAchievementOrderByWithRelationInput | UserAchievementOrderByWithRelationInput[]
    cursor?: UserAchievementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserAchievementScalarFieldEnum | UserAchievementScalarFieldEnum[]
  }

  /**
   * Achievement without action
   */
  export type AchievementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
  }


  /**
   * Model UserAchievement
   */

  export type AggregateUserAchievement = {
    _count: UserAchievementCountAggregateOutputType | null
    _min: UserAchievementMinAggregateOutputType | null
    _max: UserAchievementMaxAggregateOutputType | null
  }

  export type UserAchievementMinAggregateOutputType = {
    id: string | null
    userId: string | null
    achievementId: string | null
    achievedAt: Date | null
  }

  export type UserAchievementMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    achievementId: string | null
    achievedAt: Date | null
  }

  export type UserAchievementCountAggregateOutputType = {
    id: number
    userId: number
    achievementId: number
    achievedAt: number
    _all: number
  }


  export type UserAchievementMinAggregateInputType = {
    id?: true
    userId?: true
    achievementId?: true
    achievedAt?: true
  }

  export type UserAchievementMaxAggregateInputType = {
    id?: true
    userId?: true
    achievementId?: true
    achievedAt?: true
  }

  export type UserAchievementCountAggregateInputType = {
    id?: true
    userId?: true
    achievementId?: true
    achievedAt?: true
    _all?: true
  }

  export type UserAchievementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserAchievement to aggregate.
     */
    where?: UserAchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAchievements to fetch.
     */
    orderBy?: UserAchievementOrderByWithRelationInput | UserAchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserAchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAchievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAchievements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserAchievements
    **/
    _count?: true | UserAchievementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserAchievementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserAchievementMaxAggregateInputType
  }

  export type GetUserAchievementAggregateType<T extends UserAchievementAggregateArgs> = {
        [P in keyof T & keyof AggregateUserAchievement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserAchievement[P]>
      : GetScalarType<T[P], AggregateUserAchievement[P]>
  }




  export type UserAchievementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserAchievementWhereInput
    orderBy?: UserAchievementOrderByWithAggregationInput | UserAchievementOrderByWithAggregationInput[]
    by: UserAchievementScalarFieldEnum[] | UserAchievementScalarFieldEnum
    having?: UserAchievementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserAchievementCountAggregateInputType | true
    _min?: UserAchievementMinAggregateInputType
    _max?: UserAchievementMaxAggregateInputType
  }

  export type UserAchievementGroupByOutputType = {
    id: string
    userId: string
    achievementId: string
    achievedAt: Date
    _count: UserAchievementCountAggregateOutputType | null
    _min: UserAchievementMinAggregateOutputType | null
    _max: UserAchievementMaxAggregateOutputType | null
  }

  type GetUserAchievementGroupByPayload<T extends UserAchievementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserAchievementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserAchievementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserAchievementGroupByOutputType[P]>
            : GetScalarType<T[P], UserAchievementGroupByOutputType[P]>
        }
      >
    >


  export type UserAchievementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    achievementId?: boolean
    achievedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    achievement?: boolean | AchievementDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userAchievement"]>

  export type UserAchievementSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    achievementId?: boolean
    achievedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    achievement?: boolean | AchievementDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userAchievement"]>

  export type UserAchievementSelectScalar = {
    id?: boolean
    userId?: boolean
    achievementId?: boolean
    achievedAt?: boolean
  }

  export type UserAchievementInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    achievement?: boolean | AchievementDefaultArgs<ExtArgs>
  }
  export type UserAchievementIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    achievement?: boolean | AchievementDefaultArgs<ExtArgs>
  }

  export type $UserAchievementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserAchievement"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      achievement: Prisma.$AchievementPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      achievementId: string
      achievedAt: Date
    }, ExtArgs["result"]["userAchievement"]>
    composites: {}
  }

  type UserAchievementGetPayload<S extends boolean | null | undefined | UserAchievementDefaultArgs> = $Result.GetResult<Prisma.$UserAchievementPayload, S>

  type UserAchievementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserAchievementFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserAchievementCountAggregateInputType | true
    }

  export interface UserAchievementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserAchievement'], meta: { name: 'UserAchievement' } }
    /**
     * Find zero or one UserAchievement that matches the filter.
     * @param {UserAchievementFindUniqueArgs} args - Arguments to find a UserAchievement
     * @example
     * // Get one UserAchievement
     * const userAchievement = await prisma.userAchievement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserAchievementFindUniqueArgs>(args: SelectSubset<T, UserAchievementFindUniqueArgs<ExtArgs>>): Prisma__UserAchievementClient<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserAchievement that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserAchievementFindUniqueOrThrowArgs} args - Arguments to find a UserAchievement
     * @example
     * // Get one UserAchievement
     * const userAchievement = await prisma.userAchievement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserAchievementFindUniqueOrThrowArgs>(args: SelectSubset<T, UserAchievementFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserAchievementClient<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserAchievement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAchievementFindFirstArgs} args - Arguments to find a UserAchievement
     * @example
     * // Get one UserAchievement
     * const userAchievement = await prisma.userAchievement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserAchievementFindFirstArgs>(args?: SelectSubset<T, UserAchievementFindFirstArgs<ExtArgs>>): Prisma__UserAchievementClient<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserAchievement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAchievementFindFirstOrThrowArgs} args - Arguments to find a UserAchievement
     * @example
     * // Get one UserAchievement
     * const userAchievement = await prisma.userAchievement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserAchievementFindFirstOrThrowArgs>(args?: SelectSubset<T, UserAchievementFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserAchievementClient<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserAchievements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAchievementFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserAchievements
     * const userAchievements = await prisma.userAchievement.findMany()
     * 
     * // Get first 10 UserAchievements
     * const userAchievements = await prisma.userAchievement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userAchievementWithIdOnly = await prisma.userAchievement.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserAchievementFindManyArgs>(args?: SelectSubset<T, UserAchievementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserAchievement.
     * @param {UserAchievementCreateArgs} args - Arguments to create a UserAchievement.
     * @example
     * // Create one UserAchievement
     * const UserAchievement = await prisma.userAchievement.create({
     *   data: {
     *     // ... data to create a UserAchievement
     *   }
     * })
     * 
     */
    create<T extends UserAchievementCreateArgs>(args: SelectSubset<T, UserAchievementCreateArgs<ExtArgs>>): Prisma__UserAchievementClient<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserAchievements.
     * @param {UserAchievementCreateManyArgs} args - Arguments to create many UserAchievements.
     * @example
     * // Create many UserAchievements
     * const userAchievement = await prisma.userAchievement.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserAchievementCreateManyArgs>(args?: SelectSubset<T, UserAchievementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserAchievements and returns the data saved in the database.
     * @param {UserAchievementCreateManyAndReturnArgs} args - Arguments to create many UserAchievements.
     * @example
     * // Create many UserAchievements
     * const userAchievement = await prisma.userAchievement.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserAchievements and only return the `id`
     * const userAchievementWithIdOnly = await prisma.userAchievement.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserAchievementCreateManyAndReturnArgs>(args?: SelectSubset<T, UserAchievementCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserAchievement.
     * @param {UserAchievementDeleteArgs} args - Arguments to delete one UserAchievement.
     * @example
     * // Delete one UserAchievement
     * const UserAchievement = await prisma.userAchievement.delete({
     *   where: {
     *     // ... filter to delete one UserAchievement
     *   }
     * })
     * 
     */
    delete<T extends UserAchievementDeleteArgs>(args: SelectSubset<T, UserAchievementDeleteArgs<ExtArgs>>): Prisma__UserAchievementClient<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserAchievement.
     * @param {UserAchievementUpdateArgs} args - Arguments to update one UserAchievement.
     * @example
     * // Update one UserAchievement
     * const userAchievement = await prisma.userAchievement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserAchievementUpdateArgs>(args: SelectSubset<T, UserAchievementUpdateArgs<ExtArgs>>): Prisma__UserAchievementClient<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserAchievements.
     * @param {UserAchievementDeleteManyArgs} args - Arguments to filter UserAchievements to delete.
     * @example
     * // Delete a few UserAchievements
     * const { count } = await prisma.userAchievement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserAchievementDeleteManyArgs>(args?: SelectSubset<T, UserAchievementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserAchievements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAchievementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserAchievements
     * const userAchievement = await prisma.userAchievement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserAchievementUpdateManyArgs>(args: SelectSubset<T, UserAchievementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserAchievement.
     * @param {UserAchievementUpsertArgs} args - Arguments to update or create a UserAchievement.
     * @example
     * // Update or create a UserAchievement
     * const userAchievement = await prisma.userAchievement.upsert({
     *   create: {
     *     // ... data to create a UserAchievement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserAchievement we want to update
     *   }
     * })
     */
    upsert<T extends UserAchievementUpsertArgs>(args: SelectSubset<T, UserAchievementUpsertArgs<ExtArgs>>): Prisma__UserAchievementClient<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserAchievements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAchievementCountArgs} args - Arguments to filter UserAchievements to count.
     * @example
     * // Count the number of UserAchievements
     * const count = await prisma.userAchievement.count({
     *   where: {
     *     // ... the filter for the UserAchievements we want to count
     *   }
     * })
    **/
    count<T extends UserAchievementCountArgs>(
      args?: Subset<T, UserAchievementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserAchievementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserAchievement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAchievementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAchievementAggregateArgs>(args: Subset<T, UserAchievementAggregateArgs>): Prisma.PrismaPromise<GetUserAchievementAggregateType<T>>

    /**
     * Group by UserAchievement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAchievementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserAchievementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserAchievementGroupByArgs['orderBy'] }
        : { orderBy?: UserAchievementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserAchievementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserAchievementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserAchievement model
   */
  readonly fields: UserAchievementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserAchievement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserAchievementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    achievement<T extends AchievementDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AchievementDefaultArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserAchievement model
   */ 
  interface UserAchievementFieldRefs {
    readonly id: FieldRef<"UserAchievement", 'String'>
    readonly userId: FieldRef<"UserAchievement", 'String'>
    readonly achievementId: FieldRef<"UserAchievement", 'String'>
    readonly achievedAt: FieldRef<"UserAchievement", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserAchievement findUnique
   */
  export type UserAchievementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    /**
     * Filter, which UserAchievement to fetch.
     */
    where: UserAchievementWhereUniqueInput
  }

  /**
   * UserAchievement findUniqueOrThrow
   */
  export type UserAchievementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    /**
     * Filter, which UserAchievement to fetch.
     */
    where: UserAchievementWhereUniqueInput
  }

  /**
   * UserAchievement findFirst
   */
  export type UserAchievementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    /**
     * Filter, which UserAchievement to fetch.
     */
    where?: UserAchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAchievements to fetch.
     */
    orderBy?: UserAchievementOrderByWithRelationInput | UserAchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserAchievements.
     */
    cursor?: UserAchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAchievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAchievements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserAchievements.
     */
    distinct?: UserAchievementScalarFieldEnum | UserAchievementScalarFieldEnum[]
  }

  /**
   * UserAchievement findFirstOrThrow
   */
  export type UserAchievementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    /**
     * Filter, which UserAchievement to fetch.
     */
    where?: UserAchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAchievements to fetch.
     */
    orderBy?: UserAchievementOrderByWithRelationInput | UserAchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserAchievements.
     */
    cursor?: UserAchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAchievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAchievements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserAchievements.
     */
    distinct?: UserAchievementScalarFieldEnum | UserAchievementScalarFieldEnum[]
  }

  /**
   * UserAchievement findMany
   */
  export type UserAchievementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    /**
     * Filter, which UserAchievements to fetch.
     */
    where?: UserAchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAchievements to fetch.
     */
    orderBy?: UserAchievementOrderByWithRelationInput | UserAchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserAchievements.
     */
    cursor?: UserAchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAchievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAchievements.
     */
    skip?: number
    distinct?: UserAchievementScalarFieldEnum | UserAchievementScalarFieldEnum[]
  }

  /**
   * UserAchievement create
   */
  export type UserAchievementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    /**
     * The data needed to create a UserAchievement.
     */
    data: XOR<UserAchievementCreateInput, UserAchievementUncheckedCreateInput>
  }

  /**
   * UserAchievement createMany
   */
  export type UserAchievementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserAchievements.
     */
    data: UserAchievementCreateManyInput | UserAchievementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserAchievement createManyAndReturn
   */
  export type UserAchievementCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserAchievements.
     */
    data: UserAchievementCreateManyInput | UserAchievementCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserAchievement update
   */
  export type UserAchievementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    /**
     * The data needed to update a UserAchievement.
     */
    data: XOR<UserAchievementUpdateInput, UserAchievementUncheckedUpdateInput>
    /**
     * Choose, which UserAchievement to update.
     */
    where: UserAchievementWhereUniqueInput
  }

  /**
   * UserAchievement updateMany
   */
  export type UserAchievementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserAchievements.
     */
    data: XOR<UserAchievementUpdateManyMutationInput, UserAchievementUncheckedUpdateManyInput>
    /**
     * Filter which UserAchievements to update
     */
    where?: UserAchievementWhereInput
  }

  /**
   * UserAchievement upsert
   */
  export type UserAchievementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    /**
     * The filter to search for the UserAchievement to update in case it exists.
     */
    where: UserAchievementWhereUniqueInput
    /**
     * In case the UserAchievement found by the `where` argument doesn't exist, create a new UserAchievement with this data.
     */
    create: XOR<UserAchievementCreateInput, UserAchievementUncheckedCreateInput>
    /**
     * In case the UserAchievement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserAchievementUpdateInput, UserAchievementUncheckedUpdateInput>
  }

  /**
   * UserAchievement delete
   */
  export type UserAchievementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    /**
     * Filter which UserAchievement to delete.
     */
    where: UserAchievementWhereUniqueInput
  }

  /**
   * UserAchievement deleteMany
   */
  export type UserAchievementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserAchievements to delete
     */
    where?: UserAchievementWhereInput
  }

  /**
   * UserAchievement without action
   */
  export type UserAchievementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    firstName: 'firstName',
    lastName: 'lastName',
    username: 'username',
    email: 'email',
    emailVerified: 'emailVerified',
    password: 'password',
    image: 'image',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    height: 'height',
    weight: 'weight',
    goalWeight: 'goalWeight',
    dateOfBirth: 'dateOfBirth',
    gender: 'gender',
    fitnessLevel: 'fitnessLevel',
    memberSince: 'memberSince'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const UserSettingsScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    notificationsEnabled: 'notificationsEnabled',
    emailNotifications: 'emailNotifications',
    darkMode: 'darkMode',
    language: 'language',
    measurementUnit: 'measurementUnit',
    privacySettings: 'privacySettings'
  };

  export type UserSettingsScalarFieldEnum = (typeof UserSettingsScalarFieldEnum)[keyof typeof UserSettingsScalarFieldEnum]


  export const WorkoutScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    category: 'category',
    difficulty: 'difficulty',
    duration: 'duration',
    calories: 'calories',
    muscleGroups: 'muscleGroups',
    imageUrl: 'imageUrl',
    videoUrl: 'videoUrl',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    rating: 'rating',
    ratingCount: 'ratingCount'
  };

  export type WorkoutScalarFieldEnum = (typeof WorkoutScalarFieldEnum)[keyof typeof WorkoutScalarFieldEnum]


  export const ExerciseScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    instructions: 'instructions',
    muscleGroups: 'muscleGroups',
    equipment: 'equipment',
    difficultyLevel: 'difficultyLevel',
    imageUrl: 'imageUrl',
    videoUrl: 'videoUrl',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ExerciseScalarFieldEnum = (typeof ExerciseScalarFieldEnum)[keyof typeof ExerciseScalarFieldEnum]


  export const WorkoutExerciseScalarFieldEnum: {
    id: 'id',
    workoutId: 'workoutId',
    exerciseId: 'exerciseId',
    sets: 'sets',
    reps: 'reps',
    weight: 'weight',
    restTime: 'restTime',
    notes: 'notes',
    order: 'order'
  };

  export type WorkoutExerciseScalarFieldEnum = (typeof WorkoutExerciseScalarFieldEnum)[keyof typeof WorkoutExerciseScalarFieldEnum]


  export const MeditationSessionScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    category: 'category',
    duration: 'duration',
    level: 'level',
    instructor: 'instructor',
    audioUrl: 'audioUrl',
    imageUrl: 'imageUrl',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    rating: 'rating',
    ratingCount: 'ratingCount'
  };

  export type MeditationSessionScalarFieldEnum = (typeof MeditationSessionScalarFieldEnum)[keyof typeof MeditationSessionScalarFieldEnum]


  export const YogaSessionScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    style: 'style',
    duration: 'duration',
    level: 'level',
    instructor: 'instructor',
    benefits: 'benefits',
    videoUrl: 'videoUrl',
    imageUrl: 'imageUrl',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    rating: 'rating',
    ratingCount: 'ratingCount'
  };

  export type YogaSessionScalarFieldEnum = (typeof YogaSessionScalarFieldEnum)[keyof typeof YogaSessionScalarFieldEnum]


  export const RecipeScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    category: 'category',
    difficulty: 'difficulty',
    prepTime: 'prepTime',
    cookTime: 'cookTime',
    servings: 'servings',
    calories: 'calories',
    protein: 'protein',
    carbs: 'carbs',
    fat: 'fat',
    tags: 'tags',
    imageUrl: 'imageUrl',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    rating: 'rating',
    ratingCount: 'ratingCount',
    author: 'author'
  };

  export type RecipeScalarFieldEnum = (typeof RecipeScalarFieldEnum)[keyof typeof RecipeScalarFieldEnum]


  export const IngredientScalarFieldEnum: {
    id: 'id',
    name: 'name',
    calories: 'calories',
    protein: 'protein',
    carbs: 'carbs',
    fat: 'fat'
  };

  export type IngredientScalarFieldEnum = (typeof IngredientScalarFieldEnum)[keyof typeof IngredientScalarFieldEnum]


  export const RecipeIngredientScalarFieldEnum: {
    id: 'id',
    recipeId: 'recipeId',
    ingredientId: 'ingredientId',
    quantity: 'quantity',
    unit: 'unit'
  };

  export type RecipeIngredientScalarFieldEnum = (typeof RecipeIngredientScalarFieldEnum)[keyof typeof RecipeIngredientScalarFieldEnum]


  export const RecipeInstructionScalarFieldEnum: {
    id: 'id',
    recipeId: 'recipeId',
    stepNumber: 'stepNumber',
    instruction: 'instruction'
  };

  export type RecipeInstructionScalarFieldEnum = (typeof RecipeInstructionScalarFieldEnum)[keyof typeof RecipeInstructionScalarFieldEnum]


  export const BlogPostScalarFieldEnum: {
    id: 'id',
    title: 'title',
    content: 'content',
    excerpt: 'excerpt',
    category: 'category',
    tags: 'tags',
    imageUrl: 'imageUrl',
    author: 'author',
    published: 'published',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    publishedAt: 'publishedAt'
  };

  export type BlogPostScalarFieldEnum = (typeof BlogPostScalarFieldEnum)[keyof typeof BlogPostScalarFieldEnum]


  export const ScheduledEventScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    title: 'title',
    date: 'date',
    time: 'time',
    duration: 'duration',
    eventType: 'eventType',
    completed: 'completed',
    notes: 'notes',
    workoutId: 'workoutId',
    meditationId: 'meditationId',
    yogaId: 'yogaId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ScheduledEventScalarFieldEnum = (typeof ScheduledEventScalarFieldEnum)[keyof typeof ScheduledEventScalarFieldEnum]


  export const WorkoutHistoryScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    workoutId: 'workoutId',
    completedAt: 'completedAt',
    duration: 'duration',
    notes: 'notes',
    rating: 'rating',
    exerciseResults: 'exerciseResults'
  };

  export type WorkoutHistoryScalarFieldEnum = (typeof WorkoutHistoryScalarFieldEnum)[keyof typeof WorkoutHistoryScalarFieldEnum]


  export const FavoriteWorkoutScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    workoutId: 'workoutId',
    addedAt: 'addedAt'
  };

  export type FavoriteWorkoutScalarFieldEnum = (typeof FavoriteWorkoutScalarFieldEnum)[keyof typeof FavoriteWorkoutScalarFieldEnum]


  export const FavoriteMeditationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    meditationId: 'meditationId',
    addedAt: 'addedAt'
  };

  export type FavoriteMeditationScalarFieldEnum = (typeof FavoriteMeditationScalarFieldEnum)[keyof typeof FavoriteMeditationScalarFieldEnum]


  export const FavoriteYogaSessionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    yogaId: 'yogaId',
    addedAt: 'addedAt'
  };

  export type FavoriteYogaSessionScalarFieldEnum = (typeof FavoriteYogaSessionScalarFieldEnum)[keyof typeof FavoriteYogaSessionScalarFieldEnum]


  export const FavoriteRecipeScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    recipeId: 'recipeId',
    addedAt: 'addedAt'
  };

  export type FavoriteRecipeScalarFieldEnum = (typeof FavoriteRecipeScalarFieldEnum)[keyof typeof FavoriteRecipeScalarFieldEnum]


  export const WeightHistoryScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    weight: 'weight',
    date: 'date',
    notes: 'notes'
  };

  export type WeightHistoryScalarFieldEnum = (typeof WeightHistoryScalarFieldEnum)[keyof typeof WeightHistoryScalarFieldEnum]


  export const AchievementScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    category: 'category',
    imageUrl: 'imageUrl',
    criteria: 'criteria'
  };

  export type AchievementScalarFieldEnum = (typeof AchievementScalarFieldEnum)[keyof typeof AchievementScalarFieldEnum]


  export const UserAchievementScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    achievementId: 'achievementId',
    achievedAt: 'achievedAt'
  };

  export type UserAchievementScalarFieldEnum = (typeof UserAchievementScalarFieldEnum)[keyof typeof UserAchievementScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    username?: StringNullableFilter<"User"> | string | null
    email?: StringFilter<"User"> | string
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    password?: StringNullableFilter<"User"> | string | null
    image?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    height?: FloatNullableFilter<"User"> | number | null
    weight?: FloatNullableFilter<"User"> | number | null
    goalWeight?: FloatNullableFilter<"User"> | number | null
    dateOfBirth?: DateTimeNullableFilter<"User"> | Date | string | null
    gender?: StringNullableFilter<"User"> | string | null
    fitnessLevel?: StringNullableFilter<"User"> | string | null
    memberSince?: DateTimeFilter<"User"> | Date | string
    workoutHistory?: WorkoutHistoryListRelationFilter
    favoriteWorkouts?: FavoriteWorkoutListRelationFilter
    favoriteMeditations?: FavoriteMeditationListRelationFilter
    favoriteYogaSessions?: FavoriteYogaSessionListRelationFilter
    favoriteRecipes?: FavoriteRecipeListRelationFilter
    scheduledEvents?: ScheduledEventListRelationFilter
    weightHistory?: WeightHistoryListRelationFilter
    achievements?: UserAchievementListRelationFilter
    settings?: XOR<UserSettingsNullableRelationFilter, UserSettingsWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    username?: SortOrderInput | SortOrder
    email?: SortOrder
    emailVerified?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    height?: SortOrderInput | SortOrder
    weight?: SortOrderInput | SortOrder
    goalWeight?: SortOrderInput | SortOrder
    dateOfBirth?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    fitnessLevel?: SortOrderInput | SortOrder
    memberSince?: SortOrder
    workoutHistory?: WorkoutHistoryOrderByRelationAggregateInput
    favoriteWorkouts?: FavoriteWorkoutOrderByRelationAggregateInput
    favoriteMeditations?: FavoriteMeditationOrderByRelationAggregateInput
    favoriteYogaSessions?: FavoriteYogaSessionOrderByRelationAggregateInput
    favoriteRecipes?: FavoriteRecipeOrderByRelationAggregateInput
    scheduledEvents?: ScheduledEventOrderByRelationAggregateInput
    weightHistory?: WeightHistoryOrderByRelationAggregateInput
    achievements?: UserAchievementOrderByRelationAggregateInput
    settings?: UserSettingsOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    username?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringNullableFilter<"User"> | string | null
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    password?: StringNullableFilter<"User"> | string | null
    image?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    height?: FloatNullableFilter<"User"> | number | null
    weight?: FloatNullableFilter<"User"> | number | null
    goalWeight?: FloatNullableFilter<"User"> | number | null
    dateOfBirth?: DateTimeNullableFilter<"User"> | Date | string | null
    gender?: StringNullableFilter<"User"> | string | null
    fitnessLevel?: StringNullableFilter<"User"> | string | null
    memberSince?: DateTimeFilter<"User"> | Date | string
    workoutHistory?: WorkoutHistoryListRelationFilter
    favoriteWorkouts?: FavoriteWorkoutListRelationFilter
    favoriteMeditations?: FavoriteMeditationListRelationFilter
    favoriteYogaSessions?: FavoriteYogaSessionListRelationFilter
    favoriteRecipes?: FavoriteRecipeListRelationFilter
    scheduledEvents?: ScheduledEventListRelationFilter
    weightHistory?: WeightHistoryListRelationFilter
    achievements?: UserAchievementListRelationFilter
    settings?: XOR<UserSettingsNullableRelationFilter, UserSettingsWhereInput> | null
  }, "id" | "username" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    username?: SortOrderInput | SortOrder
    email?: SortOrder
    emailVerified?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    height?: SortOrderInput | SortOrder
    weight?: SortOrderInput | SortOrder
    goalWeight?: SortOrderInput | SortOrder
    dateOfBirth?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    fitnessLevel?: SortOrderInput | SortOrder
    memberSince?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    firstName?: StringNullableWithAggregatesFilter<"User"> | string | null
    lastName?: StringNullableWithAggregatesFilter<"User"> | string | null
    username?: StringNullableWithAggregatesFilter<"User"> | string | null
    email?: StringWithAggregatesFilter<"User"> | string
    emailVerified?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    password?: StringNullableWithAggregatesFilter<"User"> | string | null
    image?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    height?: FloatNullableWithAggregatesFilter<"User"> | number | null
    weight?: FloatNullableWithAggregatesFilter<"User"> | number | null
    goalWeight?: FloatNullableWithAggregatesFilter<"User"> | number | null
    dateOfBirth?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    gender?: StringNullableWithAggregatesFilter<"User"> | string | null
    fitnessLevel?: StringNullableWithAggregatesFilter<"User"> | string | null
    memberSince?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type UserSettingsWhereInput = {
    AND?: UserSettingsWhereInput | UserSettingsWhereInput[]
    OR?: UserSettingsWhereInput[]
    NOT?: UserSettingsWhereInput | UserSettingsWhereInput[]
    id?: StringFilter<"UserSettings"> | string
    userId?: StringFilter<"UserSettings"> | string
    notificationsEnabled?: BoolFilter<"UserSettings"> | boolean
    emailNotifications?: BoolFilter<"UserSettings"> | boolean
    darkMode?: BoolFilter<"UserSettings"> | boolean
    language?: StringFilter<"UserSettings"> | string
    measurementUnit?: StringFilter<"UserSettings"> | string
    privacySettings?: JsonNullableFilter<"UserSettings">
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type UserSettingsOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    notificationsEnabled?: SortOrder
    emailNotifications?: SortOrder
    darkMode?: SortOrder
    language?: SortOrder
    measurementUnit?: SortOrder
    privacySettings?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserSettingsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: UserSettingsWhereInput | UserSettingsWhereInput[]
    OR?: UserSettingsWhereInput[]
    NOT?: UserSettingsWhereInput | UserSettingsWhereInput[]
    notificationsEnabled?: BoolFilter<"UserSettings"> | boolean
    emailNotifications?: BoolFilter<"UserSettings"> | boolean
    darkMode?: BoolFilter<"UserSettings"> | boolean
    language?: StringFilter<"UserSettings"> | string
    measurementUnit?: StringFilter<"UserSettings"> | string
    privacySettings?: JsonNullableFilter<"UserSettings">
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type UserSettingsOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    notificationsEnabled?: SortOrder
    emailNotifications?: SortOrder
    darkMode?: SortOrder
    language?: SortOrder
    measurementUnit?: SortOrder
    privacySettings?: SortOrderInput | SortOrder
    _count?: UserSettingsCountOrderByAggregateInput
    _max?: UserSettingsMaxOrderByAggregateInput
    _min?: UserSettingsMinOrderByAggregateInput
  }

  export type UserSettingsScalarWhereWithAggregatesInput = {
    AND?: UserSettingsScalarWhereWithAggregatesInput | UserSettingsScalarWhereWithAggregatesInput[]
    OR?: UserSettingsScalarWhereWithAggregatesInput[]
    NOT?: UserSettingsScalarWhereWithAggregatesInput | UserSettingsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserSettings"> | string
    userId?: StringWithAggregatesFilter<"UserSettings"> | string
    notificationsEnabled?: BoolWithAggregatesFilter<"UserSettings"> | boolean
    emailNotifications?: BoolWithAggregatesFilter<"UserSettings"> | boolean
    darkMode?: BoolWithAggregatesFilter<"UserSettings"> | boolean
    language?: StringWithAggregatesFilter<"UserSettings"> | string
    measurementUnit?: StringWithAggregatesFilter<"UserSettings"> | string
    privacySettings?: JsonNullableWithAggregatesFilter<"UserSettings">
  }

  export type WorkoutWhereInput = {
    AND?: WorkoutWhereInput | WorkoutWhereInput[]
    OR?: WorkoutWhereInput[]
    NOT?: WorkoutWhereInput | WorkoutWhereInput[]
    id?: IntFilter<"Workout"> | number
    title?: StringFilter<"Workout"> | string
    description?: StringFilter<"Workout"> | string
    category?: StringFilter<"Workout"> | string
    difficulty?: StringFilter<"Workout"> | string
    duration?: IntFilter<"Workout"> | number
    calories?: IntFilter<"Workout"> | number
    muscleGroups?: StringNullableListFilter<"Workout">
    imageUrl?: StringNullableFilter<"Workout"> | string | null
    videoUrl?: StringNullableFilter<"Workout"> | string | null
    createdAt?: DateTimeFilter<"Workout"> | Date | string
    updatedAt?: DateTimeFilter<"Workout"> | Date | string
    rating?: FloatFilter<"Workout"> | number
    ratingCount?: IntFilter<"Workout"> | number
    exercises?: WorkoutExerciseListRelationFilter
    workoutHistory?: WorkoutHistoryListRelationFilter
    favoriteBy?: FavoriteWorkoutListRelationFilter
    scheduledEvents?: ScheduledEventListRelationFilter
  }

  export type WorkoutOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    difficulty?: SortOrder
    duration?: SortOrder
    calories?: SortOrder
    muscleGroups?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    videoUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
    exercises?: WorkoutExerciseOrderByRelationAggregateInput
    workoutHistory?: WorkoutHistoryOrderByRelationAggregateInput
    favoriteBy?: FavoriteWorkoutOrderByRelationAggregateInput
    scheduledEvents?: ScheduledEventOrderByRelationAggregateInput
  }

  export type WorkoutWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: WorkoutWhereInput | WorkoutWhereInput[]
    OR?: WorkoutWhereInput[]
    NOT?: WorkoutWhereInput | WorkoutWhereInput[]
    title?: StringFilter<"Workout"> | string
    description?: StringFilter<"Workout"> | string
    category?: StringFilter<"Workout"> | string
    difficulty?: StringFilter<"Workout"> | string
    duration?: IntFilter<"Workout"> | number
    calories?: IntFilter<"Workout"> | number
    muscleGroups?: StringNullableListFilter<"Workout">
    imageUrl?: StringNullableFilter<"Workout"> | string | null
    videoUrl?: StringNullableFilter<"Workout"> | string | null
    createdAt?: DateTimeFilter<"Workout"> | Date | string
    updatedAt?: DateTimeFilter<"Workout"> | Date | string
    rating?: FloatFilter<"Workout"> | number
    ratingCount?: IntFilter<"Workout"> | number
    exercises?: WorkoutExerciseListRelationFilter
    workoutHistory?: WorkoutHistoryListRelationFilter
    favoriteBy?: FavoriteWorkoutListRelationFilter
    scheduledEvents?: ScheduledEventListRelationFilter
  }, "id">

  export type WorkoutOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    difficulty?: SortOrder
    duration?: SortOrder
    calories?: SortOrder
    muscleGroups?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    videoUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
    _count?: WorkoutCountOrderByAggregateInput
    _avg?: WorkoutAvgOrderByAggregateInput
    _max?: WorkoutMaxOrderByAggregateInput
    _min?: WorkoutMinOrderByAggregateInput
    _sum?: WorkoutSumOrderByAggregateInput
  }

  export type WorkoutScalarWhereWithAggregatesInput = {
    AND?: WorkoutScalarWhereWithAggregatesInput | WorkoutScalarWhereWithAggregatesInput[]
    OR?: WorkoutScalarWhereWithAggregatesInput[]
    NOT?: WorkoutScalarWhereWithAggregatesInput | WorkoutScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Workout"> | number
    title?: StringWithAggregatesFilter<"Workout"> | string
    description?: StringWithAggregatesFilter<"Workout"> | string
    category?: StringWithAggregatesFilter<"Workout"> | string
    difficulty?: StringWithAggregatesFilter<"Workout"> | string
    duration?: IntWithAggregatesFilter<"Workout"> | number
    calories?: IntWithAggregatesFilter<"Workout"> | number
    muscleGroups?: StringNullableListFilter<"Workout">
    imageUrl?: StringNullableWithAggregatesFilter<"Workout"> | string | null
    videoUrl?: StringNullableWithAggregatesFilter<"Workout"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Workout"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Workout"> | Date | string
    rating?: FloatWithAggregatesFilter<"Workout"> | number
    ratingCount?: IntWithAggregatesFilter<"Workout"> | number
  }

  export type ExerciseWhereInput = {
    AND?: ExerciseWhereInput | ExerciseWhereInput[]
    OR?: ExerciseWhereInput[]
    NOT?: ExerciseWhereInput | ExerciseWhereInput[]
    id?: IntFilter<"Exercise"> | number
    name?: StringFilter<"Exercise"> | string
    description?: StringFilter<"Exercise"> | string
    instructions?: StringFilter<"Exercise"> | string
    muscleGroups?: StringNullableListFilter<"Exercise">
    equipment?: StringNullableListFilter<"Exercise">
    difficultyLevel?: StringFilter<"Exercise"> | string
    imageUrl?: StringNullableFilter<"Exercise"> | string | null
    videoUrl?: StringNullableFilter<"Exercise"> | string | null
    createdAt?: DateTimeFilter<"Exercise"> | Date | string
    updatedAt?: DateTimeFilter<"Exercise"> | Date | string
    workouts?: WorkoutExerciseListRelationFilter
  }

  export type ExerciseOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    instructions?: SortOrder
    muscleGroups?: SortOrder
    equipment?: SortOrder
    difficultyLevel?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    videoUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    workouts?: WorkoutExerciseOrderByRelationAggregateInput
  }

  export type ExerciseWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ExerciseWhereInput | ExerciseWhereInput[]
    OR?: ExerciseWhereInput[]
    NOT?: ExerciseWhereInput | ExerciseWhereInput[]
    name?: StringFilter<"Exercise"> | string
    description?: StringFilter<"Exercise"> | string
    instructions?: StringFilter<"Exercise"> | string
    muscleGroups?: StringNullableListFilter<"Exercise">
    equipment?: StringNullableListFilter<"Exercise">
    difficultyLevel?: StringFilter<"Exercise"> | string
    imageUrl?: StringNullableFilter<"Exercise"> | string | null
    videoUrl?: StringNullableFilter<"Exercise"> | string | null
    createdAt?: DateTimeFilter<"Exercise"> | Date | string
    updatedAt?: DateTimeFilter<"Exercise"> | Date | string
    workouts?: WorkoutExerciseListRelationFilter
  }, "id">

  export type ExerciseOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    instructions?: SortOrder
    muscleGroups?: SortOrder
    equipment?: SortOrder
    difficultyLevel?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    videoUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ExerciseCountOrderByAggregateInput
    _avg?: ExerciseAvgOrderByAggregateInput
    _max?: ExerciseMaxOrderByAggregateInput
    _min?: ExerciseMinOrderByAggregateInput
    _sum?: ExerciseSumOrderByAggregateInput
  }

  export type ExerciseScalarWhereWithAggregatesInput = {
    AND?: ExerciseScalarWhereWithAggregatesInput | ExerciseScalarWhereWithAggregatesInput[]
    OR?: ExerciseScalarWhereWithAggregatesInput[]
    NOT?: ExerciseScalarWhereWithAggregatesInput | ExerciseScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Exercise"> | number
    name?: StringWithAggregatesFilter<"Exercise"> | string
    description?: StringWithAggregatesFilter<"Exercise"> | string
    instructions?: StringWithAggregatesFilter<"Exercise"> | string
    muscleGroups?: StringNullableListFilter<"Exercise">
    equipment?: StringNullableListFilter<"Exercise">
    difficultyLevel?: StringWithAggregatesFilter<"Exercise"> | string
    imageUrl?: StringNullableWithAggregatesFilter<"Exercise"> | string | null
    videoUrl?: StringNullableWithAggregatesFilter<"Exercise"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Exercise"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Exercise"> | Date | string
  }

  export type WorkoutExerciseWhereInput = {
    AND?: WorkoutExerciseWhereInput | WorkoutExerciseWhereInput[]
    OR?: WorkoutExerciseWhereInput[]
    NOT?: WorkoutExerciseWhereInput | WorkoutExerciseWhereInput[]
    id?: IntFilter<"WorkoutExercise"> | number
    workoutId?: IntFilter<"WorkoutExercise"> | number
    exerciseId?: IntFilter<"WorkoutExercise"> | number
    sets?: IntNullableFilter<"WorkoutExercise"> | number | null
    reps?: StringNullableFilter<"WorkoutExercise"> | string | null
    weight?: FloatNullableFilter<"WorkoutExercise"> | number | null
    restTime?: IntNullableFilter<"WorkoutExercise"> | number | null
    notes?: StringNullableFilter<"WorkoutExercise"> | string | null
    order?: IntFilter<"WorkoutExercise"> | number
    workout?: XOR<WorkoutRelationFilter, WorkoutWhereInput>
    exercise?: XOR<ExerciseRelationFilter, ExerciseWhereInput>
  }

  export type WorkoutExerciseOrderByWithRelationInput = {
    id?: SortOrder
    workoutId?: SortOrder
    exerciseId?: SortOrder
    sets?: SortOrderInput | SortOrder
    reps?: SortOrderInput | SortOrder
    weight?: SortOrderInput | SortOrder
    restTime?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    order?: SortOrder
    workout?: WorkoutOrderByWithRelationInput
    exercise?: ExerciseOrderByWithRelationInput
  }

  export type WorkoutExerciseWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    workoutId_exerciseId_order?: WorkoutExerciseWorkoutIdExerciseIdOrderCompoundUniqueInput
    AND?: WorkoutExerciseWhereInput | WorkoutExerciseWhereInput[]
    OR?: WorkoutExerciseWhereInput[]
    NOT?: WorkoutExerciseWhereInput | WorkoutExerciseWhereInput[]
    workoutId?: IntFilter<"WorkoutExercise"> | number
    exerciseId?: IntFilter<"WorkoutExercise"> | number
    sets?: IntNullableFilter<"WorkoutExercise"> | number | null
    reps?: StringNullableFilter<"WorkoutExercise"> | string | null
    weight?: FloatNullableFilter<"WorkoutExercise"> | number | null
    restTime?: IntNullableFilter<"WorkoutExercise"> | number | null
    notes?: StringNullableFilter<"WorkoutExercise"> | string | null
    order?: IntFilter<"WorkoutExercise"> | number
    workout?: XOR<WorkoutRelationFilter, WorkoutWhereInput>
    exercise?: XOR<ExerciseRelationFilter, ExerciseWhereInput>
  }, "id" | "workoutId_exerciseId_order">

  export type WorkoutExerciseOrderByWithAggregationInput = {
    id?: SortOrder
    workoutId?: SortOrder
    exerciseId?: SortOrder
    sets?: SortOrderInput | SortOrder
    reps?: SortOrderInput | SortOrder
    weight?: SortOrderInput | SortOrder
    restTime?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    order?: SortOrder
    _count?: WorkoutExerciseCountOrderByAggregateInput
    _avg?: WorkoutExerciseAvgOrderByAggregateInput
    _max?: WorkoutExerciseMaxOrderByAggregateInput
    _min?: WorkoutExerciseMinOrderByAggregateInput
    _sum?: WorkoutExerciseSumOrderByAggregateInput
  }

  export type WorkoutExerciseScalarWhereWithAggregatesInput = {
    AND?: WorkoutExerciseScalarWhereWithAggregatesInput | WorkoutExerciseScalarWhereWithAggregatesInput[]
    OR?: WorkoutExerciseScalarWhereWithAggregatesInput[]
    NOT?: WorkoutExerciseScalarWhereWithAggregatesInput | WorkoutExerciseScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"WorkoutExercise"> | number
    workoutId?: IntWithAggregatesFilter<"WorkoutExercise"> | number
    exerciseId?: IntWithAggregatesFilter<"WorkoutExercise"> | number
    sets?: IntNullableWithAggregatesFilter<"WorkoutExercise"> | number | null
    reps?: StringNullableWithAggregatesFilter<"WorkoutExercise"> | string | null
    weight?: FloatNullableWithAggregatesFilter<"WorkoutExercise"> | number | null
    restTime?: IntNullableWithAggregatesFilter<"WorkoutExercise"> | number | null
    notes?: StringNullableWithAggregatesFilter<"WorkoutExercise"> | string | null
    order?: IntWithAggregatesFilter<"WorkoutExercise"> | number
  }

  export type MeditationSessionWhereInput = {
    AND?: MeditationSessionWhereInput | MeditationSessionWhereInput[]
    OR?: MeditationSessionWhereInput[]
    NOT?: MeditationSessionWhereInput | MeditationSessionWhereInput[]
    id?: IntFilter<"MeditationSession"> | number
    title?: StringFilter<"MeditationSession"> | string
    description?: StringFilter<"MeditationSession"> | string
    category?: StringFilter<"MeditationSession"> | string
    duration?: IntFilter<"MeditationSession"> | number
    level?: StringFilter<"MeditationSession"> | string
    instructor?: StringFilter<"MeditationSession"> | string
    audioUrl?: StringFilter<"MeditationSession"> | string
    imageUrl?: StringNullableFilter<"MeditationSession"> | string | null
    createdAt?: DateTimeFilter<"MeditationSession"> | Date | string
    updatedAt?: DateTimeFilter<"MeditationSession"> | Date | string
    rating?: FloatFilter<"MeditationSession"> | number
    ratingCount?: IntFilter<"MeditationSession"> | number
    favoriteBy?: FavoriteMeditationListRelationFilter
    scheduledEvents?: ScheduledEventListRelationFilter
  }

  export type MeditationSessionOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    duration?: SortOrder
    level?: SortOrder
    instructor?: SortOrder
    audioUrl?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
    favoriteBy?: FavoriteMeditationOrderByRelationAggregateInput
    scheduledEvents?: ScheduledEventOrderByRelationAggregateInput
  }

  export type MeditationSessionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MeditationSessionWhereInput | MeditationSessionWhereInput[]
    OR?: MeditationSessionWhereInput[]
    NOT?: MeditationSessionWhereInput | MeditationSessionWhereInput[]
    title?: StringFilter<"MeditationSession"> | string
    description?: StringFilter<"MeditationSession"> | string
    category?: StringFilter<"MeditationSession"> | string
    duration?: IntFilter<"MeditationSession"> | number
    level?: StringFilter<"MeditationSession"> | string
    instructor?: StringFilter<"MeditationSession"> | string
    audioUrl?: StringFilter<"MeditationSession"> | string
    imageUrl?: StringNullableFilter<"MeditationSession"> | string | null
    createdAt?: DateTimeFilter<"MeditationSession"> | Date | string
    updatedAt?: DateTimeFilter<"MeditationSession"> | Date | string
    rating?: FloatFilter<"MeditationSession"> | number
    ratingCount?: IntFilter<"MeditationSession"> | number
    favoriteBy?: FavoriteMeditationListRelationFilter
    scheduledEvents?: ScheduledEventListRelationFilter
  }, "id">

  export type MeditationSessionOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    duration?: SortOrder
    level?: SortOrder
    instructor?: SortOrder
    audioUrl?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
    _count?: MeditationSessionCountOrderByAggregateInput
    _avg?: MeditationSessionAvgOrderByAggregateInput
    _max?: MeditationSessionMaxOrderByAggregateInput
    _min?: MeditationSessionMinOrderByAggregateInput
    _sum?: MeditationSessionSumOrderByAggregateInput
  }

  export type MeditationSessionScalarWhereWithAggregatesInput = {
    AND?: MeditationSessionScalarWhereWithAggregatesInput | MeditationSessionScalarWhereWithAggregatesInput[]
    OR?: MeditationSessionScalarWhereWithAggregatesInput[]
    NOT?: MeditationSessionScalarWhereWithAggregatesInput | MeditationSessionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MeditationSession"> | number
    title?: StringWithAggregatesFilter<"MeditationSession"> | string
    description?: StringWithAggregatesFilter<"MeditationSession"> | string
    category?: StringWithAggregatesFilter<"MeditationSession"> | string
    duration?: IntWithAggregatesFilter<"MeditationSession"> | number
    level?: StringWithAggregatesFilter<"MeditationSession"> | string
    instructor?: StringWithAggregatesFilter<"MeditationSession"> | string
    audioUrl?: StringWithAggregatesFilter<"MeditationSession"> | string
    imageUrl?: StringNullableWithAggregatesFilter<"MeditationSession"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"MeditationSession"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MeditationSession"> | Date | string
    rating?: FloatWithAggregatesFilter<"MeditationSession"> | number
    ratingCount?: IntWithAggregatesFilter<"MeditationSession"> | number
  }

  export type YogaSessionWhereInput = {
    AND?: YogaSessionWhereInput | YogaSessionWhereInput[]
    OR?: YogaSessionWhereInput[]
    NOT?: YogaSessionWhereInput | YogaSessionWhereInput[]
    id?: IntFilter<"YogaSession"> | number
    title?: StringFilter<"YogaSession"> | string
    description?: StringFilter<"YogaSession"> | string
    style?: StringFilter<"YogaSession"> | string
    duration?: IntFilter<"YogaSession"> | number
    level?: StringFilter<"YogaSession"> | string
    instructor?: StringFilter<"YogaSession"> | string
    benefits?: StringNullableListFilter<"YogaSession">
    videoUrl?: StringFilter<"YogaSession"> | string
    imageUrl?: StringNullableFilter<"YogaSession"> | string | null
    createdAt?: DateTimeFilter<"YogaSession"> | Date | string
    updatedAt?: DateTimeFilter<"YogaSession"> | Date | string
    rating?: FloatFilter<"YogaSession"> | number
    ratingCount?: IntFilter<"YogaSession"> | number
    favoriteBy?: FavoriteYogaSessionListRelationFilter
    scheduledEvents?: ScheduledEventListRelationFilter
  }

  export type YogaSessionOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    style?: SortOrder
    duration?: SortOrder
    level?: SortOrder
    instructor?: SortOrder
    benefits?: SortOrder
    videoUrl?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
    favoriteBy?: FavoriteYogaSessionOrderByRelationAggregateInput
    scheduledEvents?: ScheduledEventOrderByRelationAggregateInput
  }

  export type YogaSessionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: YogaSessionWhereInput | YogaSessionWhereInput[]
    OR?: YogaSessionWhereInput[]
    NOT?: YogaSessionWhereInput | YogaSessionWhereInput[]
    title?: StringFilter<"YogaSession"> | string
    description?: StringFilter<"YogaSession"> | string
    style?: StringFilter<"YogaSession"> | string
    duration?: IntFilter<"YogaSession"> | number
    level?: StringFilter<"YogaSession"> | string
    instructor?: StringFilter<"YogaSession"> | string
    benefits?: StringNullableListFilter<"YogaSession">
    videoUrl?: StringFilter<"YogaSession"> | string
    imageUrl?: StringNullableFilter<"YogaSession"> | string | null
    createdAt?: DateTimeFilter<"YogaSession"> | Date | string
    updatedAt?: DateTimeFilter<"YogaSession"> | Date | string
    rating?: FloatFilter<"YogaSession"> | number
    ratingCount?: IntFilter<"YogaSession"> | number
    favoriteBy?: FavoriteYogaSessionListRelationFilter
    scheduledEvents?: ScheduledEventListRelationFilter
  }, "id">

  export type YogaSessionOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    style?: SortOrder
    duration?: SortOrder
    level?: SortOrder
    instructor?: SortOrder
    benefits?: SortOrder
    videoUrl?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
    _count?: YogaSessionCountOrderByAggregateInput
    _avg?: YogaSessionAvgOrderByAggregateInput
    _max?: YogaSessionMaxOrderByAggregateInput
    _min?: YogaSessionMinOrderByAggregateInput
    _sum?: YogaSessionSumOrderByAggregateInput
  }

  export type YogaSessionScalarWhereWithAggregatesInput = {
    AND?: YogaSessionScalarWhereWithAggregatesInput | YogaSessionScalarWhereWithAggregatesInput[]
    OR?: YogaSessionScalarWhereWithAggregatesInput[]
    NOT?: YogaSessionScalarWhereWithAggregatesInput | YogaSessionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"YogaSession"> | number
    title?: StringWithAggregatesFilter<"YogaSession"> | string
    description?: StringWithAggregatesFilter<"YogaSession"> | string
    style?: StringWithAggregatesFilter<"YogaSession"> | string
    duration?: IntWithAggregatesFilter<"YogaSession"> | number
    level?: StringWithAggregatesFilter<"YogaSession"> | string
    instructor?: StringWithAggregatesFilter<"YogaSession"> | string
    benefits?: StringNullableListFilter<"YogaSession">
    videoUrl?: StringWithAggregatesFilter<"YogaSession"> | string
    imageUrl?: StringNullableWithAggregatesFilter<"YogaSession"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"YogaSession"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"YogaSession"> | Date | string
    rating?: FloatWithAggregatesFilter<"YogaSession"> | number
    ratingCount?: IntWithAggregatesFilter<"YogaSession"> | number
  }

  export type RecipeWhereInput = {
    AND?: RecipeWhereInput | RecipeWhereInput[]
    OR?: RecipeWhereInput[]
    NOT?: RecipeWhereInput | RecipeWhereInput[]
    id?: IntFilter<"Recipe"> | number
    title?: StringFilter<"Recipe"> | string
    description?: StringFilter<"Recipe"> | string
    category?: StringFilter<"Recipe"> | string
    difficulty?: StringFilter<"Recipe"> | string
    prepTime?: IntFilter<"Recipe"> | number
    cookTime?: IntFilter<"Recipe"> | number
    servings?: IntFilter<"Recipe"> | number
    calories?: IntFilter<"Recipe"> | number
    protein?: FloatNullableFilter<"Recipe"> | number | null
    carbs?: FloatNullableFilter<"Recipe"> | number | null
    fat?: FloatNullableFilter<"Recipe"> | number | null
    tags?: StringNullableListFilter<"Recipe">
    imageUrl?: StringNullableFilter<"Recipe"> | string | null
    createdAt?: DateTimeFilter<"Recipe"> | Date | string
    updatedAt?: DateTimeFilter<"Recipe"> | Date | string
    rating?: FloatFilter<"Recipe"> | number
    ratingCount?: IntFilter<"Recipe"> | number
    author?: StringNullableFilter<"Recipe"> | string | null
    ingredients?: RecipeIngredientListRelationFilter
    instructions?: RecipeInstructionListRelationFilter
    favoriteBy?: FavoriteRecipeListRelationFilter
  }

  export type RecipeOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    difficulty?: SortOrder
    prepTime?: SortOrder
    cookTime?: SortOrder
    servings?: SortOrder
    calories?: SortOrder
    protein?: SortOrderInput | SortOrder
    carbs?: SortOrderInput | SortOrder
    fat?: SortOrderInput | SortOrder
    tags?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
    author?: SortOrderInput | SortOrder
    ingredients?: RecipeIngredientOrderByRelationAggregateInput
    instructions?: RecipeInstructionOrderByRelationAggregateInput
    favoriteBy?: FavoriteRecipeOrderByRelationAggregateInput
  }

  export type RecipeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RecipeWhereInput | RecipeWhereInput[]
    OR?: RecipeWhereInput[]
    NOT?: RecipeWhereInput | RecipeWhereInput[]
    title?: StringFilter<"Recipe"> | string
    description?: StringFilter<"Recipe"> | string
    category?: StringFilter<"Recipe"> | string
    difficulty?: StringFilter<"Recipe"> | string
    prepTime?: IntFilter<"Recipe"> | number
    cookTime?: IntFilter<"Recipe"> | number
    servings?: IntFilter<"Recipe"> | number
    calories?: IntFilter<"Recipe"> | number
    protein?: FloatNullableFilter<"Recipe"> | number | null
    carbs?: FloatNullableFilter<"Recipe"> | number | null
    fat?: FloatNullableFilter<"Recipe"> | number | null
    tags?: StringNullableListFilter<"Recipe">
    imageUrl?: StringNullableFilter<"Recipe"> | string | null
    createdAt?: DateTimeFilter<"Recipe"> | Date | string
    updatedAt?: DateTimeFilter<"Recipe"> | Date | string
    rating?: FloatFilter<"Recipe"> | number
    ratingCount?: IntFilter<"Recipe"> | number
    author?: StringNullableFilter<"Recipe"> | string | null
    ingredients?: RecipeIngredientListRelationFilter
    instructions?: RecipeInstructionListRelationFilter
    favoriteBy?: FavoriteRecipeListRelationFilter
  }, "id">

  export type RecipeOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    difficulty?: SortOrder
    prepTime?: SortOrder
    cookTime?: SortOrder
    servings?: SortOrder
    calories?: SortOrder
    protein?: SortOrderInput | SortOrder
    carbs?: SortOrderInput | SortOrder
    fat?: SortOrderInput | SortOrder
    tags?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
    author?: SortOrderInput | SortOrder
    _count?: RecipeCountOrderByAggregateInput
    _avg?: RecipeAvgOrderByAggregateInput
    _max?: RecipeMaxOrderByAggregateInput
    _min?: RecipeMinOrderByAggregateInput
    _sum?: RecipeSumOrderByAggregateInput
  }

  export type RecipeScalarWhereWithAggregatesInput = {
    AND?: RecipeScalarWhereWithAggregatesInput | RecipeScalarWhereWithAggregatesInput[]
    OR?: RecipeScalarWhereWithAggregatesInput[]
    NOT?: RecipeScalarWhereWithAggregatesInput | RecipeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Recipe"> | number
    title?: StringWithAggregatesFilter<"Recipe"> | string
    description?: StringWithAggregatesFilter<"Recipe"> | string
    category?: StringWithAggregatesFilter<"Recipe"> | string
    difficulty?: StringWithAggregatesFilter<"Recipe"> | string
    prepTime?: IntWithAggregatesFilter<"Recipe"> | number
    cookTime?: IntWithAggregatesFilter<"Recipe"> | number
    servings?: IntWithAggregatesFilter<"Recipe"> | number
    calories?: IntWithAggregatesFilter<"Recipe"> | number
    protein?: FloatNullableWithAggregatesFilter<"Recipe"> | number | null
    carbs?: FloatNullableWithAggregatesFilter<"Recipe"> | number | null
    fat?: FloatNullableWithAggregatesFilter<"Recipe"> | number | null
    tags?: StringNullableListFilter<"Recipe">
    imageUrl?: StringNullableWithAggregatesFilter<"Recipe"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Recipe"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Recipe"> | Date | string
    rating?: FloatWithAggregatesFilter<"Recipe"> | number
    ratingCount?: IntWithAggregatesFilter<"Recipe"> | number
    author?: StringNullableWithAggregatesFilter<"Recipe"> | string | null
  }

  export type IngredientWhereInput = {
    AND?: IngredientWhereInput | IngredientWhereInput[]
    OR?: IngredientWhereInput[]
    NOT?: IngredientWhereInput | IngredientWhereInput[]
    id?: IntFilter<"Ingredient"> | number
    name?: StringFilter<"Ingredient"> | string
    calories?: IntNullableFilter<"Ingredient"> | number | null
    protein?: FloatNullableFilter<"Ingredient"> | number | null
    carbs?: FloatNullableFilter<"Ingredient"> | number | null
    fat?: FloatNullableFilter<"Ingredient"> | number | null
    recipes?: RecipeIngredientListRelationFilter
  }

  export type IngredientOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    calories?: SortOrderInput | SortOrder
    protein?: SortOrderInput | SortOrder
    carbs?: SortOrderInput | SortOrder
    fat?: SortOrderInput | SortOrder
    recipes?: RecipeIngredientOrderByRelationAggregateInput
  }

  export type IngredientWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: IngredientWhereInput | IngredientWhereInput[]
    OR?: IngredientWhereInput[]
    NOT?: IngredientWhereInput | IngredientWhereInput[]
    calories?: IntNullableFilter<"Ingredient"> | number | null
    protein?: FloatNullableFilter<"Ingredient"> | number | null
    carbs?: FloatNullableFilter<"Ingredient"> | number | null
    fat?: FloatNullableFilter<"Ingredient"> | number | null
    recipes?: RecipeIngredientListRelationFilter
  }, "id" | "name">

  export type IngredientOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    calories?: SortOrderInput | SortOrder
    protein?: SortOrderInput | SortOrder
    carbs?: SortOrderInput | SortOrder
    fat?: SortOrderInput | SortOrder
    _count?: IngredientCountOrderByAggregateInput
    _avg?: IngredientAvgOrderByAggregateInput
    _max?: IngredientMaxOrderByAggregateInput
    _min?: IngredientMinOrderByAggregateInput
    _sum?: IngredientSumOrderByAggregateInput
  }

  export type IngredientScalarWhereWithAggregatesInput = {
    AND?: IngredientScalarWhereWithAggregatesInput | IngredientScalarWhereWithAggregatesInput[]
    OR?: IngredientScalarWhereWithAggregatesInput[]
    NOT?: IngredientScalarWhereWithAggregatesInput | IngredientScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Ingredient"> | number
    name?: StringWithAggregatesFilter<"Ingredient"> | string
    calories?: IntNullableWithAggregatesFilter<"Ingredient"> | number | null
    protein?: FloatNullableWithAggregatesFilter<"Ingredient"> | number | null
    carbs?: FloatNullableWithAggregatesFilter<"Ingredient"> | number | null
    fat?: FloatNullableWithAggregatesFilter<"Ingredient"> | number | null
  }

  export type RecipeIngredientWhereInput = {
    AND?: RecipeIngredientWhereInput | RecipeIngredientWhereInput[]
    OR?: RecipeIngredientWhereInput[]
    NOT?: RecipeIngredientWhereInput | RecipeIngredientWhereInput[]
    id?: IntFilter<"RecipeIngredient"> | number
    recipeId?: IntFilter<"RecipeIngredient"> | number
    ingredientId?: IntFilter<"RecipeIngredient"> | number
    quantity?: StringFilter<"RecipeIngredient"> | string
    unit?: StringFilter<"RecipeIngredient"> | string
    recipe?: XOR<RecipeRelationFilter, RecipeWhereInput>
    ingredient?: XOR<IngredientRelationFilter, IngredientWhereInput>
  }

  export type RecipeIngredientOrderByWithRelationInput = {
    id?: SortOrder
    recipeId?: SortOrder
    ingredientId?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
    recipe?: RecipeOrderByWithRelationInput
    ingredient?: IngredientOrderByWithRelationInput
  }

  export type RecipeIngredientWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    recipeId_ingredientId?: RecipeIngredientRecipeIdIngredientIdCompoundUniqueInput
    AND?: RecipeIngredientWhereInput | RecipeIngredientWhereInput[]
    OR?: RecipeIngredientWhereInput[]
    NOT?: RecipeIngredientWhereInput | RecipeIngredientWhereInput[]
    recipeId?: IntFilter<"RecipeIngredient"> | number
    ingredientId?: IntFilter<"RecipeIngredient"> | number
    quantity?: StringFilter<"RecipeIngredient"> | string
    unit?: StringFilter<"RecipeIngredient"> | string
    recipe?: XOR<RecipeRelationFilter, RecipeWhereInput>
    ingredient?: XOR<IngredientRelationFilter, IngredientWhereInput>
  }, "id" | "recipeId_ingredientId">

  export type RecipeIngredientOrderByWithAggregationInput = {
    id?: SortOrder
    recipeId?: SortOrder
    ingredientId?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
    _count?: RecipeIngredientCountOrderByAggregateInput
    _avg?: RecipeIngredientAvgOrderByAggregateInput
    _max?: RecipeIngredientMaxOrderByAggregateInput
    _min?: RecipeIngredientMinOrderByAggregateInput
    _sum?: RecipeIngredientSumOrderByAggregateInput
  }

  export type RecipeIngredientScalarWhereWithAggregatesInput = {
    AND?: RecipeIngredientScalarWhereWithAggregatesInput | RecipeIngredientScalarWhereWithAggregatesInput[]
    OR?: RecipeIngredientScalarWhereWithAggregatesInput[]
    NOT?: RecipeIngredientScalarWhereWithAggregatesInput | RecipeIngredientScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"RecipeIngredient"> | number
    recipeId?: IntWithAggregatesFilter<"RecipeIngredient"> | number
    ingredientId?: IntWithAggregatesFilter<"RecipeIngredient"> | number
    quantity?: StringWithAggregatesFilter<"RecipeIngredient"> | string
    unit?: StringWithAggregatesFilter<"RecipeIngredient"> | string
  }

  export type RecipeInstructionWhereInput = {
    AND?: RecipeInstructionWhereInput | RecipeInstructionWhereInput[]
    OR?: RecipeInstructionWhereInput[]
    NOT?: RecipeInstructionWhereInput | RecipeInstructionWhereInput[]
    id?: IntFilter<"RecipeInstruction"> | number
    recipeId?: IntFilter<"RecipeInstruction"> | number
    stepNumber?: IntFilter<"RecipeInstruction"> | number
    instruction?: StringFilter<"RecipeInstruction"> | string
    recipe?: XOR<RecipeRelationFilter, RecipeWhereInput>
  }

  export type RecipeInstructionOrderByWithRelationInput = {
    id?: SortOrder
    recipeId?: SortOrder
    stepNumber?: SortOrder
    instruction?: SortOrder
    recipe?: RecipeOrderByWithRelationInput
  }

  export type RecipeInstructionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    recipeId_stepNumber?: RecipeInstructionRecipeIdStepNumberCompoundUniqueInput
    AND?: RecipeInstructionWhereInput | RecipeInstructionWhereInput[]
    OR?: RecipeInstructionWhereInput[]
    NOT?: RecipeInstructionWhereInput | RecipeInstructionWhereInput[]
    recipeId?: IntFilter<"RecipeInstruction"> | number
    stepNumber?: IntFilter<"RecipeInstruction"> | number
    instruction?: StringFilter<"RecipeInstruction"> | string
    recipe?: XOR<RecipeRelationFilter, RecipeWhereInput>
  }, "id" | "recipeId_stepNumber">

  export type RecipeInstructionOrderByWithAggregationInput = {
    id?: SortOrder
    recipeId?: SortOrder
    stepNumber?: SortOrder
    instruction?: SortOrder
    _count?: RecipeInstructionCountOrderByAggregateInput
    _avg?: RecipeInstructionAvgOrderByAggregateInput
    _max?: RecipeInstructionMaxOrderByAggregateInput
    _min?: RecipeInstructionMinOrderByAggregateInput
    _sum?: RecipeInstructionSumOrderByAggregateInput
  }

  export type RecipeInstructionScalarWhereWithAggregatesInput = {
    AND?: RecipeInstructionScalarWhereWithAggregatesInput | RecipeInstructionScalarWhereWithAggregatesInput[]
    OR?: RecipeInstructionScalarWhereWithAggregatesInput[]
    NOT?: RecipeInstructionScalarWhereWithAggregatesInput | RecipeInstructionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"RecipeInstruction"> | number
    recipeId?: IntWithAggregatesFilter<"RecipeInstruction"> | number
    stepNumber?: IntWithAggregatesFilter<"RecipeInstruction"> | number
    instruction?: StringWithAggregatesFilter<"RecipeInstruction"> | string
  }

  export type BlogPostWhereInput = {
    AND?: BlogPostWhereInput | BlogPostWhereInput[]
    OR?: BlogPostWhereInput[]
    NOT?: BlogPostWhereInput | BlogPostWhereInput[]
    id?: IntFilter<"BlogPost"> | number
    title?: StringFilter<"BlogPost"> | string
    content?: StringFilter<"BlogPost"> | string
    excerpt?: StringFilter<"BlogPost"> | string
    category?: StringFilter<"BlogPost"> | string
    tags?: StringNullableListFilter<"BlogPost">
    imageUrl?: StringNullableFilter<"BlogPost"> | string | null
    author?: StringFilter<"BlogPost"> | string
    published?: BoolFilter<"BlogPost"> | boolean
    createdAt?: DateTimeFilter<"BlogPost"> | Date | string
    updatedAt?: DateTimeFilter<"BlogPost"> | Date | string
    publishedAt?: DateTimeNullableFilter<"BlogPost"> | Date | string | null
  }

  export type BlogPostOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    excerpt?: SortOrder
    category?: SortOrder
    tags?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    author?: SortOrder
    published?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    publishedAt?: SortOrderInput | SortOrder
  }

  export type BlogPostWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: BlogPostWhereInput | BlogPostWhereInput[]
    OR?: BlogPostWhereInput[]
    NOT?: BlogPostWhereInput | BlogPostWhereInput[]
    title?: StringFilter<"BlogPost"> | string
    content?: StringFilter<"BlogPost"> | string
    excerpt?: StringFilter<"BlogPost"> | string
    category?: StringFilter<"BlogPost"> | string
    tags?: StringNullableListFilter<"BlogPost">
    imageUrl?: StringNullableFilter<"BlogPost"> | string | null
    author?: StringFilter<"BlogPost"> | string
    published?: BoolFilter<"BlogPost"> | boolean
    createdAt?: DateTimeFilter<"BlogPost"> | Date | string
    updatedAt?: DateTimeFilter<"BlogPost"> | Date | string
    publishedAt?: DateTimeNullableFilter<"BlogPost"> | Date | string | null
  }, "id">

  export type BlogPostOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    excerpt?: SortOrder
    category?: SortOrder
    tags?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    author?: SortOrder
    published?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    publishedAt?: SortOrderInput | SortOrder
    _count?: BlogPostCountOrderByAggregateInput
    _avg?: BlogPostAvgOrderByAggregateInput
    _max?: BlogPostMaxOrderByAggregateInput
    _min?: BlogPostMinOrderByAggregateInput
    _sum?: BlogPostSumOrderByAggregateInput
  }

  export type BlogPostScalarWhereWithAggregatesInput = {
    AND?: BlogPostScalarWhereWithAggregatesInput | BlogPostScalarWhereWithAggregatesInput[]
    OR?: BlogPostScalarWhereWithAggregatesInput[]
    NOT?: BlogPostScalarWhereWithAggregatesInput | BlogPostScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"BlogPost"> | number
    title?: StringWithAggregatesFilter<"BlogPost"> | string
    content?: StringWithAggregatesFilter<"BlogPost"> | string
    excerpt?: StringWithAggregatesFilter<"BlogPost"> | string
    category?: StringWithAggregatesFilter<"BlogPost"> | string
    tags?: StringNullableListFilter<"BlogPost">
    imageUrl?: StringNullableWithAggregatesFilter<"BlogPost"> | string | null
    author?: StringWithAggregatesFilter<"BlogPost"> | string
    published?: BoolWithAggregatesFilter<"BlogPost"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"BlogPost"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"BlogPost"> | Date | string
    publishedAt?: DateTimeNullableWithAggregatesFilter<"BlogPost"> | Date | string | null
  }

  export type ScheduledEventWhereInput = {
    AND?: ScheduledEventWhereInput | ScheduledEventWhereInput[]
    OR?: ScheduledEventWhereInput[]
    NOT?: ScheduledEventWhereInput | ScheduledEventWhereInput[]
    id?: StringFilter<"ScheduledEvent"> | string
    userId?: StringFilter<"ScheduledEvent"> | string
    title?: StringFilter<"ScheduledEvent"> | string
    date?: DateTimeFilter<"ScheduledEvent"> | Date | string
    time?: StringFilter<"ScheduledEvent"> | string
    duration?: IntFilter<"ScheduledEvent"> | number
    eventType?: StringFilter<"ScheduledEvent"> | string
    completed?: BoolFilter<"ScheduledEvent"> | boolean
    notes?: StringNullableFilter<"ScheduledEvent"> | string | null
    workoutId?: IntNullableFilter<"ScheduledEvent"> | number | null
    meditationId?: IntNullableFilter<"ScheduledEvent"> | number | null
    yogaId?: IntNullableFilter<"ScheduledEvent"> | number | null
    createdAt?: DateTimeFilter<"ScheduledEvent"> | Date | string
    updatedAt?: DateTimeFilter<"ScheduledEvent"> | Date | string
    workout?: XOR<WorkoutNullableRelationFilter, WorkoutWhereInput> | null
    meditation?: XOR<MeditationSessionNullableRelationFilter, MeditationSessionWhereInput> | null
    yoga?: XOR<YogaSessionNullableRelationFilter, YogaSessionWhereInput> | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ScheduledEventOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    date?: SortOrder
    time?: SortOrder
    duration?: SortOrder
    eventType?: SortOrder
    completed?: SortOrder
    notes?: SortOrderInput | SortOrder
    workoutId?: SortOrderInput | SortOrder
    meditationId?: SortOrderInput | SortOrder
    yogaId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    workout?: WorkoutOrderByWithRelationInput
    meditation?: MeditationSessionOrderByWithRelationInput
    yoga?: YogaSessionOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type ScheduledEventWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ScheduledEventWhereInput | ScheduledEventWhereInput[]
    OR?: ScheduledEventWhereInput[]
    NOT?: ScheduledEventWhereInput | ScheduledEventWhereInput[]
    userId?: StringFilter<"ScheduledEvent"> | string
    title?: StringFilter<"ScheduledEvent"> | string
    date?: DateTimeFilter<"ScheduledEvent"> | Date | string
    time?: StringFilter<"ScheduledEvent"> | string
    duration?: IntFilter<"ScheduledEvent"> | number
    eventType?: StringFilter<"ScheduledEvent"> | string
    completed?: BoolFilter<"ScheduledEvent"> | boolean
    notes?: StringNullableFilter<"ScheduledEvent"> | string | null
    workoutId?: IntNullableFilter<"ScheduledEvent"> | number | null
    meditationId?: IntNullableFilter<"ScheduledEvent"> | number | null
    yogaId?: IntNullableFilter<"ScheduledEvent"> | number | null
    createdAt?: DateTimeFilter<"ScheduledEvent"> | Date | string
    updatedAt?: DateTimeFilter<"ScheduledEvent"> | Date | string
    workout?: XOR<WorkoutNullableRelationFilter, WorkoutWhereInput> | null
    meditation?: XOR<MeditationSessionNullableRelationFilter, MeditationSessionWhereInput> | null
    yoga?: XOR<YogaSessionNullableRelationFilter, YogaSessionWhereInput> | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type ScheduledEventOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    date?: SortOrder
    time?: SortOrder
    duration?: SortOrder
    eventType?: SortOrder
    completed?: SortOrder
    notes?: SortOrderInput | SortOrder
    workoutId?: SortOrderInput | SortOrder
    meditationId?: SortOrderInput | SortOrder
    yogaId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ScheduledEventCountOrderByAggregateInput
    _avg?: ScheduledEventAvgOrderByAggregateInput
    _max?: ScheduledEventMaxOrderByAggregateInput
    _min?: ScheduledEventMinOrderByAggregateInput
    _sum?: ScheduledEventSumOrderByAggregateInput
  }

  export type ScheduledEventScalarWhereWithAggregatesInput = {
    AND?: ScheduledEventScalarWhereWithAggregatesInput | ScheduledEventScalarWhereWithAggregatesInput[]
    OR?: ScheduledEventScalarWhereWithAggregatesInput[]
    NOT?: ScheduledEventScalarWhereWithAggregatesInput | ScheduledEventScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ScheduledEvent"> | string
    userId?: StringWithAggregatesFilter<"ScheduledEvent"> | string
    title?: StringWithAggregatesFilter<"ScheduledEvent"> | string
    date?: DateTimeWithAggregatesFilter<"ScheduledEvent"> | Date | string
    time?: StringWithAggregatesFilter<"ScheduledEvent"> | string
    duration?: IntWithAggregatesFilter<"ScheduledEvent"> | number
    eventType?: StringWithAggregatesFilter<"ScheduledEvent"> | string
    completed?: BoolWithAggregatesFilter<"ScheduledEvent"> | boolean
    notes?: StringNullableWithAggregatesFilter<"ScheduledEvent"> | string | null
    workoutId?: IntNullableWithAggregatesFilter<"ScheduledEvent"> | number | null
    meditationId?: IntNullableWithAggregatesFilter<"ScheduledEvent"> | number | null
    yogaId?: IntNullableWithAggregatesFilter<"ScheduledEvent"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"ScheduledEvent"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ScheduledEvent"> | Date | string
  }

  export type WorkoutHistoryWhereInput = {
    AND?: WorkoutHistoryWhereInput | WorkoutHistoryWhereInput[]
    OR?: WorkoutHistoryWhereInput[]
    NOT?: WorkoutHistoryWhereInput | WorkoutHistoryWhereInput[]
    id?: StringFilter<"WorkoutHistory"> | string
    userId?: StringFilter<"WorkoutHistory"> | string
    workoutId?: IntFilter<"WorkoutHistory"> | number
    completedAt?: DateTimeFilter<"WorkoutHistory"> | Date | string
    duration?: IntFilter<"WorkoutHistory"> | number
    notes?: StringNullableFilter<"WorkoutHistory"> | string | null
    rating?: IntNullableFilter<"WorkoutHistory"> | number | null
    exerciseResults?: JsonNullableFilter<"WorkoutHistory">
    user?: XOR<UserRelationFilter, UserWhereInput>
    workout?: XOR<WorkoutRelationFilter, WorkoutWhereInput>
  }

  export type WorkoutHistoryOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    workoutId?: SortOrder
    completedAt?: SortOrder
    duration?: SortOrder
    notes?: SortOrderInput | SortOrder
    rating?: SortOrderInput | SortOrder
    exerciseResults?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    workout?: WorkoutOrderByWithRelationInput
  }

  export type WorkoutHistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WorkoutHistoryWhereInput | WorkoutHistoryWhereInput[]
    OR?: WorkoutHistoryWhereInput[]
    NOT?: WorkoutHistoryWhereInput | WorkoutHistoryWhereInput[]
    userId?: StringFilter<"WorkoutHistory"> | string
    workoutId?: IntFilter<"WorkoutHistory"> | number
    completedAt?: DateTimeFilter<"WorkoutHistory"> | Date | string
    duration?: IntFilter<"WorkoutHistory"> | number
    notes?: StringNullableFilter<"WorkoutHistory"> | string | null
    rating?: IntNullableFilter<"WorkoutHistory"> | number | null
    exerciseResults?: JsonNullableFilter<"WorkoutHistory">
    user?: XOR<UserRelationFilter, UserWhereInput>
    workout?: XOR<WorkoutRelationFilter, WorkoutWhereInput>
  }, "id">

  export type WorkoutHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    workoutId?: SortOrder
    completedAt?: SortOrder
    duration?: SortOrder
    notes?: SortOrderInput | SortOrder
    rating?: SortOrderInput | SortOrder
    exerciseResults?: SortOrderInput | SortOrder
    _count?: WorkoutHistoryCountOrderByAggregateInput
    _avg?: WorkoutHistoryAvgOrderByAggregateInput
    _max?: WorkoutHistoryMaxOrderByAggregateInput
    _min?: WorkoutHistoryMinOrderByAggregateInput
    _sum?: WorkoutHistorySumOrderByAggregateInput
  }

  export type WorkoutHistoryScalarWhereWithAggregatesInput = {
    AND?: WorkoutHistoryScalarWhereWithAggregatesInput | WorkoutHistoryScalarWhereWithAggregatesInput[]
    OR?: WorkoutHistoryScalarWhereWithAggregatesInput[]
    NOT?: WorkoutHistoryScalarWhereWithAggregatesInput | WorkoutHistoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WorkoutHistory"> | string
    userId?: StringWithAggregatesFilter<"WorkoutHistory"> | string
    workoutId?: IntWithAggregatesFilter<"WorkoutHistory"> | number
    completedAt?: DateTimeWithAggregatesFilter<"WorkoutHistory"> | Date | string
    duration?: IntWithAggregatesFilter<"WorkoutHistory"> | number
    notes?: StringNullableWithAggregatesFilter<"WorkoutHistory"> | string | null
    rating?: IntNullableWithAggregatesFilter<"WorkoutHistory"> | number | null
    exerciseResults?: JsonNullableWithAggregatesFilter<"WorkoutHistory">
  }

  export type FavoriteWorkoutWhereInput = {
    AND?: FavoriteWorkoutWhereInput | FavoriteWorkoutWhereInput[]
    OR?: FavoriteWorkoutWhereInput[]
    NOT?: FavoriteWorkoutWhereInput | FavoriteWorkoutWhereInput[]
    id?: StringFilter<"FavoriteWorkout"> | string
    userId?: StringFilter<"FavoriteWorkout"> | string
    workoutId?: IntFilter<"FavoriteWorkout"> | number
    addedAt?: DateTimeFilter<"FavoriteWorkout"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    workout?: XOR<WorkoutRelationFilter, WorkoutWhereInput>
  }

  export type FavoriteWorkoutOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    workoutId?: SortOrder
    addedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    workout?: WorkoutOrderByWithRelationInput
  }

  export type FavoriteWorkoutWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_workoutId?: FavoriteWorkoutUserIdWorkoutIdCompoundUniqueInput
    AND?: FavoriteWorkoutWhereInput | FavoriteWorkoutWhereInput[]
    OR?: FavoriteWorkoutWhereInput[]
    NOT?: FavoriteWorkoutWhereInput | FavoriteWorkoutWhereInput[]
    userId?: StringFilter<"FavoriteWorkout"> | string
    workoutId?: IntFilter<"FavoriteWorkout"> | number
    addedAt?: DateTimeFilter<"FavoriteWorkout"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    workout?: XOR<WorkoutRelationFilter, WorkoutWhereInput>
  }, "id" | "userId_workoutId">

  export type FavoriteWorkoutOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    workoutId?: SortOrder
    addedAt?: SortOrder
    _count?: FavoriteWorkoutCountOrderByAggregateInput
    _avg?: FavoriteWorkoutAvgOrderByAggregateInput
    _max?: FavoriteWorkoutMaxOrderByAggregateInput
    _min?: FavoriteWorkoutMinOrderByAggregateInput
    _sum?: FavoriteWorkoutSumOrderByAggregateInput
  }

  export type FavoriteWorkoutScalarWhereWithAggregatesInput = {
    AND?: FavoriteWorkoutScalarWhereWithAggregatesInput | FavoriteWorkoutScalarWhereWithAggregatesInput[]
    OR?: FavoriteWorkoutScalarWhereWithAggregatesInput[]
    NOT?: FavoriteWorkoutScalarWhereWithAggregatesInput | FavoriteWorkoutScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FavoriteWorkout"> | string
    userId?: StringWithAggregatesFilter<"FavoriteWorkout"> | string
    workoutId?: IntWithAggregatesFilter<"FavoriteWorkout"> | number
    addedAt?: DateTimeWithAggregatesFilter<"FavoriteWorkout"> | Date | string
  }

  export type FavoriteMeditationWhereInput = {
    AND?: FavoriteMeditationWhereInput | FavoriteMeditationWhereInput[]
    OR?: FavoriteMeditationWhereInput[]
    NOT?: FavoriteMeditationWhereInput | FavoriteMeditationWhereInput[]
    id?: StringFilter<"FavoriteMeditation"> | string
    userId?: StringFilter<"FavoriteMeditation"> | string
    meditationId?: IntFilter<"FavoriteMeditation"> | number
    addedAt?: DateTimeFilter<"FavoriteMeditation"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    meditation?: XOR<MeditationSessionRelationFilter, MeditationSessionWhereInput>
  }

  export type FavoriteMeditationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    meditationId?: SortOrder
    addedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    meditation?: MeditationSessionOrderByWithRelationInput
  }

  export type FavoriteMeditationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_meditationId?: FavoriteMeditationUserIdMeditationIdCompoundUniqueInput
    AND?: FavoriteMeditationWhereInput | FavoriteMeditationWhereInput[]
    OR?: FavoriteMeditationWhereInput[]
    NOT?: FavoriteMeditationWhereInput | FavoriteMeditationWhereInput[]
    userId?: StringFilter<"FavoriteMeditation"> | string
    meditationId?: IntFilter<"FavoriteMeditation"> | number
    addedAt?: DateTimeFilter<"FavoriteMeditation"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    meditation?: XOR<MeditationSessionRelationFilter, MeditationSessionWhereInput>
  }, "id" | "userId_meditationId">

  export type FavoriteMeditationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    meditationId?: SortOrder
    addedAt?: SortOrder
    _count?: FavoriteMeditationCountOrderByAggregateInput
    _avg?: FavoriteMeditationAvgOrderByAggregateInput
    _max?: FavoriteMeditationMaxOrderByAggregateInput
    _min?: FavoriteMeditationMinOrderByAggregateInput
    _sum?: FavoriteMeditationSumOrderByAggregateInput
  }

  export type FavoriteMeditationScalarWhereWithAggregatesInput = {
    AND?: FavoriteMeditationScalarWhereWithAggregatesInput | FavoriteMeditationScalarWhereWithAggregatesInput[]
    OR?: FavoriteMeditationScalarWhereWithAggregatesInput[]
    NOT?: FavoriteMeditationScalarWhereWithAggregatesInput | FavoriteMeditationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FavoriteMeditation"> | string
    userId?: StringWithAggregatesFilter<"FavoriteMeditation"> | string
    meditationId?: IntWithAggregatesFilter<"FavoriteMeditation"> | number
    addedAt?: DateTimeWithAggregatesFilter<"FavoriteMeditation"> | Date | string
  }

  export type FavoriteYogaSessionWhereInput = {
    AND?: FavoriteYogaSessionWhereInput | FavoriteYogaSessionWhereInput[]
    OR?: FavoriteYogaSessionWhereInput[]
    NOT?: FavoriteYogaSessionWhereInput | FavoriteYogaSessionWhereInput[]
    id?: StringFilter<"FavoriteYogaSession"> | string
    userId?: StringFilter<"FavoriteYogaSession"> | string
    yogaId?: IntFilter<"FavoriteYogaSession"> | number
    addedAt?: DateTimeFilter<"FavoriteYogaSession"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    yoga?: XOR<YogaSessionRelationFilter, YogaSessionWhereInput>
  }

  export type FavoriteYogaSessionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    yogaId?: SortOrder
    addedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    yoga?: YogaSessionOrderByWithRelationInput
  }

  export type FavoriteYogaSessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_yogaId?: FavoriteYogaSessionUserIdYogaIdCompoundUniqueInput
    AND?: FavoriteYogaSessionWhereInput | FavoriteYogaSessionWhereInput[]
    OR?: FavoriteYogaSessionWhereInput[]
    NOT?: FavoriteYogaSessionWhereInput | FavoriteYogaSessionWhereInput[]
    userId?: StringFilter<"FavoriteYogaSession"> | string
    yogaId?: IntFilter<"FavoriteYogaSession"> | number
    addedAt?: DateTimeFilter<"FavoriteYogaSession"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    yoga?: XOR<YogaSessionRelationFilter, YogaSessionWhereInput>
  }, "id" | "userId_yogaId">

  export type FavoriteYogaSessionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    yogaId?: SortOrder
    addedAt?: SortOrder
    _count?: FavoriteYogaSessionCountOrderByAggregateInput
    _avg?: FavoriteYogaSessionAvgOrderByAggregateInput
    _max?: FavoriteYogaSessionMaxOrderByAggregateInput
    _min?: FavoriteYogaSessionMinOrderByAggregateInput
    _sum?: FavoriteYogaSessionSumOrderByAggregateInput
  }

  export type FavoriteYogaSessionScalarWhereWithAggregatesInput = {
    AND?: FavoriteYogaSessionScalarWhereWithAggregatesInput | FavoriteYogaSessionScalarWhereWithAggregatesInput[]
    OR?: FavoriteYogaSessionScalarWhereWithAggregatesInput[]
    NOT?: FavoriteYogaSessionScalarWhereWithAggregatesInput | FavoriteYogaSessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FavoriteYogaSession"> | string
    userId?: StringWithAggregatesFilter<"FavoriteYogaSession"> | string
    yogaId?: IntWithAggregatesFilter<"FavoriteYogaSession"> | number
    addedAt?: DateTimeWithAggregatesFilter<"FavoriteYogaSession"> | Date | string
  }

  export type FavoriteRecipeWhereInput = {
    AND?: FavoriteRecipeWhereInput | FavoriteRecipeWhereInput[]
    OR?: FavoriteRecipeWhereInput[]
    NOT?: FavoriteRecipeWhereInput | FavoriteRecipeWhereInput[]
    id?: StringFilter<"FavoriteRecipe"> | string
    userId?: StringFilter<"FavoriteRecipe"> | string
    recipeId?: IntFilter<"FavoriteRecipe"> | number
    addedAt?: DateTimeFilter<"FavoriteRecipe"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    recipe?: XOR<RecipeRelationFilter, RecipeWhereInput>
  }

  export type FavoriteRecipeOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    recipeId?: SortOrder
    addedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    recipe?: RecipeOrderByWithRelationInput
  }

  export type FavoriteRecipeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_recipeId?: FavoriteRecipeUserIdRecipeIdCompoundUniqueInput
    AND?: FavoriteRecipeWhereInput | FavoriteRecipeWhereInput[]
    OR?: FavoriteRecipeWhereInput[]
    NOT?: FavoriteRecipeWhereInput | FavoriteRecipeWhereInput[]
    userId?: StringFilter<"FavoriteRecipe"> | string
    recipeId?: IntFilter<"FavoriteRecipe"> | number
    addedAt?: DateTimeFilter<"FavoriteRecipe"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    recipe?: XOR<RecipeRelationFilter, RecipeWhereInput>
  }, "id" | "userId_recipeId">

  export type FavoriteRecipeOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    recipeId?: SortOrder
    addedAt?: SortOrder
    _count?: FavoriteRecipeCountOrderByAggregateInput
    _avg?: FavoriteRecipeAvgOrderByAggregateInput
    _max?: FavoriteRecipeMaxOrderByAggregateInput
    _min?: FavoriteRecipeMinOrderByAggregateInput
    _sum?: FavoriteRecipeSumOrderByAggregateInput
  }

  export type FavoriteRecipeScalarWhereWithAggregatesInput = {
    AND?: FavoriteRecipeScalarWhereWithAggregatesInput | FavoriteRecipeScalarWhereWithAggregatesInput[]
    OR?: FavoriteRecipeScalarWhereWithAggregatesInput[]
    NOT?: FavoriteRecipeScalarWhereWithAggregatesInput | FavoriteRecipeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FavoriteRecipe"> | string
    userId?: StringWithAggregatesFilter<"FavoriteRecipe"> | string
    recipeId?: IntWithAggregatesFilter<"FavoriteRecipe"> | number
    addedAt?: DateTimeWithAggregatesFilter<"FavoriteRecipe"> | Date | string
  }

  export type WeightHistoryWhereInput = {
    AND?: WeightHistoryWhereInput | WeightHistoryWhereInput[]
    OR?: WeightHistoryWhereInput[]
    NOT?: WeightHistoryWhereInput | WeightHistoryWhereInput[]
    id?: StringFilter<"WeightHistory"> | string
    userId?: StringFilter<"WeightHistory"> | string
    weight?: FloatFilter<"WeightHistory"> | number
    date?: DateTimeFilter<"WeightHistory"> | Date | string
    notes?: StringNullableFilter<"WeightHistory"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type WeightHistoryOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    weight?: SortOrder
    date?: SortOrder
    notes?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type WeightHistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WeightHistoryWhereInput | WeightHistoryWhereInput[]
    OR?: WeightHistoryWhereInput[]
    NOT?: WeightHistoryWhereInput | WeightHistoryWhereInput[]
    userId?: StringFilter<"WeightHistory"> | string
    weight?: FloatFilter<"WeightHistory"> | number
    date?: DateTimeFilter<"WeightHistory"> | Date | string
    notes?: StringNullableFilter<"WeightHistory"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type WeightHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    weight?: SortOrder
    date?: SortOrder
    notes?: SortOrderInput | SortOrder
    _count?: WeightHistoryCountOrderByAggregateInput
    _avg?: WeightHistoryAvgOrderByAggregateInput
    _max?: WeightHistoryMaxOrderByAggregateInput
    _min?: WeightHistoryMinOrderByAggregateInput
    _sum?: WeightHistorySumOrderByAggregateInput
  }

  export type WeightHistoryScalarWhereWithAggregatesInput = {
    AND?: WeightHistoryScalarWhereWithAggregatesInput | WeightHistoryScalarWhereWithAggregatesInput[]
    OR?: WeightHistoryScalarWhereWithAggregatesInput[]
    NOT?: WeightHistoryScalarWhereWithAggregatesInput | WeightHistoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WeightHistory"> | string
    userId?: StringWithAggregatesFilter<"WeightHistory"> | string
    weight?: FloatWithAggregatesFilter<"WeightHistory"> | number
    date?: DateTimeWithAggregatesFilter<"WeightHistory"> | Date | string
    notes?: StringNullableWithAggregatesFilter<"WeightHistory"> | string | null
  }

  export type AchievementWhereInput = {
    AND?: AchievementWhereInput | AchievementWhereInput[]
    OR?: AchievementWhereInput[]
    NOT?: AchievementWhereInput | AchievementWhereInput[]
    id?: StringFilter<"Achievement"> | string
    name?: StringFilter<"Achievement"> | string
    description?: StringFilter<"Achievement"> | string
    category?: StringFilter<"Achievement"> | string
    imageUrl?: StringNullableFilter<"Achievement"> | string | null
    criteria?: JsonFilter<"Achievement">
    users?: UserAchievementListRelationFilter
  }

  export type AchievementOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    criteria?: SortOrder
    users?: UserAchievementOrderByRelationAggregateInput
  }

  export type AchievementWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: AchievementWhereInput | AchievementWhereInput[]
    OR?: AchievementWhereInput[]
    NOT?: AchievementWhereInput | AchievementWhereInput[]
    description?: StringFilter<"Achievement"> | string
    category?: StringFilter<"Achievement"> | string
    imageUrl?: StringNullableFilter<"Achievement"> | string | null
    criteria?: JsonFilter<"Achievement">
    users?: UserAchievementListRelationFilter
  }, "id" | "name">

  export type AchievementOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    criteria?: SortOrder
    _count?: AchievementCountOrderByAggregateInput
    _max?: AchievementMaxOrderByAggregateInput
    _min?: AchievementMinOrderByAggregateInput
  }

  export type AchievementScalarWhereWithAggregatesInput = {
    AND?: AchievementScalarWhereWithAggregatesInput | AchievementScalarWhereWithAggregatesInput[]
    OR?: AchievementScalarWhereWithAggregatesInput[]
    NOT?: AchievementScalarWhereWithAggregatesInput | AchievementScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Achievement"> | string
    name?: StringWithAggregatesFilter<"Achievement"> | string
    description?: StringWithAggregatesFilter<"Achievement"> | string
    category?: StringWithAggregatesFilter<"Achievement"> | string
    imageUrl?: StringNullableWithAggregatesFilter<"Achievement"> | string | null
    criteria?: JsonWithAggregatesFilter<"Achievement">
  }

  export type UserAchievementWhereInput = {
    AND?: UserAchievementWhereInput | UserAchievementWhereInput[]
    OR?: UserAchievementWhereInput[]
    NOT?: UserAchievementWhereInput | UserAchievementWhereInput[]
    id?: StringFilter<"UserAchievement"> | string
    userId?: StringFilter<"UserAchievement"> | string
    achievementId?: StringFilter<"UserAchievement"> | string
    achievedAt?: DateTimeFilter<"UserAchievement"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    achievement?: XOR<AchievementRelationFilter, AchievementWhereInput>
  }

  export type UserAchievementOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    achievementId?: SortOrder
    achievedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    achievement?: AchievementOrderByWithRelationInput
  }

  export type UserAchievementWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_achievementId?: UserAchievementUserIdAchievementIdCompoundUniqueInput
    AND?: UserAchievementWhereInput | UserAchievementWhereInput[]
    OR?: UserAchievementWhereInput[]
    NOT?: UserAchievementWhereInput | UserAchievementWhereInput[]
    userId?: StringFilter<"UserAchievement"> | string
    achievementId?: StringFilter<"UserAchievement"> | string
    achievedAt?: DateTimeFilter<"UserAchievement"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    achievement?: XOR<AchievementRelationFilter, AchievementWhereInput>
  }, "id" | "userId_achievementId">

  export type UserAchievementOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    achievementId?: SortOrder
    achievedAt?: SortOrder
    _count?: UserAchievementCountOrderByAggregateInput
    _max?: UserAchievementMaxOrderByAggregateInput
    _min?: UserAchievementMinOrderByAggregateInput
  }

  export type UserAchievementScalarWhereWithAggregatesInput = {
    AND?: UserAchievementScalarWhereWithAggregatesInput | UserAchievementScalarWhereWithAggregatesInput[]
    OR?: UserAchievementScalarWhereWithAggregatesInput[]
    NOT?: UserAchievementScalarWhereWithAggregatesInput | UserAchievementScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserAchievement"> | string
    userId?: StringWithAggregatesFilter<"UserAchievement"> | string
    achievementId?: StringWithAggregatesFilter<"UserAchievement"> | string
    achievedAt?: DateTimeWithAggregatesFilter<"UserAchievement"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    name?: string | null
    firstName?: string | null
    lastName?: string | null
    username?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    height?: number | null
    weight?: number | null
    goalWeight?: number | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    fitnessLevel?: string | null
    memberSince?: Date | string
    workoutHistory?: WorkoutHistoryCreateNestedManyWithoutUserInput
    favoriteWorkouts?: FavoriteWorkoutCreateNestedManyWithoutUserInput
    favoriteMeditations?: FavoriteMeditationCreateNestedManyWithoutUserInput
    favoriteYogaSessions?: FavoriteYogaSessionCreateNestedManyWithoutUserInput
    favoriteRecipes?: FavoriteRecipeCreateNestedManyWithoutUserInput
    scheduledEvents?: ScheduledEventCreateNestedManyWithoutUserInput
    weightHistory?: WeightHistoryCreateNestedManyWithoutUserInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    settings?: UserSettingsCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name?: string | null
    firstName?: string | null
    lastName?: string | null
    username?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    height?: number | null
    weight?: number | null
    goalWeight?: number | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    fitnessLevel?: string | null
    memberSince?: Date | string
    workoutHistory?: WorkoutHistoryUncheckedCreateNestedManyWithoutUserInput
    favoriteWorkouts?: FavoriteWorkoutUncheckedCreateNestedManyWithoutUserInput
    favoriteMeditations?: FavoriteMeditationUncheckedCreateNestedManyWithoutUserInput
    favoriteYogaSessions?: FavoriteYogaSessionUncheckedCreateNestedManyWithoutUserInput
    favoriteRecipes?: FavoriteRecipeUncheckedCreateNestedManyWithoutUserInput
    scheduledEvents?: ScheduledEventUncheckedCreateNestedManyWithoutUserInput
    weightHistory?: WeightHistoryUncheckedCreateNestedManyWithoutUserInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    goalWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    fitnessLevel?: NullableStringFieldUpdateOperationsInput | string | null
    memberSince?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutHistory?: WorkoutHistoryUpdateManyWithoutUserNestedInput
    favoriteWorkouts?: FavoriteWorkoutUpdateManyWithoutUserNestedInput
    favoriteMeditations?: FavoriteMeditationUpdateManyWithoutUserNestedInput
    favoriteYogaSessions?: FavoriteYogaSessionUpdateManyWithoutUserNestedInput
    favoriteRecipes?: FavoriteRecipeUpdateManyWithoutUserNestedInput
    scheduledEvents?: ScheduledEventUpdateManyWithoutUserNestedInput
    weightHistory?: WeightHistoryUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    goalWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    fitnessLevel?: NullableStringFieldUpdateOperationsInput | string | null
    memberSince?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutHistory?: WorkoutHistoryUncheckedUpdateManyWithoutUserNestedInput
    favoriteWorkouts?: FavoriteWorkoutUncheckedUpdateManyWithoutUserNestedInput
    favoriteMeditations?: FavoriteMeditationUncheckedUpdateManyWithoutUserNestedInput
    favoriteYogaSessions?: FavoriteYogaSessionUncheckedUpdateManyWithoutUserNestedInput
    favoriteRecipes?: FavoriteRecipeUncheckedUpdateManyWithoutUserNestedInput
    scheduledEvents?: ScheduledEventUncheckedUpdateManyWithoutUserNestedInput
    weightHistory?: WeightHistoryUncheckedUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name?: string | null
    firstName?: string | null
    lastName?: string | null
    username?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    height?: number | null
    weight?: number | null
    goalWeight?: number | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    fitnessLevel?: string | null
    memberSince?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    goalWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    fitnessLevel?: NullableStringFieldUpdateOperationsInput | string | null
    memberSince?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    goalWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    fitnessLevel?: NullableStringFieldUpdateOperationsInput | string | null
    memberSince?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSettingsCreateInput = {
    id?: string
    notificationsEnabled?: boolean
    emailNotifications?: boolean
    darkMode?: boolean
    language?: string
    measurementUnit?: string
    privacySettings?: NullableJsonNullValueInput | InputJsonValue
    user: UserCreateNestedOneWithoutSettingsInput
  }

  export type UserSettingsUncheckedCreateInput = {
    id?: string
    userId: string
    notificationsEnabled?: boolean
    emailNotifications?: boolean
    darkMode?: boolean
    language?: string
    measurementUnit?: string
    privacySettings?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserSettingsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    notificationsEnabled?: BoolFieldUpdateOperationsInput | boolean
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    darkMode?: BoolFieldUpdateOperationsInput | boolean
    language?: StringFieldUpdateOperationsInput | string
    measurementUnit?: StringFieldUpdateOperationsInput | string
    privacySettings?: NullableJsonNullValueInput | InputJsonValue
    user?: UserUpdateOneRequiredWithoutSettingsNestedInput
  }

  export type UserSettingsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    notificationsEnabled?: BoolFieldUpdateOperationsInput | boolean
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    darkMode?: BoolFieldUpdateOperationsInput | boolean
    language?: StringFieldUpdateOperationsInput | string
    measurementUnit?: StringFieldUpdateOperationsInput | string
    privacySettings?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserSettingsCreateManyInput = {
    id?: string
    userId: string
    notificationsEnabled?: boolean
    emailNotifications?: boolean
    darkMode?: boolean
    language?: string
    measurementUnit?: string
    privacySettings?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserSettingsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    notificationsEnabled?: BoolFieldUpdateOperationsInput | boolean
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    darkMode?: BoolFieldUpdateOperationsInput | boolean
    language?: StringFieldUpdateOperationsInput | string
    measurementUnit?: StringFieldUpdateOperationsInput | string
    privacySettings?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserSettingsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    notificationsEnabled?: BoolFieldUpdateOperationsInput | boolean
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    darkMode?: BoolFieldUpdateOperationsInput | boolean
    language?: StringFieldUpdateOperationsInput | string
    measurementUnit?: StringFieldUpdateOperationsInput | string
    privacySettings?: NullableJsonNullValueInput | InputJsonValue
  }

  export type WorkoutCreateInput = {
    title: string
    description: string
    category: string
    difficulty: string
    duration: number
    calories: number
    muscleGroups?: WorkoutCreatemuscleGroupsInput | string[]
    imageUrl?: string | null
    videoUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    rating?: number
    ratingCount?: number
    exercises?: WorkoutExerciseCreateNestedManyWithoutWorkoutInput
    workoutHistory?: WorkoutHistoryCreateNestedManyWithoutWorkoutInput
    favoriteBy?: FavoriteWorkoutCreateNestedManyWithoutWorkoutInput
    scheduledEvents?: ScheduledEventCreateNestedManyWithoutWorkoutInput
  }

  export type WorkoutUncheckedCreateInput = {
    id?: number
    title: string
    description: string
    category: string
    difficulty: string
    duration: number
    calories: number
    muscleGroups?: WorkoutCreatemuscleGroupsInput | string[]
    imageUrl?: string | null
    videoUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    rating?: number
    ratingCount?: number
    exercises?: WorkoutExerciseUncheckedCreateNestedManyWithoutWorkoutInput
    workoutHistory?: WorkoutHistoryUncheckedCreateNestedManyWithoutWorkoutInput
    favoriteBy?: FavoriteWorkoutUncheckedCreateNestedManyWithoutWorkoutInput
    scheduledEvents?: ScheduledEventUncheckedCreateNestedManyWithoutWorkoutInput
  }

  export type WorkoutUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    difficulty?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    calories?: IntFieldUpdateOperationsInput | number
    muscleGroups?: WorkoutUpdatemuscleGroupsInput | string[]
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    exercises?: WorkoutExerciseUpdateManyWithoutWorkoutNestedInput
    workoutHistory?: WorkoutHistoryUpdateManyWithoutWorkoutNestedInput
    favoriteBy?: FavoriteWorkoutUpdateManyWithoutWorkoutNestedInput
    scheduledEvents?: ScheduledEventUpdateManyWithoutWorkoutNestedInput
  }

  export type WorkoutUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    difficulty?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    calories?: IntFieldUpdateOperationsInput | number
    muscleGroups?: WorkoutUpdatemuscleGroupsInput | string[]
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    exercises?: WorkoutExerciseUncheckedUpdateManyWithoutWorkoutNestedInput
    workoutHistory?: WorkoutHistoryUncheckedUpdateManyWithoutWorkoutNestedInput
    favoriteBy?: FavoriteWorkoutUncheckedUpdateManyWithoutWorkoutNestedInput
    scheduledEvents?: ScheduledEventUncheckedUpdateManyWithoutWorkoutNestedInput
  }

  export type WorkoutCreateManyInput = {
    id?: number
    title: string
    description: string
    category: string
    difficulty: string
    duration: number
    calories: number
    muscleGroups?: WorkoutCreatemuscleGroupsInput | string[]
    imageUrl?: string | null
    videoUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    rating?: number
    ratingCount?: number
  }

  export type WorkoutUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    difficulty?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    calories?: IntFieldUpdateOperationsInput | number
    muscleGroups?: WorkoutUpdatemuscleGroupsInput | string[]
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
  }

  export type WorkoutUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    difficulty?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    calories?: IntFieldUpdateOperationsInput | number
    muscleGroups?: WorkoutUpdatemuscleGroupsInput | string[]
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
  }

  export type ExerciseCreateInput = {
    name: string
    description: string
    instructions: string
    muscleGroups?: ExerciseCreatemuscleGroupsInput | string[]
    equipment?: ExerciseCreateequipmentInput | string[]
    difficultyLevel: string
    imageUrl?: string | null
    videoUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workouts?: WorkoutExerciseCreateNestedManyWithoutExerciseInput
  }

  export type ExerciseUncheckedCreateInput = {
    id?: number
    name: string
    description: string
    instructions: string
    muscleGroups?: ExerciseCreatemuscleGroupsInput | string[]
    equipment?: ExerciseCreateequipmentInput | string[]
    difficultyLevel: string
    imageUrl?: string | null
    videoUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workouts?: WorkoutExerciseUncheckedCreateNestedManyWithoutExerciseInput
  }

  export type ExerciseUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    instructions?: StringFieldUpdateOperationsInput | string
    muscleGroups?: ExerciseUpdatemuscleGroupsInput | string[]
    equipment?: ExerciseUpdateequipmentInput | string[]
    difficultyLevel?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workouts?: WorkoutExerciseUpdateManyWithoutExerciseNestedInput
  }

  export type ExerciseUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    instructions?: StringFieldUpdateOperationsInput | string
    muscleGroups?: ExerciseUpdatemuscleGroupsInput | string[]
    equipment?: ExerciseUpdateequipmentInput | string[]
    difficultyLevel?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workouts?: WorkoutExerciseUncheckedUpdateManyWithoutExerciseNestedInput
  }

  export type ExerciseCreateManyInput = {
    id?: number
    name: string
    description: string
    instructions: string
    muscleGroups?: ExerciseCreatemuscleGroupsInput | string[]
    equipment?: ExerciseCreateequipmentInput | string[]
    difficultyLevel: string
    imageUrl?: string | null
    videoUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExerciseUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    instructions?: StringFieldUpdateOperationsInput | string
    muscleGroups?: ExerciseUpdatemuscleGroupsInput | string[]
    equipment?: ExerciseUpdateequipmentInput | string[]
    difficultyLevel?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExerciseUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    instructions?: StringFieldUpdateOperationsInput | string
    muscleGroups?: ExerciseUpdatemuscleGroupsInput | string[]
    equipment?: ExerciseUpdateequipmentInput | string[]
    difficultyLevel?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkoutExerciseCreateInput = {
    sets?: number | null
    reps?: string | null
    weight?: number | null
    restTime?: number | null
    notes?: string | null
    order: number
    workout: WorkoutCreateNestedOneWithoutExercisesInput
    exercise: ExerciseCreateNestedOneWithoutWorkoutsInput
  }

  export type WorkoutExerciseUncheckedCreateInput = {
    id?: number
    workoutId: number
    exerciseId: number
    sets?: number | null
    reps?: string | null
    weight?: number | null
    restTime?: number | null
    notes?: string | null
    order: number
  }

  export type WorkoutExerciseUpdateInput = {
    sets?: NullableIntFieldUpdateOperationsInput | number | null
    reps?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    restTime?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    workout?: WorkoutUpdateOneRequiredWithoutExercisesNestedInput
    exercise?: ExerciseUpdateOneRequiredWithoutWorkoutsNestedInput
  }

  export type WorkoutExerciseUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    workoutId?: IntFieldUpdateOperationsInput | number
    exerciseId?: IntFieldUpdateOperationsInput | number
    sets?: NullableIntFieldUpdateOperationsInput | number | null
    reps?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    restTime?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
  }

  export type WorkoutExerciseCreateManyInput = {
    id?: number
    workoutId: number
    exerciseId: number
    sets?: number | null
    reps?: string | null
    weight?: number | null
    restTime?: number | null
    notes?: string | null
    order: number
  }

  export type WorkoutExerciseUpdateManyMutationInput = {
    sets?: NullableIntFieldUpdateOperationsInput | number | null
    reps?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    restTime?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
  }

  export type WorkoutExerciseUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    workoutId?: IntFieldUpdateOperationsInput | number
    exerciseId?: IntFieldUpdateOperationsInput | number
    sets?: NullableIntFieldUpdateOperationsInput | number | null
    reps?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    restTime?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
  }

  export type MeditationSessionCreateInput = {
    title: string
    description: string
    category: string
    duration: number
    level: string
    instructor: string
    audioUrl: string
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    rating?: number
    ratingCount?: number
    favoriteBy?: FavoriteMeditationCreateNestedManyWithoutMeditationInput
    scheduledEvents?: ScheduledEventCreateNestedManyWithoutMeditationInput
  }

  export type MeditationSessionUncheckedCreateInput = {
    id?: number
    title: string
    description: string
    category: string
    duration: number
    level: string
    instructor: string
    audioUrl: string
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    rating?: number
    ratingCount?: number
    favoriteBy?: FavoriteMeditationUncheckedCreateNestedManyWithoutMeditationInput
    scheduledEvents?: ScheduledEventUncheckedCreateNestedManyWithoutMeditationInput
  }

  export type MeditationSessionUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    level?: StringFieldUpdateOperationsInput | string
    instructor?: StringFieldUpdateOperationsInput | string
    audioUrl?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    favoriteBy?: FavoriteMeditationUpdateManyWithoutMeditationNestedInput
    scheduledEvents?: ScheduledEventUpdateManyWithoutMeditationNestedInput
  }

  export type MeditationSessionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    level?: StringFieldUpdateOperationsInput | string
    instructor?: StringFieldUpdateOperationsInput | string
    audioUrl?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    favoriteBy?: FavoriteMeditationUncheckedUpdateManyWithoutMeditationNestedInput
    scheduledEvents?: ScheduledEventUncheckedUpdateManyWithoutMeditationNestedInput
  }

  export type MeditationSessionCreateManyInput = {
    id?: number
    title: string
    description: string
    category: string
    duration: number
    level: string
    instructor: string
    audioUrl: string
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    rating?: number
    ratingCount?: number
  }

  export type MeditationSessionUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    level?: StringFieldUpdateOperationsInput | string
    instructor?: StringFieldUpdateOperationsInput | string
    audioUrl?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
  }

  export type MeditationSessionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    level?: StringFieldUpdateOperationsInput | string
    instructor?: StringFieldUpdateOperationsInput | string
    audioUrl?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
  }

  export type YogaSessionCreateInput = {
    title: string
    description: string
    style: string
    duration: number
    level: string
    instructor: string
    benefits?: YogaSessionCreatebenefitsInput | string[]
    videoUrl: string
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    rating?: number
    ratingCount?: number
    favoriteBy?: FavoriteYogaSessionCreateNestedManyWithoutYogaInput
    scheduledEvents?: ScheduledEventCreateNestedManyWithoutYogaInput
  }

  export type YogaSessionUncheckedCreateInput = {
    id?: number
    title: string
    description: string
    style: string
    duration: number
    level: string
    instructor: string
    benefits?: YogaSessionCreatebenefitsInput | string[]
    videoUrl: string
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    rating?: number
    ratingCount?: number
    favoriteBy?: FavoriteYogaSessionUncheckedCreateNestedManyWithoutYogaInput
    scheduledEvents?: ScheduledEventUncheckedCreateNestedManyWithoutYogaInput
  }

  export type YogaSessionUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    style?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    level?: StringFieldUpdateOperationsInput | string
    instructor?: StringFieldUpdateOperationsInput | string
    benefits?: YogaSessionUpdatebenefitsInput | string[]
    videoUrl?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    favoriteBy?: FavoriteYogaSessionUpdateManyWithoutYogaNestedInput
    scheduledEvents?: ScheduledEventUpdateManyWithoutYogaNestedInput
  }

  export type YogaSessionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    style?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    level?: StringFieldUpdateOperationsInput | string
    instructor?: StringFieldUpdateOperationsInput | string
    benefits?: YogaSessionUpdatebenefitsInput | string[]
    videoUrl?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    favoriteBy?: FavoriteYogaSessionUncheckedUpdateManyWithoutYogaNestedInput
    scheduledEvents?: ScheduledEventUncheckedUpdateManyWithoutYogaNestedInput
  }

  export type YogaSessionCreateManyInput = {
    id?: number
    title: string
    description: string
    style: string
    duration: number
    level: string
    instructor: string
    benefits?: YogaSessionCreatebenefitsInput | string[]
    videoUrl: string
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    rating?: number
    ratingCount?: number
  }

  export type YogaSessionUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    style?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    level?: StringFieldUpdateOperationsInput | string
    instructor?: StringFieldUpdateOperationsInput | string
    benefits?: YogaSessionUpdatebenefitsInput | string[]
    videoUrl?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
  }

  export type YogaSessionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    style?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    level?: StringFieldUpdateOperationsInput | string
    instructor?: StringFieldUpdateOperationsInput | string
    benefits?: YogaSessionUpdatebenefitsInput | string[]
    videoUrl?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
  }

  export type RecipeCreateInput = {
    title: string
    description: string
    category: string
    difficulty: string
    prepTime: number
    cookTime: number
    servings: number
    calories: number
    protein?: number | null
    carbs?: number | null
    fat?: number | null
    tags?: RecipeCreatetagsInput | string[]
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    rating?: number
    ratingCount?: number
    author?: string | null
    ingredients?: RecipeIngredientCreateNestedManyWithoutRecipeInput
    instructions?: RecipeInstructionCreateNestedManyWithoutRecipeInput
    favoriteBy?: FavoriteRecipeCreateNestedManyWithoutRecipeInput
  }

  export type RecipeUncheckedCreateInput = {
    id?: number
    title: string
    description: string
    category: string
    difficulty: string
    prepTime: number
    cookTime: number
    servings: number
    calories: number
    protein?: number | null
    carbs?: number | null
    fat?: number | null
    tags?: RecipeCreatetagsInput | string[]
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    rating?: number
    ratingCount?: number
    author?: string | null
    ingredients?: RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInput
    instructions?: RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInput
    favoriteBy?: FavoriteRecipeUncheckedCreateNestedManyWithoutRecipeInput
  }

  export type RecipeUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    difficulty?: StringFieldUpdateOperationsInput | string
    prepTime?: IntFieldUpdateOperationsInput | number
    cookTime?: IntFieldUpdateOperationsInput | number
    servings?: IntFieldUpdateOperationsInput | number
    calories?: IntFieldUpdateOperationsInput | number
    protein?: NullableFloatFieldUpdateOperationsInput | number | null
    carbs?: NullableFloatFieldUpdateOperationsInput | number | null
    fat?: NullableFloatFieldUpdateOperationsInput | number | null
    tags?: RecipeUpdatetagsInput | string[]
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    author?: NullableStringFieldUpdateOperationsInput | string | null
    ingredients?: RecipeIngredientUpdateManyWithoutRecipeNestedInput
    instructions?: RecipeInstructionUpdateManyWithoutRecipeNestedInput
    favoriteBy?: FavoriteRecipeUpdateManyWithoutRecipeNestedInput
  }

  export type RecipeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    difficulty?: StringFieldUpdateOperationsInput | string
    prepTime?: IntFieldUpdateOperationsInput | number
    cookTime?: IntFieldUpdateOperationsInput | number
    servings?: IntFieldUpdateOperationsInput | number
    calories?: IntFieldUpdateOperationsInput | number
    protein?: NullableFloatFieldUpdateOperationsInput | number | null
    carbs?: NullableFloatFieldUpdateOperationsInput | number | null
    fat?: NullableFloatFieldUpdateOperationsInput | number | null
    tags?: RecipeUpdatetagsInput | string[]
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    author?: NullableStringFieldUpdateOperationsInput | string | null
    ingredients?: RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInput
    instructions?: RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInput
    favoriteBy?: FavoriteRecipeUncheckedUpdateManyWithoutRecipeNestedInput
  }

  export type RecipeCreateManyInput = {
    id?: number
    title: string
    description: string
    category: string
    difficulty: string
    prepTime: number
    cookTime: number
    servings: number
    calories: number
    protein?: number | null
    carbs?: number | null
    fat?: number | null
    tags?: RecipeCreatetagsInput | string[]
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    rating?: number
    ratingCount?: number
    author?: string | null
  }

  export type RecipeUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    difficulty?: StringFieldUpdateOperationsInput | string
    prepTime?: IntFieldUpdateOperationsInput | number
    cookTime?: IntFieldUpdateOperationsInput | number
    servings?: IntFieldUpdateOperationsInput | number
    calories?: IntFieldUpdateOperationsInput | number
    protein?: NullableFloatFieldUpdateOperationsInput | number | null
    carbs?: NullableFloatFieldUpdateOperationsInput | number | null
    fat?: NullableFloatFieldUpdateOperationsInput | number | null
    tags?: RecipeUpdatetagsInput | string[]
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    author?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RecipeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    difficulty?: StringFieldUpdateOperationsInput | string
    prepTime?: IntFieldUpdateOperationsInput | number
    cookTime?: IntFieldUpdateOperationsInput | number
    servings?: IntFieldUpdateOperationsInput | number
    calories?: IntFieldUpdateOperationsInput | number
    protein?: NullableFloatFieldUpdateOperationsInput | number | null
    carbs?: NullableFloatFieldUpdateOperationsInput | number | null
    fat?: NullableFloatFieldUpdateOperationsInput | number | null
    tags?: RecipeUpdatetagsInput | string[]
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    author?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IngredientCreateInput = {
    name: string
    calories?: number | null
    protein?: number | null
    carbs?: number | null
    fat?: number | null
    recipes?: RecipeIngredientCreateNestedManyWithoutIngredientInput
  }

  export type IngredientUncheckedCreateInput = {
    id?: number
    name: string
    calories?: number | null
    protein?: number | null
    carbs?: number | null
    fat?: number | null
    recipes?: RecipeIngredientUncheckedCreateNestedManyWithoutIngredientInput
  }

  export type IngredientUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    calories?: NullableIntFieldUpdateOperationsInput | number | null
    protein?: NullableFloatFieldUpdateOperationsInput | number | null
    carbs?: NullableFloatFieldUpdateOperationsInput | number | null
    fat?: NullableFloatFieldUpdateOperationsInput | number | null
    recipes?: RecipeIngredientUpdateManyWithoutIngredientNestedInput
  }

  export type IngredientUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    calories?: NullableIntFieldUpdateOperationsInput | number | null
    protein?: NullableFloatFieldUpdateOperationsInput | number | null
    carbs?: NullableFloatFieldUpdateOperationsInput | number | null
    fat?: NullableFloatFieldUpdateOperationsInput | number | null
    recipes?: RecipeIngredientUncheckedUpdateManyWithoutIngredientNestedInput
  }

  export type IngredientCreateManyInput = {
    id?: number
    name: string
    calories?: number | null
    protein?: number | null
    carbs?: number | null
    fat?: number | null
  }

  export type IngredientUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    calories?: NullableIntFieldUpdateOperationsInput | number | null
    protein?: NullableFloatFieldUpdateOperationsInput | number | null
    carbs?: NullableFloatFieldUpdateOperationsInput | number | null
    fat?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type IngredientUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    calories?: NullableIntFieldUpdateOperationsInput | number | null
    protein?: NullableFloatFieldUpdateOperationsInput | number | null
    carbs?: NullableFloatFieldUpdateOperationsInput | number | null
    fat?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type RecipeIngredientCreateInput = {
    quantity: string
    unit: string
    recipe: RecipeCreateNestedOneWithoutIngredientsInput
    ingredient: IngredientCreateNestedOneWithoutRecipesInput
  }

  export type RecipeIngredientUncheckedCreateInput = {
    id?: number
    recipeId: number
    ingredientId: number
    quantity: string
    unit: string
  }

  export type RecipeIngredientUpdateInput = {
    quantity?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    recipe?: RecipeUpdateOneRequiredWithoutIngredientsNestedInput
    ingredient?: IngredientUpdateOneRequiredWithoutRecipesNestedInput
  }

  export type RecipeIngredientUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    recipeId?: IntFieldUpdateOperationsInput | number
    ingredientId?: IntFieldUpdateOperationsInput | number
    quantity?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
  }

  export type RecipeIngredientCreateManyInput = {
    id?: number
    recipeId: number
    ingredientId: number
    quantity: string
    unit: string
  }

  export type RecipeIngredientUpdateManyMutationInput = {
    quantity?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
  }

  export type RecipeIngredientUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    recipeId?: IntFieldUpdateOperationsInput | number
    ingredientId?: IntFieldUpdateOperationsInput | number
    quantity?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
  }

  export type RecipeInstructionCreateInput = {
    stepNumber: number
    instruction: string
    recipe: RecipeCreateNestedOneWithoutInstructionsInput
  }

  export type RecipeInstructionUncheckedCreateInput = {
    id?: number
    recipeId: number
    stepNumber: number
    instruction: string
  }

  export type RecipeInstructionUpdateInput = {
    stepNumber?: IntFieldUpdateOperationsInput | number
    instruction?: StringFieldUpdateOperationsInput | string
    recipe?: RecipeUpdateOneRequiredWithoutInstructionsNestedInput
  }

  export type RecipeInstructionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    recipeId?: IntFieldUpdateOperationsInput | number
    stepNumber?: IntFieldUpdateOperationsInput | number
    instruction?: StringFieldUpdateOperationsInput | string
  }

  export type RecipeInstructionCreateManyInput = {
    id?: number
    recipeId: number
    stepNumber: number
    instruction: string
  }

  export type RecipeInstructionUpdateManyMutationInput = {
    stepNumber?: IntFieldUpdateOperationsInput | number
    instruction?: StringFieldUpdateOperationsInput | string
  }

  export type RecipeInstructionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    recipeId?: IntFieldUpdateOperationsInput | number
    stepNumber?: IntFieldUpdateOperationsInput | number
    instruction?: StringFieldUpdateOperationsInput | string
  }

  export type BlogPostCreateInput = {
    title: string
    content: string
    excerpt: string
    category: string
    tags?: BlogPostCreatetagsInput | string[]
    imageUrl?: string | null
    author: string
    published?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    publishedAt?: Date | string | null
  }

  export type BlogPostUncheckedCreateInput = {
    id?: number
    title: string
    content: string
    excerpt: string
    category: string
    tags?: BlogPostCreatetagsInput | string[]
    imageUrl?: string | null
    author: string
    published?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    publishedAt?: Date | string | null
  }

  export type BlogPostUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    excerpt?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    tags?: BlogPostUpdatetagsInput | string[]
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    author?: StringFieldUpdateOperationsInput | string
    published?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BlogPostUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    excerpt?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    tags?: BlogPostUpdatetagsInput | string[]
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    author?: StringFieldUpdateOperationsInput | string
    published?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BlogPostCreateManyInput = {
    id?: number
    title: string
    content: string
    excerpt: string
    category: string
    tags?: BlogPostCreatetagsInput | string[]
    imageUrl?: string | null
    author: string
    published?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    publishedAt?: Date | string | null
  }

  export type BlogPostUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    excerpt?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    tags?: BlogPostUpdatetagsInput | string[]
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    author?: StringFieldUpdateOperationsInput | string
    published?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BlogPostUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    excerpt?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    tags?: BlogPostUpdatetagsInput | string[]
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    author?: StringFieldUpdateOperationsInput | string
    published?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ScheduledEventCreateInput = {
    id?: string
    title: string
    date: Date | string
    time: string
    duration: number
    eventType: string
    completed?: boolean
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workout?: WorkoutCreateNestedOneWithoutScheduledEventsInput
    meditation?: MeditationSessionCreateNestedOneWithoutScheduledEventsInput
    yoga?: YogaSessionCreateNestedOneWithoutScheduledEventsInput
    user: UserCreateNestedOneWithoutScheduledEventsInput
  }

  export type ScheduledEventUncheckedCreateInput = {
    id?: string
    userId: string
    title: string
    date: Date | string
    time: string
    duration: number
    eventType: string
    completed?: boolean
    notes?: string | null
    workoutId?: number | null
    meditationId?: number | null
    yogaId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScheduledEventUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    eventType?: StringFieldUpdateOperationsInput | string
    completed?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workout?: WorkoutUpdateOneWithoutScheduledEventsNestedInput
    meditation?: MeditationSessionUpdateOneWithoutScheduledEventsNestedInput
    yoga?: YogaSessionUpdateOneWithoutScheduledEventsNestedInput
    user?: UserUpdateOneRequiredWithoutScheduledEventsNestedInput
  }

  export type ScheduledEventUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    eventType?: StringFieldUpdateOperationsInput | string
    completed?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    workoutId?: NullableIntFieldUpdateOperationsInput | number | null
    meditationId?: NullableIntFieldUpdateOperationsInput | number | null
    yogaId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduledEventCreateManyInput = {
    id?: string
    userId: string
    title: string
    date: Date | string
    time: string
    duration: number
    eventType: string
    completed?: boolean
    notes?: string | null
    workoutId?: number | null
    meditationId?: number | null
    yogaId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScheduledEventUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    eventType?: StringFieldUpdateOperationsInput | string
    completed?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduledEventUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    eventType?: StringFieldUpdateOperationsInput | string
    completed?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    workoutId?: NullableIntFieldUpdateOperationsInput | number | null
    meditationId?: NullableIntFieldUpdateOperationsInput | number | null
    yogaId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkoutHistoryCreateInput = {
    id?: string
    completedAt?: Date | string
    duration: number
    notes?: string | null
    rating?: number | null
    exerciseResults?: NullableJsonNullValueInput | InputJsonValue
    user: UserCreateNestedOneWithoutWorkoutHistoryInput
    workout: WorkoutCreateNestedOneWithoutWorkoutHistoryInput
  }

  export type WorkoutHistoryUncheckedCreateInput = {
    id?: string
    userId: string
    workoutId: number
    completedAt?: Date | string
    duration: number
    notes?: string | null
    rating?: number | null
    exerciseResults?: NullableJsonNullValueInput | InputJsonValue
  }

  export type WorkoutHistoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    exerciseResults?: NullableJsonNullValueInput | InputJsonValue
    user?: UserUpdateOneRequiredWithoutWorkoutHistoryNestedInput
    workout?: WorkoutUpdateOneRequiredWithoutWorkoutHistoryNestedInput
  }

  export type WorkoutHistoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    workoutId?: IntFieldUpdateOperationsInput | number
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    exerciseResults?: NullableJsonNullValueInput | InputJsonValue
  }

  export type WorkoutHistoryCreateManyInput = {
    id?: string
    userId: string
    workoutId: number
    completedAt?: Date | string
    duration: number
    notes?: string | null
    rating?: number | null
    exerciseResults?: NullableJsonNullValueInput | InputJsonValue
  }

  export type WorkoutHistoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    exerciseResults?: NullableJsonNullValueInput | InputJsonValue
  }

  export type WorkoutHistoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    workoutId?: IntFieldUpdateOperationsInput | number
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    exerciseResults?: NullableJsonNullValueInput | InputJsonValue
  }

  export type FavoriteWorkoutCreateInput = {
    id?: string
    addedAt?: Date | string
    user: UserCreateNestedOneWithoutFavoriteWorkoutsInput
    workout: WorkoutCreateNestedOneWithoutFavoriteByInput
  }

  export type FavoriteWorkoutUncheckedCreateInput = {
    id?: string
    userId: string
    workoutId: number
    addedAt?: Date | string
  }

  export type FavoriteWorkoutUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFavoriteWorkoutsNestedInput
    workout?: WorkoutUpdateOneRequiredWithoutFavoriteByNestedInput
  }

  export type FavoriteWorkoutUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    workoutId?: IntFieldUpdateOperationsInput | number
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteWorkoutCreateManyInput = {
    id?: string
    userId: string
    workoutId: number
    addedAt?: Date | string
  }

  export type FavoriteWorkoutUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteWorkoutUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    workoutId?: IntFieldUpdateOperationsInput | number
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteMeditationCreateInput = {
    id?: string
    addedAt?: Date | string
    user: UserCreateNestedOneWithoutFavoriteMeditationsInput
    meditation: MeditationSessionCreateNestedOneWithoutFavoriteByInput
  }

  export type FavoriteMeditationUncheckedCreateInput = {
    id?: string
    userId: string
    meditationId: number
    addedAt?: Date | string
  }

  export type FavoriteMeditationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFavoriteMeditationsNestedInput
    meditation?: MeditationSessionUpdateOneRequiredWithoutFavoriteByNestedInput
  }

  export type FavoriteMeditationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    meditationId?: IntFieldUpdateOperationsInput | number
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteMeditationCreateManyInput = {
    id?: string
    userId: string
    meditationId: number
    addedAt?: Date | string
  }

  export type FavoriteMeditationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteMeditationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    meditationId?: IntFieldUpdateOperationsInput | number
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteYogaSessionCreateInput = {
    id?: string
    addedAt?: Date | string
    user: UserCreateNestedOneWithoutFavoriteYogaSessionsInput
    yoga: YogaSessionCreateNestedOneWithoutFavoriteByInput
  }

  export type FavoriteYogaSessionUncheckedCreateInput = {
    id?: string
    userId: string
    yogaId: number
    addedAt?: Date | string
  }

  export type FavoriteYogaSessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFavoriteYogaSessionsNestedInput
    yoga?: YogaSessionUpdateOneRequiredWithoutFavoriteByNestedInput
  }

  export type FavoriteYogaSessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    yogaId?: IntFieldUpdateOperationsInput | number
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteYogaSessionCreateManyInput = {
    id?: string
    userId: string
    yogaId: number
    addedAt?: Date | string
  }

  export type FavoriteYogaSessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteYogaSessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    yogaId?: IntFieldUpdateOperationsInput | number
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteRecipeCreateInput = {
    id?: string
    addedAt?: Date | string
    user: UserCreateNestedOneWithoutFavoriteRecipesInput
    recipe: RecipeCreateNestedOneWithoutFavoriteByInput
  }

  export type FavoriteRecipeUncheckedCreateInput = {
    id?: string
    userId: string
    recipeId: number
    addedAt?: Date | string
  }

  export type FavoriteRecipeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFavoriteRecipesNestedInput
    recipe?: RecipeUpdateOneRequiredWithoutFavoriteByNestedInput
  }

  export type FavoriteRecipeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    recipeId?: IntFieldUpdateOperationsInput | number
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteRecipeCreateManyInput = {
    id?: string
    userId: string
    recipeId: number
    addedAt?: Date | string
  }

  export type FavoriteRecipeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteRecipeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    recipeId?: IntFieldUpdateOperationsInput | number
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WeightHistoryCreateInput = {
    id?: string
    weight: number
    date?: Date | string
    notes?: string | null
    user: UserCreateNestedOneWithoutWeightHistoryInput
  }

  export type WeightHistoryUncheckedCreateInput = {
    id?: string
    userId: string
    weight: number
    date?: Date | string
    notes?: string | null
  }

  export type WeightHistoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutWeightHistoryNestedInput
  }

  export type WeightHistoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WeightHistoryCreateManyInput = {
    id?: string
    userId: string
    weight: number
    date?: Date | string
    notes?: string | null
  }

  export type WeightHistoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WeightHistoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AchievementCreateInput = {
    id?: string
    name: string
    description: string
    category: string
    imageUrl?: string | null
    criteria: JsonNullValueInput | InputJsonValue
    users?: UserAchievementCreateNestedManyWithoutAchievementInput
  }

  export type AchievementUncheckedCreateInput = {
    id?: string
    name: string
    description: string
    category: string
    imageUrl?: string | null
    criteria: JsonNullValueInput | InputJsonValue
    users?: UserAchievementUncheckedCreateNestedManyWithoutAchievementInput
  }

  export type AchievementUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    criteria?: JsonNullValueInput | InputJsonValue
    users?: UserAchievementUpdateManyWithoutAchievementNestedInput
  }

  export type AchievementUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    criteria?: JsonNullValueInput | InputJsonValue
    users?: UserAchievementUncheckedUpdateManyWithoutAchievementNestedInput
  }

  export type AchievementCreateManyInput = {
    id?: string
    name: string
    description: string
    category: string
    imageUrl?: string | null
    criteria: JsonNullValueInput | InputJsonValue
  }

  export type AchievementUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    criteria?: JsonNullValueInput | InputJsonValue
  }

  export type AchievementUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    criteria?: JsonNullValueInput | InputJsonValue
  }

  export type UserAchievementCreateInput = {
    id?: string
    achievedAt?: Date | string
    user: UserCreateNestedOneWithoutAchievementsInput
    achievement: AchievementCreateNestedOneWithoutUsersInput
  }

  export type UserAchievementUncheckedCreateInput = {
    id?: string
    userId: string
    achievementId: string
    achievedAt?: Date | string
  }

  export type UserAchievementUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    achievedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAchievementsNestedInput
    achievement?: AchievementUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserAchievementUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    achievementId?: StringFieldUpdateOperationsInput | string
    achievedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAchievementCreateManyInput = {
    id?: string
    userId: string
    achievementId: string
    achievedAt?: Date | string
  }

  export type UserAchievementUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    achievedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAchievementUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    achievementId?: StringFieldUpdateOperationsInput | string
    achievedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type WorkoutHistoryListRelationFilter = {
    every?: WorkoutHistoryWhereInput
    some?: WorkoutHistoryWhereInput
    none?: WorkoutHistoryWhereInput
  }

  export type FavoriteWorkoutListRelationFilter = {
    every?: FavoriteWorkoutWhereInput
    some?: FavoriteWorkoutWhereInput
    none?: FavoriteWorkoutWhereInput
  }

  export type FavoriteMeditationListRelationFilter = {
    every?: FavoriteMeditationWhereInput
    some?: FavoriteMeditationWhereInput
    none?: FavoriteMeditationWhereInput
  }

  export type FavoriteYogaSessionListRelationFilter = {
    every?: FavoriteYogaSessionWhereInput
    some?: FavoriteYogaSessionWhereInput
    none?: FavoriteYogaSessionWhereInput
  }

  export type FavoriteRecipeListRelationFilter = {
    every?: FavoriteRecipeWhereInput
    some?: FavoriteRecipeWhereInput
    none?: FavoriteRecipeWhereInput
  }

  export type ScheduledEventListRelationFilter = {
    every?: ScheduledEventWhereInput
    some?: ScheduledEventWhereInput
    none?: ScheduledEventWhereInput
  }

  export type WeightHistoryListRelationFilter = {
    every?: WeightHistoryWhereInput
    some?: WeightHistoryWhereInput
    none?: WeightHistoryWhereInput
  }

  export type UserAchievementListRelationFilter = {
    every?: UserAchievementWhereInput
    some?: UserAchievementWhereInput
    none?: UserAchievementWhereInput
  }

  export type UserSettingsNullableRelationFilter = {
    is?: UserSettingsWhereInput | null
    isNot?: UserSettingsWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type WorkoutHistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FavoriteWorkoutOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FavoriteMeditationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FavoriteYogaSessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FavoriteRecipeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ScheduledEventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WeightHistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserAchievementOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    username?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    password?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    height?: SortOrder
    weight?: SortOrder
    goalWeight?: SortOrder
    dateOfBirth?: SortOrder
    gender?: SortOrder
    fitnessLevel?: SortOrder
    memberSince?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    height?: SortOrder
    weight?: SortOrder
    goalWeight?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    username?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    password?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    height?: SortOrder
    weight?: SortOrder
    goalWeight?: SortOrder
    dateOfBirth?: SortOrder
    gender?: SortOrder
    fitnessLevel?: SortOrder
    memberSince?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    username?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    password?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    height?: SortOrder
    weight?: SortOrder
    goalWeight?: SortOrder
    dateOfBirth?: SortOrder
    gender?: SortOrder
    fitnessLevel?: SortOrder
    memberSince?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    height?: SortOrder
    weight?: SortOrder
    goalWeight?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type UserSettingsCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    notificationsEnabled?: SortOrder
    emailNotifications?: SortOrder
    darkMode?: SortOrder
    language?: SortOrder
    measurementUnit?: SortOrder
    privacySettings?: SortOrder
  }

  export type UserSettingsMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    notificationsEnabled?: SortOrder
    emailNotifications?: SortOrder
    darkMode?: SortOrder
    language?: SortOrder
    measurementUnit?: SortOrder
  }

  export type UserSettingsMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    notificationsEnabled?: SortOrder
    emailNotifications?: SortOrder
    darkMode?: SortOrder
    language?: SortOrder
    measurementUnit?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type WorkoutExerciseListRelationFilter = {
    every?: WorkoutExerciseWhereInput
    some?: WorkoutExerciseWhereInput
    none?: WorkoutExerciseWhereInput
  }

  export type WorkoutExerciseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkoutCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    difficulty?: SortOrder
    duration?: SortOrder
    calories?: SortOrder
    muscleGroups?: SortOrder
    imageUrl?: SortOrder
    videoUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
  }

  export type WorkoutAvgOrderByAggregateInput = {
    id?: SortOrder
    duration?: SortOrder
    calories?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
  }

  export type WorkoutMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    difficulty?: SortOrder
    duration?: SortOrder
    calories?: SortOrder
    imageUrl?: SortOrder
    videoUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
  }

  export type WorkoutMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    difficulty?: SortOrder
    duration?: SortOrder
    calories?: SortOrder
    imageUrl?: SortOrder
    videoUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
  }

  export type WorkoutSumOrderByAggregateInput = {
    id?: SortOrder
    duration?: SortOrder
    calories?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type ExerciseCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    instructions?: SortOrder
    muscleGroups?: SortOrder
    equipment?: SortOrder
    difficultyLevel?: SortOrder
    imageUrl?: SortOrder
    videoUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ExerciseAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ExerciseMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    instructions?: SortOrder
    difficultyLevel?: SortOrder
    imageUrl?: SortOrder
    videoUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ExerciseMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    instructions?: SortOrder
    difficultyLevel?: SortOrder
    imageUrl?: SortOrder
    videoUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ExerciseSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type WorkoutRelationFilter = {
    is?: WorkoutWhereInput
    isNot?: WorkoutWhereInput
  }

  export type ExerciseRelationFilter = {
    is?: ExerciseWhereInput
    isNot?: ExerciseWhereInput
  }

  export type WorkoutExerciseWorkoutIdExerciseIdOrderCompoundUniqueInput = {
    workoutId: number
    exerciseId: number
    order: number
  }

  export type WorkoutExerciseCountOrderByAggregateInput = {
    id?: SortOrder
    workoutId?: SortOrder
    exerciseId?: SortOrder
    sets?: SortOrder
    reps?: SortOrder
    weight?: SortOrder
    restTime?: SortOrder
    notes?: SortOrder
    order?: SortOrder
  }

  export type WorkoutExerciseAvgOrderByAggregateInput = {
    id?: SortOrder
    workoutId?: SortOrder
    exerciseId?: SortOrder
    sets?: SortOrder
    weight?: SortOrder
    restTime?: SortOrder
    order?: SortOrder
  }

  export type WorkoutExerciseMaxOrderByAggregateInput = {
    id?: SortOrder
    workoutId?: SortOrder
    exerciseId?: SortOrder
    sets?: SortOrder
    reps?: SortOrder
    weight?: SortOrder
    restTime?: SortOrder
    notes?: SortOrder
    order?: SortOrder
  }

  export type WorkoutExerciseMinOrderByAggregateInput = {
    id?: SortOrder
    workoutId?: SortOrder
    exerciseId?: SortOrder
    sets?: SortOrder
    reps?: SortOrder
    weight?: SortOrder
    restTime?: SortOrder
    notes?: SortOrder
    order?: SortOrder
  }

  export type WorkoutExerciseSumOrderByAggregateInput = {
    id?: SortOrder
    workoutId?: SortOrder
    exerciseId?: SortOrder
    sets?: SortOrder
    weight?: SortOrder
    restTime?: SortOrder
    order?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type MeditationSessionCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    duration?: SortOrder
    level?: SortOrder
    instructor?: SortOrder
    audioUrl?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
  }

  export type MeditationSessionAvgOrderByAggregateInput = {
    id?: SortOrder
    duration?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
  }

  export type MeditationSessionMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    duration?: SortOrder
    level?: SortOrder
    instructor?: SortOrder
    audioUrl?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
  }

  export type MeditationSessionMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    duration?: SortOrder
    level?: SortOrder
    instructor?: SortOrder
    audioUrl?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
  }

  export type MeditationSessionSumOrderByAggregateInput = {
    id?: SortOrder
    duration?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
  }

  export type YogaSessionCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    style?: SortOrder
    duration?: SortOrder
    level?: SortOrder
    instructor?: SortOrder
    benefits?: SortOrder
    videoUrl?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
  }

  export type YogaSessionAvgOrderByAggregateInput = {
    id?: SortOrder
    duration?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
  }

  export type YogaSessionMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    style?: SortOrder
    duration?: SortOrder
    level?: SortOrder
    instructor?: SortOrder
    videoUrl?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
  }

  export type YogaSessionMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    style?: SortOrder
    duration?: SortOrder
    level?: SortOrder
    instructor?: SortOrder
    videoUrl?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
  }

  export type YogaSessionSumOrderByAggregateInput = {
    id?: SortOrder
    duration?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
  }

  export type RecipeIngredientListRelationFilter = {
    every?: RecipeIngredientWhereInput
    some?: RecipeIngredientWhereInput
    none?: RecipeIngredientWhereInput
  }

  export type RecipeInstructionListRelationFilter = {
    every?: RecipeInstructionWhereInput
    some?: RecipeInstructionWhereInput
    none?: RecipeInstructionWhereInput
  }

  export type RecipeIngredientOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RecipeInstructionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RecipeCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    difficulty?: SortOrder
    prepTime?: SortOrder
    cookTime?: SortOrder
    servings?: SortOrder
    calories?: SortOrder
    protein?: SortOrder
    carbs?: SortOrder
    fat?: SortOrder
    tags?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
    author?: SortOrder
  }

  export type RecipeAvgOrderByAggregateInput = {
    id?: SortOrder
    prepTime?: SortOrder
    cookTime?: SortOrder
    servings?: SortOrder
    calories?: SortOrder
    protein?: SortOrder
    carbs?: SortOrder
    fat?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
  }

  export type RecipeMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    difficulty?: SortOrder
    prepTime?: SortOrder
    cookTime?: SortOrder
    servings?: SortOrder
    calories?: SortOrder
    protein?: SortOrder
    carbs?: SortOrder
    fat?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
    author?: SortOrder
  }

  export type RecipeMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    difficulty?: SortOrder
    prepTime?: SortOrder
    cookTime?: SortOrder
    servings?: SortOrder
    calories?: SortOrder
    protein?: SortOrder
    carbs?: SortOrder
    fat?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
    author?: SortOrder
  }

  export type RecipeSumOrderByAggregateInput = {
    id?: SortOrder
    prepTime?: SortOrder
    cookTime?: SortOrder
    servings?: SortOrder
    calories?: SortOrder
    protein?: SortOrder
    carbs?: SortOrder
    fat?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
  }

  export type IngredientCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    calories?: SortOrder
    protein?: SortOrder
    carbs?: SortOrder
    fat?: SortOrder
  }

  export type IngredientAvgOrderByAggregateInput = {
    id?: SortOrder
    calories?: SortOrder
    protein?: SortOrder
    carbs?: SortOrder
    fat?: SortOrder
  }

  export type IngredientMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    calories?: SortOrder
    protein?: SortOrder
    carbs?: SortOrder
    fat?: SortOrder
  }

  export type IngredientMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    calories?: SortOrder
    protein?: SortOrder
    carbs?: SortOrder
    fat?: SortOrder
  }

  export type IngredientSumOrderByAggregateInput = {
    id?: SortOrder
    calories?: SortOrder
    protein?: SortOrder
    carbs?: SortOrder
    fat?: SortOrder
  }

  export type RecipeRelationFilter = {
    is?: RecipeWhereInput
    isNot?: RecipeWhereInput
  }

  export type IngredientRelationFilter = {
    is?: IngredientWhereInput
    isNot?: IngredientWhereInput
  }

  export type RecipeIngredientRecipeIdIngredientIdCompoundUniqueInput = {
    recipeId: number
    ingredientId: number
  }

  export type RecipeIngredientCountOrderByAggregateInput = {
    id?: SortOrder
    recipeId?: SortOrder
    ingredientId?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
  }

  export type RecipeIngredientAvgOrderByAggregateInput = {
    id?: SortOrder
    recipeId?: SortOrder
    ingredientId?: SortOrder
  }

  export type RecipeIngredientMaxOrderByAggregateInput = {
    id?: SortOrder
    recipeId?: SortOrder
    ingredientId?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
  }

  export type RecipeIngredientMinOrderByAggregateInput = {
    id?: SortOrder
    recipeId?: SortOrder
    ingredientId?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
  }

  export type RecipeIngredientSumOrderByAggregateInput = {
    id?: SortOrder
    recipeId?: SortOrder
    ingredientId?: SortOrder
  }

  export type RecipeInstructionRecipeIdStepNumberCompoundUniqueInput = {
    recipeId: number
    stepNumber: number
  }

  export type RecipeInstructionCountOrderByAggregateInput = {
    id?: SortOrder
    recipeId?: SortOrder
    stepNumber?: SortOrder
    instruction?: SortOrder
  }

  export type RecipeInstructionAvgOrderByAggregateInput = {
    id?: SortOrder
    recipeId?: SortOrder
    stepNumber?: SortOrder
  }

  export type RecipeInstructionMaxOrderByAggregateInput = {
    id?: SortOrder
    recipeId?: SortOrder
    stepNumber?: SortOrder
    instruction?: SortOrder
  }

  export type RecipeInstructionMinOrderByAggregateInput = {
    id?: SortOrder
    recipeId?: SortOrder
    stepNumber?: SortOrder
    instruction?: SortOrder
  }

  export type RecipeInstructionSumOrderByAggregateInput = {
    id?: SortOrder
    recipeId?: SortOrder
    stepNumber?: SortOrder
  }

  export type BlogPostCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    excerpt?: SortOrder
    category?: SortOrder
    tags?: SortOrder
    imageUrl?: SortOrder
    author?: SortOrder
    published?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    publishedAt?: SortOrder
  }

  export type BlogPostAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BlogPostMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    excerpt?: SortOrder
    category?: SortOrder
    imageUrl?: SortOrder
    author?: SortOrder
    published?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    publishedAt?: SortOrder
  }

  export type BlogPostMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    excerpt?: SortOrder
    category?: SortOrder
    imageUrl?: SortOrder
    author?: SortOrder
    published?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    publishedAt?: SortOrder
  }

  export type BlogPostSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type WorkoutNullableRelationFilter = {
    is?: WorkoutWhereInput | null
    isNot?: WorkoutWhereInput | null
  }

  export type MeditationSessionNullableRelationFilter = {
    is?: MeditationSessionWhereInput | null
    isNot?: MeditationSessionWhereInput | null
  }

  export type YogaSessionNullableRelationFilter = {
    is?: YogaSessionWhereInput | null
    isNot?: YogaSessionWhereInput | null
  }

  export type ScheduledEventCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    date?: SortOrder
    time?: SortOrder
    duration?: SortOrder
    eventType?: SortOrder
    completed?: SortOrder
    notes?: SortOrder
    workoutId?: SortOrder
    meditationId?: SortOrder
    yogaId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScheduledEventAvgOrderByAggregateInput = {
    duration?: SortOrder
    workoutId?: SortOrder
    meditationId?: SortOrder
    yogaId?: SortOrder
  }

  export type ScheduledEventMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    date?: SortOrder
    time?: SortOrder
    duration?: SortOrder
    eventType?: SortOrder
    completed?: SortOrder
    notes?: SortOrder
    workoutId?: SortOrder
    meditationId?: SortOrder
    yogaId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScheduledEventMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    date?: SortOrder
    time?: SortOrder
    duration?: SortOrder
    eventType?: SortOrder
    completed?: SortOrder
    notes?: SortOrder
    workoutId?: SortOrder
    meditationId?: SortOrder
    yogaId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScheduledEventSumOrderByAggregateInput = {
    duration?: SortOrder
    workoutId?: SortOrder
    meditationId?: SortOrder
    yogaId?: SortOrder
  }

  export type WorkoutHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    workoutId?: SortOrder
    completedAt?: SortOrder
    duration?: SortOrder
    notes?: SortOrder
    rating?: SortOrder
    exerciseResults?: SortOrder
  }

  export type WorkoutHistoryAvgOrderByAggregateInput = {
    workoutId?: SortOrder
    duration?: SortOrder
    rating?: SortOrder
  }

  export type WorkoutHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    workoutId?: SortOrder
    completedAt?: SortOrder
    duration?: SortOrder
    notes?: SortOrder
    rating?: SortOrder
  }

  export type WorkoutHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    workoutId?: SortOrder
    completedAt?: SortOrder
    duration?: SortOrder
    notes?: SortOrder
    rating?: SortOrder
  }

  export type WorkoutHistorySumOrderByAggregateInput = {
    workoutId?: SortOrder
    duration?: SortOrder
    rating?: SortOrder
  }

  export type FavoriteWorkoutUserIdWorkoutIdCompoundUniqueInput = {
    userId: string
    workoutId: number
  }

  export type FavoriteWorkoutCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    workoutId?: SortOrder
    addedAt?: SortOrder
  }

  export type FavoriteWorkoutAvgOrderByAggregateInput = {
    workoutId?: SortOrder
  }

  export type FavoriteWorkoutMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    workoutId?: SortOrder
    addedAt?: SortOrder
  }

  export type FavoriteWorkoutMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    workoutId?: SortOrder
    addedAt?: SortOrder
  }

  export type FavoriteWorkoutSumOrderByAggregateInput = {
    workoutId?: SortOrder
  }

  export type MeditationSessionRelationFilter = {
    is?: MeditationSessionWhereInput
    isNot?: MeditationSessionWhereInput
  }

  export type FavoriteMeditationUserIdMeditationIdCompoundUniqueInput = {
    userId: string
    meditationId: number
  }

  export type FavoriteMeditationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    meditationId?: SortOrder
    addedAt?: SortOrder
  }

  export type FavoriteMeditationAvgOrderByAggregateInput = {
    meditationId?: SortOrder
  }

  export type FavoriteMeditationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    meditationId?: SortOrder
    addedAt?: SortOrder
  }

  export type FavoriteMeditationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    meditationId?: SortOrder
    addedAt?: SortOrder
  }

  export type FavoriteMeditationSumOrderByAggregateInput = {
    meditationId?: SortOrder
  }

  export type YogaSessionRelationFilter = {
    is?: YogaSessionWhereInput
    isNot?: YogaSessionWhereInput
  }

  export type FavoriteYogaSessionUserIdYogaIdCompoundUniqueInput = {
    userId: string
    yogaId: number
  }

  export type FavoriteYogaSessionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    yogaId?: SortOrder
    addedAt?: SortOrder
  }

  export type FavoriteYogaSessionAvgOrderByAggregateInput = {
    yogaId?: SortOrder
  }

  export type FavoriteYogaSessionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    yogaId?: SortOrder
    addedAt?: SortOrder
  }

  export type FavoriteYogaSessionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    yogaId?: SortOrder
    addedAt?: SortOrder
  }

  export type FavoriteYogaSessionSumOrderByAggregateInput = {
    yogaId?: SortOrder
  }

  export type FavoriteRecipeUserIdRecipeIdCompoundUniqueInput = {
    userId: string
    recipeId: number
  }

  export type FavoriteRecipeCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    recipeId?: SortOrder
    addedAt?: SortOrder
  }

  export type FavoriteRecipeAvgOrderByAggregateInput = {
    recipeId?: SortOrder
  }

  export type FavoriteRecipeMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    recipeId?: SortOrder
    addedAt?: SortOrder
  }

  export type FavoriteRecipeMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    recipeId?: SortOrder
    addedAt?: SortOrder
  }

  export type FavoriteRecipeSumOrderByAggregateInput = {
    recipeId?: SortOrder
  }

  export type WeightHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    weight?: SortOrder
    date?: SortOrder
    notes?: SortOrder
  }

  export type WeightHistoryAvgOrderByAggregateInput = {
    weight?: SortOrder
  }

  export type WeightHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    weight?: SortOrder
    date?: SortOrder
    notes?: SortOrder
  }

  export type WeightHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    weight?: SortOrder
    date?: SortOrder
    notes?: SortOrder
  }

  export type WeightHistorySumOrderByAggregateInput = {
    weight?: SortOrder
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type AchievementCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    imageUrl?: SortOrder
    criteria?: SortOrder
  }

  export type AchievementMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    imageUrl?: SortOrder
  }

  export type AchievementMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    imageUrl?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type AchievementRelationFilter = {
    is?: AchievementWhereInput
    isNot?: AchievementWhereInput
  }

  export type UserAchievementUserIdAchievementIdCompoundUniqueInput = {
    userId: string
    achievementId: string
  }

  export type UserAchievementCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    achievementId?: SortOrder
    achievedAt?: SortOrder
  }

  export type UserAchievementMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    achievementId?: SortOrder
    achievedAt?: SortOrder
  }

  export type UserAchievementMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    achievementId?: SortOrder
    achievedAt?: SortOrder
  }

  export type WorkoutHistoryCreateNestedManyWithoutUserInput = {
    create?: XOR<WorkoutHistoryCreateWithoutUserInput, WorkoutHistoryUncheckedCreateWithoutUserInput> | WorkoutHistoryCreateWithoutUserInput[] | WorkoutHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkoutHistoryCreateOrConnectWithoutUserInput | WorkoutHistoryCreateOrConnectWithoutUserInput[]
    createMany?: WorkoutHistoryCreateManyUserInputEnvelope
    connect?: WorkoutHistoryWhereUniqueInput | WorkoutHistoryWhereUniqueInput[]
  }

  export type FavoriteWorkoutCreateNestedManyWithoutUserInput = {
    create?: XOR<FavoriteWorkoutCreateWithoutUserInput, FavoriteWorkoutUncheckedCreateWithoutUserInput> | FavoriteWorkoutCreateWithoutUserInput[] | FavoriteWorkoutUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteWorkoutCreateOrConnectWithoutUserInput | FavoriteWorkoutCreateOrConnectWithoutUserInput[]
    createMany?: FavoriteWorkoutCreateManyUserInputEnvelope
    connect?: FavoriteWorkoutWhereUniqueInput | FavoriteWorkoutWhereUniqueInput[]
  }

  export type FavoriteMeditationCreateNestedManyWithoutUserInput = {
    create?: XOR<FavoriteMeditationCreateWithoutUserInput, FavoriteMeditationUncheckedCreateWithoutUserInput> | FavoriteMeditationCreateWithoutUserInput[] | FavoriteMeditationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteMeditationCreateOrConnectWithoutUserInput | FavoriteMeditationCreateOrConnectWithoutUserInput[]
    createMany?: FavoriteMeditationCreateManyUserInputEnvelope
    connect?: FavoriteMeditationWhereUniqueInput | FavoriteMeditationWhereUniqueInput[]
  }

  export type FavoriteYogaSessionCreateNestedManyWithoutUserInput = {
    create?: XOR<FavoriteYogaSessionCreateWithoutUserInput, FavoriteYogaSessionUncheckedCreateWithoutUserInput> | FavoriteYogaSessionCreateWithoutUserInput[] | FavoriteYogaSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteYogaSessionCreateOrConnectWithoutUserInput | FavoriteYogaSessionCreateOrConnectWithoutUserInput[]
    createMany?: FavoriteYogaSessionCreateManyUserInputEnvelope
    connect?: FavoriteYogaSessionWhereUniqueInput | FavoriteYogaSessionWhereUniqueInput[]
  }

  export type FavoriteRecipeCreateNestedManyWithoutUserInput = {
    create?: XOR<FavoriteRecipeCreateWithoutUserInput, FavoriteRecipeUncheckedCreateWithoutUserInput> | FavoriteRecipeCreateWithoutUserInput[] | FavoriteRecipeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteRecipeCreateOrConnectWithoutUserInput | FavoriteRecipeCreateOrConnectWithoutUserInput[]
    createMany?: FavoriteRecipeCreateManyUserInputEnvelope
    connect?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
  }

  export type ScheduledEventCreateNestedManyWithoutUserInput = {
    create?: XOR<ScheduledEventCreateWithoutUserInput, ScheduledEventUncheckedCreateWithoutUserInput> | ScheduledEventCreateWithoutUserInput[] | ScheduledEventUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ScheduledEventCreateOrConnectWithoutUserInput | ScheduledEventCreateOrConnectWithoutUserInput[]
    createMany?: ScheduledEventCreateManyUserInputEnvelope
    connect?: ScheduledEventWhereUniqueInput | ScheduledEventWhereUniqueInput[]
  }

  export type WeightHistoryCreateNestedManyWithoutUserInput = {
    create?: XOR<WeightHistoryCreateWithoutUserInput, WeightHistoryUncheckedCreateWithoutUserInput> | WeightHistoryCreateWithoutUserInput[] | WeightHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WeightHistoryCreateOrConnectWithoutUserInput | WeightHistoryCreateOrConnectWithoutUserInput[]
    createMany?: WeightHistoryCreateManyUserInputEnvelope
    connect?: WeightHistoryWhereUniqueInput | WeightHistoryWhereUniqueInput[]
  }

  export type UserAchievementCreateNestedManyWithoutUserInput = {
    create?: XOR<UserAchievementCreateWithoutUserInput, UserAchievementUncheckedCreateWithoutUserInput> | UserAchievementCreateWithoutUserInput[] | UserAchievementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserAchievementCreateOrConnectWithoutUserInput | UserAchievementCreateOrConnectWithoutUserInput[]
    createMany?: UserAchievementCreateManyUserInputEnvelope
    connect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
  }

  export type UserSettingsCreateNestedOneWithoutUserInput = {
    create?: XOR<UserSettingsCreateWithoutUserInput, UserSettingsUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserSettingsCreateOrConnectWithoutUserInput
    connect?: UserSettingsWhereUniqueInput
  }

  export type WorkoutHistoryUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<WorkoutHistoryCreateWithoutUserInput, WorkoutHistoryUncheckedCreateWithoutUserInput> | WorkoutHistoryCreateWithoutUserInput[] | WorkoutHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkoutHistoryCreateOrConnectWithoutUserInput | WorkoutHistoryCreateOrConnectWithoutUserInput[]
    createMany?: WorkoutHistoryCreateManyUserInputEnvelope
    connect?: WorkoutHistoryWhereUniqueInput | WorkoutHistoryWhereUniqueInput[]
  }

  export type FavoriteWorkoutUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FavoriteWorkoutCreateWithoutUserInput, FavoriteWorkoutUncheckedCreateWithoutUserInput> | FavoriteWorkoutCreateWithoutUserInput[] | FavoriteWorkoutUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteWorkoutCreateOrConnectWithoutUserInput | FavoriteWorkoutCreateOrConnectWithoutUserInput[]
    createMany?: FavoriteWorkoutCreateManyUserInputEnvelope
    connect?: FavoriteWorkoutWhereUniqueInput | FavoriteWorkoutWhereUniqueInput[]
  }

  export type FavoriteMeditationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FavoriteMeditationCreateWithoutUserInput, FavoriteMeditationUncheckedCreateWithoutUserInput> | FavoriteMeditationCreateWithoutUserInput[] | FavoriteMeditationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteMeditationCreateOrConnectWithoutUserInput | FavoriteMeditationCreateOrConnectWithoutUserInput[]
    createMany?: FavoriteMeditationCreateManyUserInputEnvelope
    connect?: FavoriteMeditationWhereUniqueInput | FavoriteMeditationWhereUniqueInput[]
  }

  export type FavoriteYogaSessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FavoriteYogaSessionCreateWithoutUserInput, FavoriteYogaSessionUncheckedCreateWithoutUserInput> | FavoriteYogaSessionCreateWithoutUserInput[] | FavoriteYogaSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteYogaSessionCreateOrConnectWithoutUserInput | FavoriteYogaSessionCreateOrConnectWithoutUserInput[]
    createMany?: FavoriteYogaSessionCreateManyUserInputEnvelope
    connect?: FavoriteYogaSessionWhereUniqueInput | FavoriteYogaSessionWhereUniqueInput[]
  }

  export type FavoriteRecipeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FavoriteRecipeCreateWithoutUserInput, FavoriteRecipeUncheckedCreateWithoutUserInput> | FavoriteRecipeCreateWithoutUserInput[] | FavoriteRecipeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteRecipeCreateOrConnectWithoutUserInput | FavoriteRecipeCreateOrConnectWithoutUserInput[]
    createMany?: FavoriteRecipeCreateManyUserInputEnvelope
    connect?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
  }

  export type ScheduledEventUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ScheduledEventCreateWithoutUserInput, ScheduledEventUncheckedCreateWithoutUserInput> | ScheduledEventCreateWithoutUserInput[] | ScheduledEventUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ScheduledEventCreateOrConnectWithoutUserInput | ScheduledEventCreateOrConnectWithoutUserInput[]
    createMany?: ScheduledEventCreateManyUserInputEnvelope
    connect?: ScheduledEventWhereUniqueInput | ScheduledEventWhereUniqueInput[]
  }

  export type WeightHistoryUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<WeightHistoryCreateWithoutUserInput, WeightHistoryUncheckedCreateWithoutUserInput> | WeightHistoryCreateWithoutUserInput[] | WeightHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WeightHistoryCreateOrConnectWithoutUserInput | WeightHistoryCreateOrConnectWithoutUserInput[]
    createMany?: WeightHistoryCreateManyUserInputEnvelope
    connect?: WeightHistoryWhereUniqueInput | WeightHistoryWhereUniqueInput[]
  }

  export type UserAchievementUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserAchievementCreateWithoutUserInput, UserAchievementUncheckedCreateWithoutUserInput> | UserAchievementCreateWithoutUserInput[] | UserAchievementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserAchievementCreateOrConnectWithoutUserInput | UserAchievementCreateOrConnectWithoutUserInput[]
    createMany?: UserAchievementCreateManyUserInputEnvelope
    connect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
  }

  export type UserSettingsUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<UserSettingsCreateWithoutUserInput, UserSettingsUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserSettingsCreateOrConnectWithoutUserInput
    connect?: UserSettingsWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type WorkoutHistoryUpdateManyWithoutUserNestedInput = {
    create?: XOR<WorkoutHistoryCreateWithoutUserInput, WorkoutHistoryUncheckedCreateWithoutUserInput> | WorkoutHistoryCreateWithoutUserInput[] | WorkoutHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkoutHistoryCreateOrConnectWithoutUserInput | WorkoutHistoryCreateOrConnectWithoutUserInput[]
    upsert?: WorkoutHistoryUpsertWithWhereUniqueWithoutUserInput | WorkoutHistoryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WorkoutHistoryCreateManyUserInputEnvelope
    set?: WorkoutHistoryWhereUniqueInput | WorkoutHistoryWhereUniqueInput[]
    disconnect?: WorkoutHistoryWhereUniqueInput | WorkoutHistoryWhereUniqueInput[]
    delete?: WorkoutHistoryWhereUniqueInput | WorkoutHistoryWhereUniqueInput[]
    connect?: WorkoutHistoryWhereUniqueInput | WorkoutHistoryWhereUniqueInput[]
    update?: WorkoutHistoryUpdateWithWhereUniqueWithoutUserInput | WorkoutHistoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WorkoutHistoryUpdateManyWithWhereWithoutUserInput | WorkoutHistoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WorkoutHistoryScalarWhereInput | WorkoutHistoryScalarWhereInput[]
  }

  export type FavoriteWorkoutUpdateManyWithoutUserNestedInput = {
    create?: XOR<FavoriteWorkoutCreateWithoutUserInput, FavoriteWorkoutUncheckedCreateWithoutUserInput> | FavoriteWorkoutCreateWithoutUserInput[] | FavoriteWorkoutUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteWorkoutCreateOrConnectWithoutUserInput | FavoriteWorkoutCreateOrConnectWithoutUserInput[]
    upsert?: FavoriteWorkoutUpsertWithWhereUniqueWithoutUserInput | FavoriteWorkoutUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FavoriteWorkoutCreateManyUserInputEnvelope
    set?: FavoriteWorkoutWhereUniqueInput | FavoriteWorkoutWhereUniqueInput[]
    disconnect?: FavoriteWorkoutWhereUniqueInput | FavoriteWorkoutWhereUniqueInput[]
    delete?: FavoriteWorkoutWhereUniqueInput | FavoriteWorkoutWhereUniqueInput[]
    connect?: FavoriteWorkoutWhereUniqueInput | FavoriteWorkoutWhereUniqueInput[]
    update?: FavoriteWorkoutUpdateWithWhereUniqueWithoutUserInput | FavoriteWorkoutUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FavoriteWorkoutUpdateManyWithWhereWithoutUserInput | FavoriteWorkoutUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FavoriteWorkoutScalarWhereInput | FavoriteWorkoutScalarWhereInput[]
  }

  export type FavoriteMeditationUpdateManyWithoutUserNestedInput = {
    create?: XOR<FavoriteMeditationCreateWithoutUserInput, FavoriteMeditationUncheckedCreateWithoutUserInput> | FavoriteMeditationCreateWithoutUserInput[] | FavoriteMeditationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteMeditationCreateOrConnectWithoutUserInput | FavoriteMeditationCreateOrConnectWithoutUserInput[]
    upsert?: FavoriteMeditationUpsertWithWhereUniqueWithoutUserInput | FavoriteMeditationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FavoriteMeditationCreateManyUserInputEnvelope
    set?: FavoriteMeditationWhereUniqueInput | FavoriteMeditationWhereUniqueInput[]
    disconnect?: FavoriteMeditationWhereUniqueInput | FavoriteMeditationWhereUniqueInput[]
    delete?: FavoriteMeditationWhereUniqueInput | FavoriteMeditationWhereUniqueInput[]
    connect?: FavoriteMeditationWhereUniqueInput | FavoriteMeditationWhereUniqueInput[]
    update?: FavoriteMeditationUpdateWithWhereUniqueWithoutUserInput | FavoriteMeditationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FavoriteMeditationUpdateManyWithWhereWithoutUserInput | FavoriteMeditationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FavoriteMeditationScalarWhereInput | FavoriteMeditationScalarWhereInput[]
  }

  export type FavoriteYogaSessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<FavoriteYogaSessionCreateWithoutUserInput, FavoriteYogaSessionUncheckedCreateWithoutUserInput> | FavoriteYogaSessionCreateWithoutUserInput[] | FavoriteYogaSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteYogaSessionCreateOrConnectWithoutUserInput | FavoriteYogaSessionCreateOrConnectWithoutUserInput[]
    upsert?: FavoriteYogaSessionUpsertWithWhereUniqueWithoutUserInput | FavoriteYogaSessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FavoriteYogaSessionCreateManyUserInputEnvelope
    set?: FavoriteYogaSessionWhereUniqueInput | FavoriteYogaSessionWhereUniqueInput[]
    disconnect?: FavoriteYogaSessionWhereUniqueInput | FavoriteYogaSessionWhereUniqueInput[]
    delete?: FavoriteYogaSessionWhereUniqueInput | FavoriteYogaSessionWhereUniqueInput[]
    connect?: FavoriteYogaSessionWhereUniqueInput | FavoriteYogaSessionWhereUniqueInput[]
    update?: FavoriteYogaSessionUpdateWithWhereUniqueWithoutUserInput | FavoriteYogaSessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FavoriteYogaSessionUpdateManyWithWhereWithoutUserInput | FavoriteYogaSessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FavoriteYogaSessionScalarWhereInput | FavoriteYogaSessionScalarWhereInput[]
  }

  export type FavoriteRecipeUpdateManyWithoutUserNestedInput = {
    create?: XOR<FavoriteRecipeCreateWithoutUserInput, FavoriteRecipeUncheckedCreateWithoutUserInput> | FavoriteRecipeCreateWithoutUserInput[] | FavoriteRecipeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteRecipeCreateOrConnectWithoutUserInput | FavoriteRecipeCreateOrConnectWithoutUserInput[]
    upsert?: FavoriteRecipeUpsertWithWhereUniqueWithoutUserInput | FavoriteRecipeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FavoriteRecipeCreateManyUserInputEnvelope
    set?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
    disconnect?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
    delete?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
    connect?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
    update?: FavoriteRecipeUpdateWithWhereUniqueWithoutUserInput | FavoriteRecipeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FavoriteRecipeUpdateManyWithWhereWithoutUserInput | FavoriteRecipeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FavoriteRecipeScalarWhereInput | FavoriteRecipeScalarWhereInput[]
  }

  export type ScheduledEventUpdateManyWithoutUserNestedInput = {
    create?: XOR<ScheduledEventCreateWithoutUserInput, ScheduledEventUncheckedCreateWithoutUserInput> | ScheduledEventCreateWithoutUserInput[] | ScheduledEventUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ScheduledEventCreateOrConnectWithoutUserInput | ScheduledEventCreateOrConnectWithoutUserInput[]
    upsert?: ScheduledEventUpsertWithWhereUniqueWithoutUserInput | ScheduledEventUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ScheduledEventCreateManyUserInputEnvelope
    set?: ScheduledEventWhereUniqueInput | ScheduledEventWhereUniqueInput[]
    disconnect?: ScheduledEventWhereUniqueInput | ScheduledEventWhereUniqueInput[]
    delete?: ScheduledEventWhereUniqueInput | ScheduledEventWhereUniqueInput[]
    connect?: ScheduledEventWhereUniqueInput | ScheduledEventWhereUniqueInput[]
    update?: ScheduledEventUpdateWithWhereUniqueWithoutUserInput | ScheduledEventUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ScheduledEventUpdateManyWithWhereWithoutUserInput | ScheduledEventUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ScheduledEventScalarWhereInput | ScheduledEventScalarWhereInput[]
  }

  export type WeightHistoryUpdateManyWithoutUserNestedInput = {
    create?: XOR<WeightHistoryCreateWithoutUserInput, WeightHistoryUncheckedCreateWithoutUserInput> | WeightHistoryCreateWithoutUserInput[] | WeightHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WeightHistoryCreateOrConnectWithoutUserInput | WeightHistoryCreateOrConnectWithoutUserInput[]
    upsert?: WeightHistoryUpsertWithWhereUniqueWithoutUserInput | WeightHistoryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WeightHistoryCreateManyUserInputEnvelope
    set?: WeightHistoryWhereUniqueInput | WeightHistoryWhereUniqueInput[]
    disconnect?: WeightHistoryWhereUniqueInput | WeightHistoryWhereUniqueInput[]
    delete?: WeightHistoryWhereUniqueInput | WeightHistoryWhereUniqueInput[]
    connect?: WeightHistoryWhereUniqueInput | WeightHistoryWhereUniqueInput[]
    update?: WeightHistoryUpdateWithWhereUniqueWithoutUserInput | WeightHistoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WeightHistoryUpdateManyWithWhereWithoutUserInput | WeightHistoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WeightHistoryScalarWhereInput | WeightHistoryScalarWhereInput[]
  }

  export type UserAchievementUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserAchievementCreateWithoutUserInput, UserAchievementUncheckedCreateWithoutUserInput> | UserAchievementCreateWithoutUserInput[] | UserAchievementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserAchievementCreateOrConnectWithoutUserInput | UserAchievementCreateOrConnectWithoutUserInput[]
    upsert?: UserAchievementUpsertWithWhereUniqueWithoutUserInput | UserAchievementUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserAchievementCreateManyUserInputEnvelope
    set?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    disconnect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    delete?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    connect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    update?: UserAchievementUpdateWithWhereUniqueWithoutUserInput | UserAchievementUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserAchievementUpdateManyWithWhereWithoutUserInput | UserAchievementUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserAchievementScalarWhereInput | UserAchievementScalarWhereInput[]
  }

  export type UserSettingsUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserSettingsCreateWithoutUserInput, UserSettingsUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserSettingsCreateOrConnectWithoutUserInput
    upsert?: UserSettingsUpsertWithoutUserInput
    disconnect?: UserSettingsWhereInput | boolean
    delete?: UserSettingsWhereInput | boolean
    connect?: UserSettingsWhereUniqueInput
    update?: XOR<XOR<UserSettingsUpdateToOneWithWhereWithoutUserInput, UserSettingsUpdateWithoutUserInput>, UserSettingsUncheckedUpdateWithoutUserInput>
  }

  export type WorkoutHistoryUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<WorkoutHistoryCreateWithoutUserInput, WorkoutHistoryUncheckedCreateWithoutUserInput> | WorkoutHistoryCreateWithoutUserInput[] | WorkoutHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkoutHistoryCreateOrConnectWithoutUserInput | WorkoutHistoryCreateOrConnectWithoutUserInput[]
    upsert?: WorkoutHistoryUpsertWithWhereUniqueWithoutUserInput | WorkoutHistoryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WorkoutHistoryCreateManyUserInputEnvelope
    set?: WorkoutHistoryWhereUniqueInput | WorkoutHistoryWhereUniqueInput[]
    disconnect?: WorkoutHistoryWhereUniqueInput | WorkoutHistoryWhereUniqueInput[]
    delete?: WorkoutHistoryWhereUniqueInput | WorkoutHistoryWhereUniqueInput[]
    connect?: WorkoutHistoryWhereUniqueInput | WorkoutHistoryWhereUniqueInput[]
    update?: WorkoutHistoryUpdateWithWhereUniqueWithoutUserInput | WorkoutHistoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WorkoutHistoryUpdateManyWithWhereWithoutUserInput | WorkoutHistoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WorkoutHistoryScalarWhereInput | WorkoutHistoryScalarWhereInput[]
  }

  export type FavoriteWorkoutUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FavoriteWorkoutCreateWithoutUserInput, FavoriteWorkoutUncheckedCreateWithoutUserInput> | FavoriteWorkoutCreateWithoutUserInput[] | FavoriteWorkoutUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteWorkoutCreateOrConnectWithoutUserInput | FavoriteWorkoutCreateOrConnectWithoutUserInput[]
    upsert?: FavoriteWorkoutUpsertWithWhereUniqueWithoutUserInput | FavoriteWorkoutUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FavoriteWorkoutCreateManyUserInputEnvelope
    set?: FavoriteWorkoutWhereUniqueInput | FavoriteWorkoutWhereUniqueInput[]
    disconnect?: FavoriteWorkoutWhereUniqueInput | FavoriteWorkoutWhereUniqueInput[]
    delete?: FavoriteWorkoutWhereUniqueInput | FavoriteWorkoutWhereUniqueInput[]
    connect?: FavoriteWorkoutWhereUniqueInput | FavoriteWorkoutWhereUniqueInput[]
    update?: FavoriteWorkoutUpdateWithWhereUniqueWithoutUserInput | FavoriteWorkoutUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FavoriteWorkoutUpdateManyWithWhereWithoutUserInput | FavoriteWorkoutUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FavoriteWorkoutScalarWhereInput | FavoriteWorkoutScalarWhereInput[]
  }

  export type FavoriteMeditationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FavoriteMeditationCreateWithoutUserInput, FavoriteMeditationUncheckedCreateWithoutUserInput> | FavoriteMeditationCreateWithoutUserInput[] | FavoriteMeditationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteMeditationCreateOrConnectWithoutUserInput | FavoriteMeditationCreateOrConnectWithoutUserInput[]
    upsert?: FavoriteMeditationUpsertWithWhereUniqueWithoutUserInput | FavoriteMeditationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FavoriteMeditationCreateManyUserInputEnvelope
    set?: FavoriteMeditationWhereUniqueInput | FavoriteMeditationWhereUniqueInput[]
    disconnect?: FavoriteMeditationWhereUniqueInput | FavoriteMeditationWhereUniqueInput[]
    delete?: FavoriteMeditationWhereUniqueInput | FavoriteMeditationWhereUniqueInput[]
    connect?: FavoriteMeditationWhereUniqueInput | FavoriteMeditationWhereUniqueInput[]
    update?: FavoriteMeditationUpdateWithWhereUniqueWithoutUserInput | FavoriteMeditationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FavoriteMeditationUpdateManyWithWhereWithoutUserInput | FavoriteMeditationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FavoriteMeditationScalarWhereInput | FavoriteMeditationScalarWhereInput[]
  }

  export type FavoriteYogaSessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FavoriteYogaSessionCreateWithoutUserInput, FavoriteYogaSessionUncheckedCreateWithoutUserInput> | FavoriteYogaSessionCreateWithoutUserInput[] | FavoriteYogaSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteYogaSessionCreateOrConnectWithoutUserInput | FavoriteYogaSessionCreateOrConnectWithoutUserInput[]
    upsert?: FavoriteYogaSessionUpsertWithWhereUniqueWithoutUserInput | FavoriteYogaSessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FavoriteYogaSessionCreateManyUserInputEnvelope
    set?: FavoriteYogaSessionWhereUniqueInput | FavoriteYogaSessionWhereUniqueInput[]
    disconnect?: FavoriteYogaSessionWhereUniqueInput | FavoriteYogaSessionWhereUniqueInput[]
    delete?: FavoriteYogaSessionWhereUniqueInput | FavoriteYogaSessionWhereUniqueInput[]
    connect?: FavoriteYogaSessionWhereUniqueInput | FavoriteYogaSessionWhereUniqueInput[]
    update?: FavoriteYogaSessionUpdateWithWhereUniqueWithoutUserInput | FavoriteYogaSessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FavoriteYogaSessionUpdateManyWithWhereWithoutUserInput | FavoriteYogaSessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FavoriteYogaSessionScalarWhereInput | FavoriteYogaSessionScalarWhereInput[]
  }

  export type FavoriteRecipeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FavoriteRecipeCreateWithoutUserInput, FavoriteRecipeUncheckedCreateWithoutUserInput> | FavoriteRecipeCreateWithoutUserInput[] | FavoriteRecipeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteRecipeCreateOrConnectWithoutUserInput | FavoriteRecipeCreateOrConnectWithoutUserInput[]
    upsert?: FavoriteRecipeUpsertWithWhereUniqueWithoutUserInput | FavoriteRecipeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FavoriteRecipeCreateManyUserInputEnvelope
    set?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
    disconnect?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
    delete?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
    connect?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
    update?: FavoriteRecipeUpdateWithWhereUniqueWithoutUserInput | FavoriteRecipeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FavoriteRecipeUpdateManyWithWhereWithoutUserInput | FavoriteRecipeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FavoriteRecipeScalarWhereInput | FavoriteRecipeScalarWhereInput[]
  }

  export type ScheduledEventUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ScheduledEventCreateWithoutUserInput, ScheduledEventUncheckedCreateWithoutUserInput> | ScheduledEventCreateWithoutUserInput[] | ScheduledEventUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ScheduledEventCreateOrConnectWithoutUserInput | ScheduledEventCreateOrConnectWithoutUserInput[]
    upsert?: ScheduledEventUpsertWithWhereUniqueWithoutUserInput | ScheduledEventUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ScheduledEventCreateManyUserInputEnvelope
    set?: ScheduledEventWhereUniqueInput | ScheduledEventWhereUniqueInput[]
    disconnect?: ScheduledEventWhereUniqueInput | ScheduledEventWhereUniqueInput[]
    delete?: ScheduledEventWhereUniqueInput | ScheduledEventWhereUniqueInput[]
    connect?: ScheduledEventWhereUniqueInput | ScheduledEventWhereUniqueInput[]
    update?: ScheduledEventUpdateWithWhereUniqueWithoutUserInput | ScheduledEventUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ScheduledEventUpdateManyWithWhereWithoutUserInput | ScheduledEventUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ScheduledEventScalarWhereInput | ScheduledEventScalarWhereInput[]
  }

  export type WeightHistoryUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<WeightHistoryCreateWithoutUserInput, WeightHistoryUncheckedCreateWithoutUserInput> | WeightHistoryCreateWithoutUserInput[] | WeightHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WeightHistoryCreateOrConnectWithoutUserInput | WeightHistoryCreateOrConnectWithoutUserInput[]
    upsert?: WeightHistoryUpsertWithWhereUniqueWithoutUserInput | WeightHistoryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WeightHistoryCreateManyUserInputEnvelope
    set?: WeightHistoryWhereUniqueInput | WeightHistoryWhereUniqueInput[]
    disconnect?: WeightHistoryWhereUniqueInput | WeightHistoryWhereUniqueInput[]
    delete?: WeightHistoryWhereUniqueInput | WeightHistoryWhereUniqueInput[]
    connect?: WeightHistoryWhereUniqueInput | WeightHistoryWhereUniqueInput[]
    update?: WeightHistoryUpdateWithWhereUniqueWithoutUserInput | WeightHistoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WeightHistoryUpdateManyWithWhereWithoutUserInput | WeightHistoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WeightHistoryScalarWhereInput | WeightHistoryScalarWhereInput[]
  }

  export type UserAchievementUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserAchievementCreateWithoutUserInput, UserAchievementUncheckedCreateWithoutUserInput> | UserAchievementCreateWithoutUserInput[] | UserAchievementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserAchievementCreateOrConnectWithoutUserInput | UserAchievementCreateOrConnectWithoutUserInput[]
    upsert?: UserAchievementUpsertWithWhereUniqueWithoutUserInput | UserAchievementUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserAchievementCreateManyUserInputEnvelope
    set?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    disconnect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    delete?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    connect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    update?: UserAchievementUpdateWithWhereUniqueWithoutUserInput | UserAchievementUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserAchievementUpdateManyWithWhereWithoutUserInput | UserAchievementUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserAchievementScalarWhereInput | UserAchievementScalarWhereInput[]
  }

  export type UserSettingsUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserSettingsCreateWithoutUserInput, UserSettingsUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserSettingsCreateOrConnectWithoutUserInput
    upsert?: UserSettingsUpsertWithoutUserInput
    disconnect?: UserSettingsWhereInput | boolean
    delete?: UserSettingsWhereInput | boolean
    connect?: UserSettingsWhereUniqueInput
    update?: XOR<XOR<UserSettingsUpdateToOneWithWhereWithoutUserInput, UserSettingsUpdateWithoutUserInput>, UserSettingsUncheckedUpdateWithoutUserInput>
  }

  export type UserCreateNestedOneWithoutSettingsInput = {
    create?: XOR<UserCreateWithoutSettingsInput, UserUncheckedCreateWithoutSettingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSettingsInput
    connect?: UserWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutSettingsNestedInput = {
    create?: XOR<UserCreateWithoutSettingsInput, UserUncheckedCreateWithoutSettingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSettingsInput
    upsert?: UserUpsertWithoutSettingsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSettingsInput, UserUpdateWithoutSettingsInput>, UserUncheckedUpdateWithoutSettingsInput>
  }

  export type WorkoutCreatemuscleGroupsInput = {
    set: string[]
  }

  export type WorkoutExerciseCreateNestedManyWithoutWorkoutInput = {
    create?: XOR<WorkoutExerciseCreateWithoutWorkoutInput, WorkoutExerciseUncheckedCreateWithoutWorkoutInput> | WorkoutExerciseCreateWithoutWorkoutInput[] | WorkoutExerciseUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: WorkoutExerciseCreateOrConnectWithoutWorkoutInput | WorkoutExerciseCreateOrConnectWithoutWorkoutInput[]
    createMany?: WorkoutExerciseCreateManyWorkoutInputEnvelope
    connect?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
  }

  export type WorkoutHistoryCreateNestedManyWithoutWorkoutInput = {
    create?: XOR<WorkoutHistoryCreateWithoutWorkoutInput, WorkoutHistoryUncheckedCreateWithoutWorkoutInput> | WorkoutHistoryCreateWithoutWorkoutInput[] | WorkoutHistoryUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: WorkoutHistoryCreateOrConnectWithoutWorkoutInput | WorkoutHistoryCreateOrConnectWithoutWorkoutInput[]
    createMany?: WorkoutHistoryCreateManyWorkoutInputEnvelope
    connect?: WorkoutHistoryWhereUniqueInput | WorkoutHistoryWhereUniqueInput[]
  }

  export type FavoriteWorkoutCreateNestedManyWithoutWorkoutInput = {
    create?: XOR<FavoriteWorkoutCreateWithoutWorkoutInput, FavoriteWorkoutUncheckedCreateWithoutWorkoutInput> | FavoriteWorkoutCreateWithoutWorkoutInput[] | FavoriteWorkoutUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: FavoriteWorkoutCreateOrConnectWithoutWorkoutInput | FavoriteWorkoutCreateOrConnectWithoutWorkoutInput[]
    createMany?: FavoriteWorkoutCreateManyWorkoutInputEnvelope
    connect?: FavoriteWorkoutWhereUniqueInput | FavoriteWorkoutWhereUniqueInput[]
  }

  export type ScheduledEventCreateNestedManyWithoutWorkoutInput = {
    create?: XOR<ScheduledEventCreateWithoutWorkoutInput, ScheduledEventUncheckedCreateWithoutWorkoutInput> | ScheduledEventCreateWithoutWorkoutInput[] | ScheduledEventUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: ScheduledEventCreateOrConnectWithoutWorkoutInput | ScheduledEventCreateOrConnectWithoutWorkoutInput[]
    createMany?: ScheduledEventCreateManyWorkoutInputEnvelope
    connect?: ScheduledEventWhereUniqueInput | ScheduledEventWhereUniqueInput[]
  }

  export type WorkoutExerciseUncheckedCreateNestedManyWithoutWorkoutInput = {
    create?: XOR<WorkoutExerciseCreateWithoutWorkoutInput, WorkoutExerciseUncheckedCreateWithoutWorkoutInput> | WorkoutExerciseCreateWithoutWorkoutInput[] | WorkoutExerciseUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: WorkoutExerciseCreateOrConnectWithoutWorkoutInput | WorkoutExerciseCreateOrConnectWithoutWorkoutInput[]
    createMany?: WorkoutExerciseCreateManyWorkoutInputEnvelope
    connect?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
  }

  export type WorkoutHistoryUncheckedCreateNestedManyWithoutWorkoutInput = {
    create?: XOR<WorkoutHistoryCreateWithoutWorkoutInput, WorkoutHistoryUncheckedCreateWithoutWorkoutInput> | WorkoutHistoryCreateWithoutWorkoutInput[] | WorkoutHistoryUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: WorkoutHistoryCreateOrConnectWithoutWorkoutInput | WorkoutHistoryCreateOrConnectWithoutWorkoutInput[]
    createMany?: WorkoutHistoryCreateManyWorkoutInputEnvelope
    connect?: WorkoutHistoryWhereUniqueInput | WorkoutHistoryWhereUniqueInput[]
  }

  export type FavoriteWorkoutUncheckedCreateNestedManyWithoutWorkoutInput = {
    create?: XOR<FavoriteWorkoutCreateWithoutWorkoutInput, FavoriteWorkoutUncheckedCreateWithoutWorkoutInput> | FavoriteWorkoutCreateWithoutWorkoutInput[] | FavoriteWorkoutUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: FavoriteWorkoutCreateOrConnectWithoutWorkoutInput | FavoriteWorkoutCreateOrConnectWithoutWorkoutInput[]
    createMany?: FavoriteWorkoutCreateManyWorkoutInputEnvelope
    connect?: FavoriteWorkoutWhereUniqueInput | FavoriteWorkoutWhereUniqueInput[]
  }

  export type ScheduledEventUncheckedCreateNestedManyWithoutWorkoutInput = {
    create?: XOR<ScheduledEventCreateWithoutWorkoutInput, ScheduledEventUncheckedCreateWithoutWorkoutInput> | ScheduledEventCreateWithoutWorkoutInput[] | ScheduledEventUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: ScheduledEventCreateOrConnectWithoutWorkoutInput | ScheduledEventCreateOrConnectWithoutWorkoutInput[]
    createMany?: ScheduledEventCreateManyWorkoutInputEnvelope
    connect?: ScheduledEventWhereUniqueInput | ScheduledEventWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type WorkoutUpdatemuscleGroupsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type WorkoutExerciseUpdateManyWithoutWorkoutNestedInput = {
    create?: XOR<WorkoutExerciseCreateWithoutWorkoutInput, WorkoutExerciseUncheckedCreateWithoutWorkoutInput> | WorkoutExerciseCreateWithoutWorkoutInput[] | WorkoutExerciseUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: WorkoutExerciseCreateOrConnectWithoutWorkoutInput | WorkoutExerciseCreateOrConnectWithoutWorkoutInput[]
    upsert?: WorkoutExerciseUpsertWithWhereUniqueWithoutWorkoutInput | WorkoutExerciseUpsertWithWhereUniqueWithoutWorkoutInput[]
    createMany?: WorkoutExerciseCreateManyWorkoutInputEnvelope
    set?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    disconnect?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    delete?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    connect?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    update?: WorkoutExerciseUpdateWithWhereUniqueWithoutWorkoutInput | WorkoutExerciseUpdateWithWhereUniqueWithoutWorkoutInput[]
    updateMany?: WorkoutExerciseUpdateManyWithWhereWithoutWorkoutInput | WorkoutExerciseUpdateManyWithWhereWithoutWorkoutInput[]
    deleteMany?: WorkoutExerciseScalarWhereInput | WorkoutExerciseScalarWhereInput[]
  }

  export type WorkoutHistoryUpdateManyWithoutWorkoutNestedInput = {
    create?: XOR<WorkoutHistoryCreateWithoutWorkoutInput, WorkoutHistoryUncheckedCreateWithoutWorkoutInput> | WorkoutHistoryCreateWithoutWorkoutInput[] | WorkoutHistoryUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: WorkoutHistoryCreateOrConnectWithoutWorkoutInput | WorkoutHistoryCreateOrConnectWithoutWorkoutInput[]
    upsert?: WorkoutHistoryUpsertWithWhereUniqueWithoutWorkoutInput | WorkoutHistoryUpsertWithWhereUniqueWithoutWorkoutInput[]
    createMany?: WorkoutHistoryCreateManyWorkoutInputEnvelope
    set?: WorkoutHistoryWhereUniqueInput | WorkoutHistoryWhereUniqueInput[]
    disconnect?: WorkoutHistoryWhereUniqueInput | WorkoutHistoryWhereUniqueInput[]
    delete?: WorkoutHistoryWhereUniqueInput | WorkoutHistoryWhereUniqueInput[]
    connect?: WorkoutHistoryWhereUniqueInput | WorkoutHistoryWhereUniqueInput[]
    update?: WorkoutHistoryUpdateWithWhereUniqueWithoutWorkoutInput | WorkoutHistoryUpdateWithWhereUniqueWithoutWorkoutInput[]
    updateMany?: WorkoutHistoryUpdateManyWithWhereWithoutWorkoutInput | WorkoutHistoryUpdateManyWithWhereWithoutWorkoutInput[]
    deleteMany?: WorkoutHistoryScalarWhereInput | WorkoutHistoryScalarWhereInput[]
  }

  export type FavoriteWorkoutUpdateManyWithoutWorkoutNestedInput = {
    create?: XOR<FavoriteWorkoutCreateWithoutWorkoutInput, FavoriteWorkoutUncheckedCreateWithoutWorkoutInput> | FavoriteWorkoutCreateWithoutWorkoutInput[] | FavoriteWorkoutUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: FavoriteWorkoutCreateOrConnectWithoutWorkoutInput | FavoriteWorkoutCreateOrConnectWithoutWorkoutInput[]
    upsert?: FavoriteWorkoutUpsertWithWhereUniqueWithoutWorkoutInput | FavoriteWorkoutUpsertWithWhereUniqueWithoutWorkoutInput[]
    createMany?: FavoriteWorkoutCreateManyWorkoutInputEnvelope
    set?: FavoriteWorkoutWhereUniqueInput | FavoriteWorkoutWhereUniqueInput[]
    disconnect?: FavoriteWorkoutWhereUniqueInput | FavoriteWorkoutWhereUniqueInput[]
    delete?: FavoriteWorkoutWhereUniqueInput | FavoriteWorkoutWhereUniqueInput[]
    connect?: FavoriteWorkoutWhereUniqueInput | FavoriteWorkoutWhereUniqueInput[]
    update?: FavoriteWorkoutUpdateWithWhereUniqueWithoutWorkoutInput | FavoriteWorkoutUpdateWithWhereUniqueWithoutWorkoutInput[]
    updateMany?: FavoriteWorkoutUpdateManyWithWhereWithoutWorkoutInput | FavoriteWorkoutUpdateManyWithWhereWithoutWorkoutInput[]
    deleteMany?: FavoriteWorkoutScalarWhereInput | FavoriteWorkoutScalarWhereInput[]
  }

  export type ScheduledEventUpdateManyWithoutWorkoutNestedInput = {
    create?: XOR<ScheduledEventCreateWithoutWorkoutInput, ScheduledEventUncheckedCreateWithoutWorkoutInput> | ScheduledEventCreateWithoutWorkoutInput[] | ScheduledEventUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: ScheduledEventCreateOrConnectWithoutWorkoutInput | ScheduledEventCreateOrConnectWithoutWorkoutInput[]
    upsert?: ScheduledEventUpsertWithWhereUniqueWithoutWorkoutInput | ScheduledEventUpsertWithWhereUniqueWithoutWorkoutInput[]
    createMany?: ScheduledEventCreateManyWorkoutInputEnvelope
    set?: ScheduledEventWhereUniqueInput | ScheduledEventWhereUniqueInput[]
    disconnect?: ScheduledEventWhereUniqueInput | ScheduledEventWhereUniqueInput[]
    delete?: ScheduledEventWhereUniqueInput | ScheduledEventWhereUniqueInput[]
    connect?: ScheduledEventWhereUniqueInput | ScheduledEventWhereUniqueInput[]
    update?: ScheduledEventUpdateWithWhereUniqueWithoutWorkoutInput | ScheduledEventUpdateWithWhereUniqueWithoutWorkoutInput[]
    updateMany?: ScheduledEventUpdateManyWithWhereWithoutWorkoutInput | ScheduledEventUpdateManyWithWhereWithoutWorkoutInput[]
    deleteMany?: ScheduledEventScalarWhereInput | ScheduledEventScalarWhereInput[]
  }

  export type WorkoutExerciseUncheckedUpdateManyWithoutWorkoutNestedInput = {
    create?: XOR<WorkoutExerciseCreateWithoutWorkoutInput, WorkoutExerciseUncheckedCreateWithoutWorkoutInput> | WorkoutExerciseCreateWithoutWorkoutInput[] | WorkoutExerciseUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: WorkoutExerciseCreateOrConnectWithoutWorkoutInput | WorkoutExerciseCreateOrConnectWithoutWorkoutInput[]
    upsert?: WorkoutExerciseUpsertWithWhereUniqueWithoutWorkoutInput | WorkoutExerciseUpsertWithWhereUniqueWithoutWorkoutInput[]
    createMany?: WorkoutExerciseCreateManyWorkoutInputEnvelope
    set?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    disconnect?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    delete?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    connect?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    update?: WorkoutExerciseUpdateWithWhereUniqueWithoutWorkoutInput | WorkoutExerciseUpdateWithWhereUniqueWithoutWorkoutInput[]
    updateMany?: WorkoutExerciseUpdateManyWithWhereWithoutWorkoutInput | WorkoutExerciseUpdateManyWithWhereWithoutWorkoutInput[]
    deleteMany?: WorkoutExerciseScalarWhereInput | WorkoutExerciseScalarWhereInput[]
  }

  export type WorkoutHistoryUncheckedUpdateManyWithoutWorkoutNestedInput = {
    create?: XOR<WorkoutHistoryCreateWithoutWorkoutInput, WorkoutHistoryUncheckedCreateWithoutWorkoutInput> | WorkoutHistoryCreateWithoutWorkoutInput[] | WorkoutHistoryUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: WorkoutHistoryCreateOrConnectWithoutWorkoutInput | WorkoutHistoryCreateOrConnectWithoutWorkoutInput[]
    upsert?: WorkoutHistoryUpsertWithWhereUniqueWithoutWorkoutInput | WorkoutHistoryUpsertWithWhereUniqueWithoutWorkoutInput[]
    createMany?: WorkoutHistoryCreateManyWorkoutInputEnvelope
    set?: WorkoutHistoryWhereUniqueInput | WorkoutHistoryWhereUniqueInput[]
    disconnect?: WorkoutHistoryWhereUniqueInput | WorkoutHistoryWhereUniqueInput[]
    delete?: WorkoutHistoryWhereUniqueInput | WorkoutHistoryWhereUniqueInput[]
    connect?: WorkoutHistoryWhereUniqueInput | WorkoutHistoryWhereUniqueInput[]
    update?: WorkoutHistoryUpdateWithWhereUniqueWithoutWorkoutInput | WorkoutHistoryUpdateWithWhereUniqueWithoutWorkoutInput[]
    updateMany?: WorkoutHistoryUpdateManyWithWhereWithoutWorkoutInput | WorkoutHistoryUpdateManyWithWhereWithoutWorkoutInput[]
    deleteMany?: WorkoutHistoryScalarWhereInput | WorkoutHistoryScalarWhereInput[]
  }

  export type FavoriteWorkoutUncheckedUpdateManyWithoutWorkoutNestedInput = {
    create?: XOR<FavoriteWorkoutCreateWithoutWorkoutInput, FavoriteWorkoutUncheckedCreateWithoutWorkoutInput> | FavoriteWorkoutCreateWithoutWorkoutInput[] | FavoriteWorkoutUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: FavoriteWorkoutCreateOrConnectWithoutWorkoutInput | FavoriteWorkoutCreateOrConnectWithoutWorkoutInput[]
    upsert?: FavoriteWorkoutUpsertWithWhereUniqueWithoutWorkoutInput | FavoriteWorkoutUpsertWithWhereUniqueWithoutWorkoutInput[]
    createMany?: FavoriteWorkoutCreateManyWorkoutInputEnvelope
    set?: FavoriteWorkoutWhereUniqueInput | FavoriteWorkoutWhereUniqueInput[]
    disconnect?: FavoriteWorkoutWhereUniqueInput | FavoriteWorkoutWhereUniqueInput[]
    delete?: FavoriteWorkoutWhereUniqueInput | FavoriteWorkoutWhereUniqueInput[]
    connect?: FavoriteWorkoutWhereUniqueInput | FavoriteWorkoutWhereUniqueInput[]
    update?: FavoriteWorkoutUpdateWithWhereUniqueWithoutWorkoutInput | FavoriteWorkoutUpdateWithWhereUniqueWithoutWorkoutInput[]
    updateMany?: FavoriteWorkoutUpdateManyWithWhereWithoutWorkoutInput | FavoriteWorkoutUpdateManyWithWhereWithoutWorkoutInput[]
    deleteMany?: FavoriteWorkoutScalarWhereInput | FavoriteWorkoutScalarWhereInput[]
  }

  export type ScheduledEventUncheckedUpdateManyWithoutWorkoutNestedInput = {
    create?: XOR<ScheduledEventCreateWithoutWorkoutInput, ScheduledEventUncheckedCreateWithoutWorkoutInput> | ScheduledEventCreateWithoutWorkoutInput[] | ScheduledEventUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: ScheduledEventCreateOrConnectWithoutWorkoutInput | ScheduledEventCreateOrConnectWithoutWorkoutInput[]
    upsert?: ScheduledEventUpsertWithWhereUniqueWithoutWorkoutInput | ScheduledEventUpsertWithWhereUniqueWithoutWorkoutInput[]
    createMany?: ScheduledEventCreateManyWorkoutInputEnvelope
    set?: ScheduledEventWhereUniqueInput | ScheduledEventWhereUniqueInput[]
    disconnect?: ScheduledEventWhereUniqueInput | ScheduledEventWhereUniqueInput[]
    delete?: ScheduledEventWhereUniqueInput | ScheduledEventWhereUniqueInput[]
    connect?: ScheduledEventWhereUniqueInput | ScheduledEventWhereUniqueInput[]
    update?: ScheduledEventUpdateWithWhereUniqueWithoutWorkoutInput | ScheduledEventUpdateWithWhereUniqueWithoutWorkoutInput[]
    updateMany?: ScheduledEventUpdateManyWithWhereWithoutWorkoutInput | ScheduledEventUpdateManyWithWhereWithoutWorkoutInput[]
    deleteMany?: ScheduledEventScalarWhereInput | ScheduledEventScalarWhereInput[]
  }

  export type ExerciseCreatemuscleGroupsInput = {
    set: string[]
  }

  export type ExerciseCreateequipmentInput = {
    set: string[]
  }

  export type WorkoutExerciseCreateNestedManyWithoutExerciseInput = {
    create?: XOR<WorkoutExerciseCreateWithoutExerciseInput, WorkoutExerciseUncheckedCreateWithoutExerciseInput> | WorkoutExerciseCreateWithoutExerciseInput[] | WorkoutExerciseUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: WorkoutExerciseCreateOrConnectWithoutExerciseInput | WorkoutExerciseCreateOrConnectWithoutExerciseInput[]
    createMany?: WorkoutExerciseCreateManyExerciseInputEnvelope
    connect?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
  }

  export type WorkoutExerciseUncheckedCreateNestedManyWithoutExerciseInput = {
    create?: XOR<WorkoutExerciseCreateWithoutExerciseInput, WorkoutExerciseUncheckedCreateWithoutExerciseInput> | WorkoutExerciseCreateWithoutExerciseInput[] | WorkoutExerciseUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: WorkoutExerciseCreateOrConnectWithoutExerciseInput | WorkoutExerciseCreateOrConnectWithoutExerciseInput[]
    createMany?: WorkoutExerciseCreateManyExerciseInputEnvelope
    connect?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
  }

  export type ExerciseUpdatemuscleGroupsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ExerciseUpdateequipmentInput = {
    set?: string[]
    push?: string | string[]
  }

  export type WorkoutExerciseUpdateManyWithoutExerciseNestedInput = {
    create?: XOR<WorkoutExerciseCreateWithoutExerciseInput, WorkoutExerciseUncheckedCreateWithoutExerciseInput> | WorkoutExerciseCreateWithoutExerciseInput[] | WorkoutExerciseUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: WorkoutExerciseCreateOrConnectWithoutExerciseInput | WorkoutExerciseCreateOrConnectWithoutExerciseInput[]
    upsert?: WorkoutExerciseUpsertWithWhereUniqueWithoutExerciseInput | WorkoutExerciseUpsertWithWhereUniqueWithoutExerciseInput[]
    createMany?: WorkoutExerciseCreateManyExerciseInputEnvelope
    set?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    disconnect?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    delete?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    connect?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    update?: WorkoutExerciseUpdateWithWhereUniqueWithoutExerciseInput | WorkoutExerciseUpdateWithWhereUniqueWithoutExerciseInput[]
    updateMany?: WorkoutExerciseUpdateManyWithWhereWithoutExerciseInput | WorkoutExerciseUpdateManyWithWhereWithoutExerciseInput[]
    deleteMany?: WorkoutExerciseScalarWhereInput | WorkoutExerciseScalarWhereInput[]
  }

  export type WorkoutExerciseUncheckedUpdateManyWithoutExerciseNestedInput = {
    create?: XOR<WorkoutExerciseCreateWithoutExerciseInput, WorkoutExerciseUncheckedCreateWithoutExerciseInput> | WorkoutExerciseCreateWithoutExerciseInput[] | WorkoutExerciseUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: WorkoutExerciseCreateOrConnectWithoutExerciseInput | WorkoutExerciseCreateOrConnectWithoutExerciseInput[]
    upsert?: WorkoutExerciseUpsertWithWhereUniqueWithoutExerciseInput | WorkoutExerciseUpsertWithWhereUniqueWithoutExerciseInput[]
    createMany?: WorkoutExerciseCreateManyExerciseInputEnvelope
    set?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    disconnect?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    delete?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    connect?: WorkoutExerciseWhereUniqueInput | WorkoutExerciseWhereUniqueInput[]
    update?: WorkoutExerciseUpdateWithWhereUniqueWithoutExerciseInput | WorkoutExerciseUpdateWithWhereUniqueWithoutExerciseInput[]
    updateMany?: WorkoutExerciseUpdateManyWithWhereWithoutExerciseInput | WorkoutExerciseUpdateManyWithWhereWithoutExerciseInput[]
    deleteMany?: WorkoutExerciseScalarWhereInput | WorkoutExerciseScalarWhereInput[]
  }

  export type WorkoutCreateNestedOneWithoutExercisesInput = {
    create?: XOR<WorkoutCreateWithoutExercisesInput, WorkoutUncheckedCreateWithoutExercisesInput>
    connectOrCreate?: WorkoutCreateOrConnectWithoutExercisesInput
    connect?: WorkoutWhereUniqueInput
  }

  export type ExerciseCreateNestedOneWithoutWorkoutsInput = {
    create?: XOR<ExerciseCreateWithoutWorkoutsInput, ExerciseUncheckedCreateWithoutWorkoutsInput>
    connectOrCreate?: ExerciseCreateOrConnectWithoutWorkoutsInput
    connect?: ExerciseWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type WorkoutUpdateOneRequiredWithoutExercisesNestedInput = {
    create?: XOR<WorkoutCreateWithoutExercisesInput, WorkoutUncheckedCreateWithoutExercisesInput>
    connectOrCreate?: WorkoutCreateOrConnectWithoutExercisesInput
    upsert?: WorkoutUpsertWithoutExercisesInput
    connect?: WorkoutWhereUniqueInput
    update?: XOR<XOR<WorkoutUpdateToOneWithWhereWithoutExercisesInput, WorkoutUpdateWithoutExercisesInput>, WorkoutUncheckedUpdateWithoutExercisesInput>
  }

  export type ExerciseUpdateOneRequiredWithoutWorkoutsNestedInput = {
    create?: XOR<ExerciseCreateWithoutWorkoutsInput, ExerciseUncheckedCreateWithoutWorkoutsInput>
    connectOrCreate?: ExerciseCreateOrConnectWithoutWorkoutsInput
    upsert?: ExerciseUpsertWithoutWorkoutsInput
    connect?: ExerciseWhereUniqueInput
    update?: XOR<XOR<ExerciseUpdateToOneWithWhereWithoutWorkoutsInput, ExerciseUpdateWithoutWorkoutsInput>, ExerciseUncheckedUpdateWithoutWorkoutsInput>
  }

  export type FavoriteMeditationCreateNestedManyWithoutMeditationInput = {
    create?: XOR<FavoriteMeditationCreateWithoutMeditationInput, FavoriteMeditationUncheckedCreateWithoutMeditationInput> | FavoriteMeditationCreateWithoutMeditationInput[] | FavoriteMeditationUncheckedCreateWithoutMeditationInput[]
    connectOrCreate?: FavoriteMeditationCreateOrConnectWithoutMeditationInput | FavoriteMeditationCreateOrConnectWithoutMeditationInput[]
    createMany?: FavoriteMeditationCreateManyMeditationInputEnvelope
    connect?: FavoriteMeditationWhereUniqueInput | FavoriteMeditationWhereUniqueInput[]
  }

  export type ScheduledEventCreateNestedManyWithoutMeditationInput = {
    create?: XOR<ScheduledEventCreateWithoutMeditationInput, ScheduledEventUncheckedCreateWithoutMeditationInput> | ScheduledEventCreateWithoutMeditationInput[] | ScheduledEventUncheckedCreateWithoutMeditationInput[]
    connectOrCreate?: ScheduledEventCreateOrConnectWithoutMeditationInput | ScheduledEventCreateOrConnectWithoutMeditationInput[]
    createMany?: ScheduledEventCreateManyMeditationInputEnvelope
    connect?: ScheduledEventWhereUniqueInput | ScheduledEventWhereUniqueInput[]
  }

  export type FavoriteMeditationUncheckedCreateNestedManyWithoutMeditationInput = {
    create?: XOR<FavoriteMeditationCreateWithoutMeditationInput, FavoriteMeditationUncheckedCreateWithoutMeditationInput> | FavoriteMeditationCreateWithoutMeditationInput[] | FavoriteMeditationUncheckedCreateWithoutMeditationInput[]
    connectOrCreate?: FavoriteMeditationCreateOrConnectWithoutMeditationInput | FavoriteMeditationCreateOrConnectWithoutMeditationInput[]
    createMany?: FavoriteMeditationCreateManyMeditationInputEnvelope
    connect?: FavoriteMeditationWhereUniqueInput | FavoriteMeditationWhereUniqueInput[]
  }

  export type ScheduledEventUncheckedCreateNestedManyWithoutMeditationInput = {
    create?: XOR<ScheduledEventCreateWithoutMeditationInput, ScheduledEventUncheckedCreateWithoutMeditationInput> | ScheduledEventCreateWithoutMeditationInput[] | ScheduledEventUncheckedCreateWithoutMeditationInput[]
    connectOrCreate?: ScheduledEventCreateOrConnectWithoutMeditationInput | ScheduledEventCreateOrConnectWithoutMeditationInput[]
    createMany?: ScheduledEventCreateManyMeditationInputEnvelope
    connect?: ScheduledEventWhereUniqueInput | ScheduledEventWhereUniqueInput[]
  }

  export type FavoriteMeditationUpdateManyWithoutMeditationNestedInput = {
    create?: XOR<FavoriteMeditationCreateWithoutMeditationInput, FavoriteMeditationUncheckedCreateWithoutMeditationInput> | FavoriteMeditationCreateWithoutMeditationInput[] | FavoriteMeditationUncheckedCreateWithoutMeditationInput[]
    connectOrCreate?: FavoriteMeditationCreateOrConnectWithoutMeditationInput | FavoriteMeditationCreateOrConnectWithoutMeditationInput[]
    upsert?: FavoriteMeditationUpsertWithWhereUniqueWithoutMeditationInput | FavoriteMeditationUpsertWithWhereUniqueWithoutMeditationInput[]
    createMany?: FavoriteMeditationCreateManyMeditationInputEnvelope
    set?: FavoriteMeditationWhereUniqueInput | FavoriteMeditationWhereUniqueInput[]
    disconnect?: FavoriteMeditationWhereUniqueInput | FavoriteMeditationWhereUniqueInput[]
    delete?: FavoriteMeditationWhereUniqueInput | FavoriteMeditationWhereUniqueInput[]
    connect?: FavoriteMeditationWhereUniqueInput | FavoriteMeditationWhereUniqueInput[]
    update?: FavoriteMeditationUpdateWithWhereUniqueWithoutMeditationInput | FavoriteMeditationUpdateWithWhereUniqueWithoutMeditationInput[]
    updateMany?: FavoriteMeditationUpdateManyWithWhereWithoutMeditationInput | FavoriteMeditationUpdateManyWithWhereWithoutMeditationInput[]
    deleteMany?: FavoriteMeditationScalarWhereInput | FavoriteMeditationScalarWhereInput[]
  }

  export type ScheduledEventUpdateManyWithoutMeditationNestedInput = {
    create?: XOR<ScheduledEventCreateWithoutMeditationInput, ScheduledEventUncheckedCreateWithoutMeditationInput> | ScheduledEventCreateWithoutMeditationInput[] | ScheduledEventUncheckedCreateWithoutMeditationInput[]
    connectOrCreate?: ScheduledEventCreateOrConnectWithoutMeditationInput | ScheduledEventCreateOrConnectWithoutMeditationInput[]
    upsert?: ScheduledEventUpsertWithWhereUniqueWithoutMeditationInput | ScheduledEventUpsertWithWhereUniqueWithoutMeditationInput[]
    createMany?: ScheduledEventCreateManyMeditationInputEnvelope
    set?: ScheduledEventWhereUniqueInput | ScheduledEventWhereUniqueInput[]
    disconnect?: ScheduledEventWhereUniqueInput | ScheduledEventWhereUniqueInput[]
    delete?: ScheduledEventWhereUniqueInput | ScheduledEventWhereUniqueInput[]
    connect?: ScheduledEventWhereUniqueInput | ScheduledEventWhereUniqueInput[]
    update?: ScheduledEventUpdateWithWhereUniqueWithoutMeditationInput | ScheduledEventUpdateWithWhereUniqueWithoutMeditationInput[]
    updateMany?: ScheduledEventUpdateManyWithWhereWithoutMeditationInput | ScheduledEventUpdateManyWithWhereWithoutMeditationInput[]
    deleteMany?: ScheduledEventScalarWhereInput | ScheduledEventScalarWhereInput[]
  }

  export type FavoriteMeditationUncheckedUpdateManyWithoutMeditationNestedInput = {
    create?: XOR<FavoriteMeditationCreateWithoutMeditationInput, FavoriteMeditationUncheckedCreateWithoutMeditationInput> | FavoriteMeditationCreateWithoutMeditationInput[] | FavoriteMeditationUncheckedCreateWithoutMeditationInput[]
    connectOrCreate?: FavoriteMeditationCreateOrConnectWithoutMeditationInput | FavoriteMeditationCreateOrConnectWithoutMeditationInput[]
    upsert?: FavoriteMeditationUpsertWithWhereUniqueWithoutMeditationInput | FavoriteMeditationUpsertWithWhereUniqueWithoutMeditationInput[]
    createMany?: FavoriteMeditationCreateManyMeditationInputEnvelope
    set?: FavoriteMeditationWhereUniqueInput | FavoriteMeditationWhereUniqueInput[]
    disconnect?: FavoriteMeditationWhereUniqueInput | FavoriteMeditationWhereUniqueInput[]
    delete?: FavoriteMeditationWhereUniqueInput | FavoriteMeditationWhereUniqueInput[]
    connect?: FavoriteMeditationWhereUniqueInput | FavoriteMeditationWhereUniqueInput[]
    update?: FavoriteMeditationUpdateWithWhereUniqueWithoutMeditationInput | FavoriteMeditationUpdateWithWhereUniqueWithoutMeditationInput[]
    updateMany?: FavoriteMeditationUpdateManyWithWhereWithoutMeditationInput | FavoriteMeditationUpdateManyWithWhereWithoutMeditationInput[]
    deleteMany?: FavoriteMeditationScalarWhereInput | FavoriteMeditationScalarWhereInput[]
  }

  export type ScheduledEventUncheckedUpdateManyWithoutMeditationNestedInput = {
    create?: XOR<ScheduledEventCreateWithoutMeditationInput, ScheduledEventUncheckedCreateWithoutMeditationInput> | ScheduledEventCreateWithoutMeditationInput[] | ScheduledEventUncheckedCreateWithoutMeditationInput[]
    connectOrCreate?: ScheduledEventCreateOrConnectWithoutMeditationInput | ScheduledEventCreateOrConnectWithoutMeditationInput[]
    upsert?: ScheduledEventUpsertWithWhereUniqueWithoutMeditationInput | ScheduledEventUpsertWithWhereUniqueWithoutMeditationInput[]
    createMany?: ScheduledEventCreateManyMeditationInputEnvelope
    set?: ScheduledEventWhereUniqueInput | ScheduledEventWhereUniqueInput[]
    disconnect?: ScheduledEventWhereUniqueInput | ScheduledEventWhereUniqueInput[]
    delete?: ScheduledEventWhereUniqueInput | ScheduledEventWhereUniqueInput[]
    connect?: ScheduledEventWhereUniqueInput | ScheduledEventWhereUniqueInput[]
    update?: ScheduledEventUpdateWithWhereUniqueWithoutMeditationInput | ScheduledEventUpdateWithWhereUniqueWithoutMeditationInput[]
    updateMany?: ScheduledEventUpdateManyWithWhereWithoutMeditationInput | ScheduledEventUpdateManyWithWhereWithoutMeditationInput[]
    deleteMany?: ScheduledEventScalarWhereInput | ScheduledEventScalarWhereInput[]
  }

  export type YogaSessionCreatebenefitsInput = {
    set: string[]
  }

  export type FavoriteYogaSessionCreateNestedManyWithoutYogaInput = {
    create?: XOR<FavoriteYogaSessionCreateWithoutYogaInput, FavoriteYogaSessionUncheckedCreateWithoutYogaInput> | FavoriteYogaSessionCreateWithoutYogaInput[] | FavoriteYogaSessionUncheckedCreateWithoutYogaInput[]
    connectOrCreate?: FavoriteYogaSessionCreateOrConnectWithoutYogaInput | FavoriteYogaSessionCreateOrConnectWithoutYogaInput[]
    createMany?: FavoriteYogaSessionCreateManyYogaInputEnvelope
    connect?: FavoriteYogaSessionWhereUniqueInput | FavoriteYogaSessionWhereUniqueInput[]
  }

  export type ScheduledEventCreateNestedManyWithoutYogaInput = {
    create?: XOR<ScheduledEventCreateWithoutYogaInput, ScheduledEventUncheckedCreateWithoutYogaInput> | ScheduledEventCreateWithoutYogaInput[] | ScheduledEventUncheckedCreateWithoutYogaInput[]
    connectOrCreate?: ScheduledEventCreateOrConnectWithoutYogaInput | ScheduledEventCreateOrConnectWithoutYogaInput[]
    createMany?: ScheduledEventCreateManyYogaInputEnvelope
    connect?: ScheduledEventWhereUniqueInput | ScheduledEventWhereUniqueInput[]
  }

  export type FavoriteYogaSessionUncheckedCreateNestedManyWithoutYogaInput = {
    create?: XOR<FavoriteYogaSessionCreateWithoutYogaInput, FavoriteYogaSessionUncheckedCreateWithoutYogaInput> | FavoriteYogaSessionCreateWithoutYogaInput[] | FavoriteYogaSessionUncheckedCreateWithoutYogaInput[]
    connectOrCreate?: FavoriteYogaSessionCreateOrConnectWithoutYogaInput | FavoriteYogaSessionCreateOrConnectWithoutYogaInput[]
    createMany?: FavoriteYogaSessionCreateManyYogaInputEnvelope
    connect?: FavoriteYogaSessionWhereUniqueInput | FavoriteYogaSessionWhereUniqueInput[]
  }

  export type ScheduledEventUncheckedCreateNestedManyWithoutYogaInput = {
    create?: XOR<ScheduledEventCreateWithoutYogaInput, ScheduledEventUncheckedCreateWithoutYogaInput> | ScheduledEventCreateWithoutYogaInput[] | ScheduledEventUncheckedCreateWithoutYogaInput[]
    connectOrCreate?: ScheduledEventCreateOrConnectWithoutYogaInput | ScheduledEventCreateOrConnectWithoutYogaInput[]
    createMany?: ScheduledEventCreateManyYogaInputEnvelope
    connect?: ScheduledEventWhereUniqueInput | ScheduledEventWhereUniqueInput[]
  }

  export type YogaSessionUpdatebenefitsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type FavoriteYogaSessionUpdateManyWithoutYogaNestedInput = {
    create?: XOR<FavoriteYogaSessionCreateWithoutYogaInput, FavoriteYogaSessionUncheckedCreateWithoutYogaInput> | FavoriteYogaSessionCreateWithoutYogaInput[] | FavoriteYogaSessionUncheckedCreateWithoutYogaInput[]
    connectOrCreate?: FavoriteYogaSessionCreateOrConnectWithoutYogaInput | FavoriteYogaSessionCreateOrConnectWithoutYogaInput[]
    upsert?: FavoriteYogaSessionUpsertWithWhereUniqueWithoutYogaInput | FavoriteYogaSessionUpsertWithWhereUniqueWithoutYogaInput[]
    createMany?: FavoriteYogaSessionCreateManyYogaInputEnvelope
    set?: FavoriteYogaSessionWhereUniqueInput | FavoriteYogaSessionWhereUniqueInput[]
    disconnect?: FavoriteYogaSessionWhereUniqueInput | FavoriteYogaSessionWhereUniqueInput[]
    delete?: FavoriteYogaSessionWhereUniqueInput | FavoriteYogaSessionWhereUniqueInput[]
    connect?: FavoriteYogaSessionWhereUniqueInput | FavoriteYogaSessionWhereUniqueInput[]
    update?: FavoriteYogaSessionUpdateWithWhereUniqueWithoutYogaInput | FavoriteYogaSessionUpdateWithWhereUniqueWithoutYogaInput[]
    updateMany?: FavoriteYogaSessionUpdateManyWithWhereWithoutYogaInput | FavoriteYogaSessionUpdateManyWithWhereWithoutYogaInput[]
    deleteMany?: FavoriteYogaSessionScalarWhereInput | FavoriteYogaSessionScalarWhereInput[]
  }

  export type ScheduledEventUpdateManyWithoutYogaNestedInput = {
    create?: XOR<ScheduledEventCreateWithoutYogaInput, ScheduledEventUncheckedCreateWithoutYogaInput> | ScheduledEventCreateWithoutYogaInput[] | ScheduledEventUncheckedCreateWithoutYogaInput[]
    connectOrCreate?: ScheduledEventCreateOrConnectWithoutYogaInput | ScheduledEventCreateOrConnectWithoutYogaInput[]
    upsert?: ScheduledEventUpsertWithWhereUniqueWithoutYogaInput | ScheduledEventUpsertWithWhereUniqueWithoutYogaInput[]
    createMany?: ScheduledEventCreateManyYogaInputEnvelope
    set?: ScheduledEventWhereUniqueInput | ScheduledEventWhereUniqueInput[]
    disconnect?: ScheduledEventWhereUniqueInput | ScheduledEventWhereUniqueInput[]
    delete?: ScheduledEventWhereUniqueInput | ScheduledEventWhereUniqueInput[]
    connect?: ScheduledEventWhereUniqueInput | ScheduledEventWhereUniqueInput[]
    update?: ScheduledEventUpdateWithWhereUniqueWithoutYogaInput | ScheduledEventUpdateWithWhereUniqueWithoutYogaInput[]
    updateMany?: ScheduledEventUpdateManyWithWhereWithoutYogaInput | ScheduledEventUpdateManyWithWhereWithoutYogaInput[]
    deleteMany?: ScheduledEventScalarWhereInput | ScheduledEventScalarWhereInput[]
  }

  export type FavoriteYogaSessionUncheckedUpdateManyWithoutYogaNestedInput = {
    create?: XOR<FavoriteYogaSessionCreateWithoutYogaInput, FavoriteYogaSessionUncheckedCreateWithoutYogaInput> | FavoriteYogaSessionCreateWithoutYogaInput[] | FavoriteYogaSessionUncheckedCreateWithoutYogaInput[]
    connectOrCreate?: FavoriteYogaSessionCreateOrConnectWithoutYogaInput | FavoriteYogaSessionCreateOrConnectWithoutYogaInput[]
    upsert?: FavoriteYogaSessionUpsertWithWhereUniqueWithoutYogaInput | FavoriteYogaSessionUpsertWithWhereUniqueWithoutYogaInput[]
    createMany?: FavoriteYogaSessionCreateManyYogaInputEnvelope
    set?: FavoriteYogaSessionWhereUniqueInput | FavoriteYogaSessionWhereUniqueInput[]
    disconnect?: FavoriteYogaSessionWhereUniqueInput | FavoriteYogaSessionWhereUniqueInput[]
    delete?: FavoriteYogaSessionWhereUniqueInput | FavoriteYogaSessionWhereUniqueInput[]
    connect?: FavoriteYogaSessionWhereUniqueInput | FavoriteYogaSessionWhereUniqueInput[]
    update?: FavoriteYogaSessionUpdateWithWhereUniqueWithoutYogaInput | FavoriteYogaSessionUpdateWithWhereUniqueWithoutYogaInput[]
    updateMany?: FavoriteYogaSessionUpdateManyWithWhereWithoutYogaInput | FavoriteYogaSessionUpdateManyWithWhereWithoutYogaInput[]
    deleteMany?: FavoriteYogaSessionScalarWhereInput | FavoriteYogaSessionScalarWhereInput[]
  }

  export type ScheduledEventUncheckedUpdateManyWithoutYogaNestedInput = {
    create?: XOR<ScheduledEventCreateWithoutYogaInput, ScheduledEventUncheckedCreateWithoutYogaInput> | ScheduledEventCreateWithoutYogaInput[] | ScheduledEventUncheckedCreateWithoutYogaInput[]
    connectOrCreate?: ScheduledEventCreateOrConnectWithoutYogaInput | ScheduledEventCreateOrConnectWithoutYogaInput[]
    upsert?: ScheduledEventUpsertWithWhereUniqueWithoutYogaInput | ScheduledEventUpsertWithWhereUniqueWithoutYogaInput[]
    createMany?: ScheduledEventCreateManyYogaInputEnvelope
    set?: ScheduledEventWhereUniqueInput | ScheduledEventWhereUniqueInput[]
    disconnect?: ScheduledEventWhereUniqueInput | ScheduledEventWhereUniqueInput[]
    delete?: ScheduledEventWhereUniqueInput | ScheduledEventWhereUniqueInput[]
    connect?: ScheduledEventWhereUniqueInput | ScheduledEventWhereUniqueInput[]
    update?: ScheduledEventUpdateWithWhereUniqueWithoutYogaInput | ScheduledEventUpdateWithWhereUniqueWithoutYogaInput[]
    updateMany?: ScheduledEventUpdateManyWithWhereWithoutYogaInput | ScheduledEventUpdateManyWithWhereWithoutYogaInput[]
    deleteMany?: ScheduledEventScalarWhereInput | ScheduledEventScalarWhereInput[]
  }

  export type RecipeCreatetagsInput = {
    set: string[]
  }

  export type RecipeIngredientCreateNestedManyWithoutRecipeInput = {
    create?: XOR<RecipeIngredientCreateWithoutRecipeInput, RecipeIngredientUncheckedCreateWithoutRecipeInput> | RecipeIngredientCreateWithoutRecipeInput[] | RecipeIngredientUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: RecipeIngredientCreateOrConnectWithoutRecipeInput | RecipeIngredientCreateOrConnectWithoutRecipeInput[]
    createMany?: RecipeIngredientCreateManyRecipeInputEnvelope
    connect?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
  }

  export type RecipeInstructionCreateNestedManyWithoutRecipeInput = {
    create?: XOR<RecipeInstructionCreateWithoutRecipeInput, RecipeInstructionUncheckedCreateWithoutRecipeInput> | RecipeInstructionCreateWithoutRecipeInput[] | RecipeInstructionUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: RecipeInstructionCreateOrConnectWithoutRecipeInput | RecipeInstructionCreateOrConnectWithoutRecipeInput[]
    createMany?: RecipeInstructionCreateManyRecipeInputEnvelope
    connect?: RecipeInstructionWhereUniqueInput | RecipeInstructionWhereUniqueInput[]
  }

  export type FavoriteRecipeCreateNestedManyWithoutRecipeInput = {
    create?: XOR<FavoriteRecipeCreateWithoutRecipeInput, FavoriteRecipeUncheckedCreateWithoutRecipeInput> | FavoriteRecipeCreateWithoutRecipeInput[] | FavoriteRecipeUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: FavoriteRecipeCreateOrConnectWithoutRecipeInput | FavoriteRecipeCreateOrConnectWithoutRecipeInput[]
    createMany?: FavoriteRecipeCreateManyRecipeInputEnvelope
    connect?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
  }

  export type RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInput = {
    create?: XOR<RecipeIngredientCreateWithoutRecipeInput, RecipeIngredientUncheckedCreateWithoutRecipeInput> | RecipeIngredientCreateWithoutRecipeInput[] | RecipeIngredientUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: RecipeIngredientCreateOrConnectWithoutRecipeInput | RecipeIngredientCreateOrConnectWithoutRecipeInput[]
    createMany?: RecipeIngredientCreateManyRecipeInputEnvelope
    connect?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
  }

  export type RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInput = {
    create?: XOR<RecipeInstructionCreateWithoutRecipeInput, RecipeInstructionUncheckedCreateWithoutRecipeInput> | RecipeInstructionCreateWithoutRecipeInput[] | RecipeInstructionUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: RecipeInstructionCreateOrConnectWithoutRecipeInput | RecipeInstructionCreateOrConnectWithoutRecipeInput[]
    createMany?: RecipeInstructionCreateManyRecipeInputEnvelope
    connect?: RecipeInstructionWhereUniqueInput | RecipeInstructionWhereUniqueInput[]
  }

  export type FavoriteRecipeUncheckedCreateNestedManyWithoutRecipeInput = {
    create?: XOR<FavoriteRecipeCreateWithoutRecipeInput, FavoriteRecipeUncheckedCreateWithoutRecipeInput> | FavoriteRecipeCreateWithoutRecipeInput[] | FavoriteRecipeUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: FavoriteRecipeCreateOrConnectWithoutRecipeInput | FavoriteRecipeCreateOrConnectWithoutRecipeInput[]
    createMany?: FavoriteRecipeCreateManyRecipeInputEnvelope
    connect?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
  }

  export type RecipeUpdatetagsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type RecipeIngredientUpdateManyWithoutRecipeNestedInput = {
    create?: XOR<RecipeIngredientCreateWithoutRecipeInput, RecipeIngredientUncheckedCreateWithoutRecipeInput> | RecipeIngredientCreateWithoutRecipeInput[] | RecipeIngredientUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: RecipeIngredientCreateOrConnectWithoutRecipeInput | RecipeIngredientCreateOrConnectWithoutRecipeInput[]
    upsert?: RecipeIngredientUpsertWithWhereUniqueWithoutRecipeInput | RecipeIngredientUpsertWithWhereUniqueWithoutRecipeInput[]
    createMany?: RecipeIngredientCreateManyRecipeInputEnvelope
    set?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
    disconnect?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
    delete?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
    connect?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
    update?: RecipeIngredientUpdateWithWhereUniqueWithoutRecipeInput | RecipeIngredientUpdateWithWhereUniqueWithoutRecipeInput[]
    updateMany?: RecipeIngredientUpdateManyWithWhereWithoutRecipeInput | RecipeIngredientUpdateManyWithWhereWithoutRecipeInput[]
    deleteMany?: RecipeIngredientScalarWhereInput | RecipeIngredientScalarWhereInput[]
  }

  export type RecipeInstructionUpdateManyWithoutRecipeNestedInput = {
    create?: XOR<RecipeInstructionCreateWithoutRecipeInput, RecipeInstructionUncheckedCreateWithoutRecipeInput> | RecipeInstructionCreateWithoutRecipeInput[] | RecipeInstructionUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: RecipeInstructionCreateOrConnectWithoutRecipeInput | RecipeInstructionCreateOrConnectWithoutRecipeInput[]
    upsert?: RecipeInstructionUpsertWithWhereUniqueWithoutRecipeInput | RecipeInstructionUpsertWithWhereUniqueWithoutRecipeInput[]
    createMany?: RecipeInstructionCreateManyRecipeInputEnvelope
    set?: RecipeInstructionWhereUniqueInput | RecipeInstructionWhereUniqueInput[]
    disconnect?: RecipeInstructionWhereUniqueInput | RecipeInstructionWhereUniqueInput[]
    delete?: RecipeInstructionWhereUniqueInput | RecipeInstructionWhereUniqueInput[]
    connect?: RecipeInstructionWhereUniqueInput | RecipeInstructionWhereUniqueInput[]
    update?: RecipeInstructionUpdateWithWhereUniqueWithoutRecipeInput | RecipeInstructionUpdateWithWhereUniqueWithoutRecipeInput[]
    updateMany?: RecipeInstructionUpdateManyWithWhereWithoutRecipeInput | RecipeInstructionUpdateManyWithWhereWithoutRecipeInput[]
    deleteMany?: RecipeInstructionScalarWhereInput | RecipeInstructionScalarWhereInput[]
  }

  export type FavoriteRecipeUpdateManyWithoutRecipeNestedInput = {
    create?: XOR<FavoriteRecipeCreateWithoutRecipeInput, FavoriteRecipeUncheckedCreateWithoutRecipeInput> | FavoriteRecipeCreateWithoutRecipeInput[] | FavoriteRecipeUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: FavoriteRecipeCreateOrConnectWithoutRecipeInput | FavoriteRecipeCreateOrConnectWithoutRecipeInput[]
    upsert?: FavoriteRecipeUpsertWithWhereUniqueWithoutRecipeInput | FavoriteRecipeUpsertWithWhereUniqueWithoutRecipeInput[]
    createMany?: FavoriteRecipeCreateManyRecipeInputEnvelope
    set?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
    disconnect?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
    delete?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
    connect?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
    update?: FavoriteRecipeUpdateWithWhereUniqueWithoutRecipeInput | FavoriteRecipeUpdateWithWhereUniqueWithoutRecipeInput[]
    updateMany?: FavoriteRecipeUpdateManyWithWhereWithoutRecipeInput | FavoriteRecipeUpdateManyWithWhereWithoutRecipeInput[]
    deleteMany?: FavoriteRecipeScalarWhereInput | FavoriteRecipeScalarWhereInput[]
  }

  export type RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInput = {
    create?: XOR<RecipeIngredientCreateWithoutRecipeInput, RecipeIngredientUncheckedCreateWithoutRecipeInput> | RecipeIngredientCreateWithoutRecipeInput[] | RecipeIngredientUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: RecipeIngredientCreateOrConnectWithoutRecipeInput | RecipeIngredientCreateOrConnectWithoutRecipeInput[]
    upsert?: RecipeIngredientUpsertWithWhereUniqueWithoutRecipeInput | RecipeIngredientUpsertWithWhereUniqueWithoutRecipeInput[]
    createMany?: RecipeIngredientCreateManyRecipeInputEnvelope
    set?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
    disconnect?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
    delete?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
    connect?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
    update?: RecipeIngredientUpdateWithWhereUniqueWithoutRecipeInput | RecipeIngredientUpdateWithWhereUniqueWithoutRecipeInput[]
    updateMany?: RecipeIngredientUpdateManyWithWhereWithoutRecipeInput | RecipeIngredientUpdateManyWithWhereWithoutRecipeInput[]
    deleteMany?: RecipeIngredientScalarWhereInput | RecipeIngredientScalarWhereInput[]
  }

  export type RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInput = {
    create?: XOR<RecipeInstructionCreateWithoutRecipeInput, RecipeInstructionUncheckedCreateWithoutRecipeInput> | RecipeInstructionCreateWithoutRecipeInput[] | RecipeInstructionUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: RecipeInstructionCreateOrConnectWithoutRecipeInput | RecipeInstructionCreateOrConnectWithoutRecipeInput[]
    upsert?: RecipeInstructionUpsertWithWhereUniqueWithoutRecipeInput | RecipeInstructionUpsertWithWhereUniqueWithoutRecipeInput[]
    createMany?: RecipeInstructionCreateManyRecipeInputEnvelope
    set?: RecipeInstructionWhereUniqueInput | RecipeInstructionWhereUniqueInput[]
    disconnect?: RecipeInstructionWhereUniqueInput | RecipeInstructionWhereUniqueInput[]
    delete?: RecipeInstructionWhereUniqueInput | RecipeInstructionWhereUniqueInput[]
    connect?: RecipeInstructionWhereUniqueInput | RecipeInstructionWhereUniqueInput[]
    update?: RecipeInstructionUpdateWithWhereUniqueWithoutRecipeInput | RecipeInstructionUpdateWithWhereUniqueWithoutRecipeInput[]
    updateMany?: RecipeInstructionUpdateManyWithWhereWithoutRecipeInput | RecipeInstructionUpdateManyWithWhereWithoutRecipeInput[]
    deleteMany?: RecipeInstructionScalarWhereInput | RecipeInstructionScalarWhereInput[]
  }

  export type FavoriteRecipeUncheckedUpdateManyWithoutRecipeNestedInput = {
    create?: XOR<FavoriteRecipeCreateWithoutRecipeInput, FavoriteRecipeUncheckedCreateWithoutRecipeInput> | FavoriteRecipeCreateWithoutRecipeInput[] | FavoriteRecipeUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: FavoriteRecipeCreateOrConnectWithoutRecipeInput | FavoriteRecipeCreateOrConnectWithoutRecipeInput[]
    upsert?: FavoriteRecipeUpsertWithWhereUniqueWithoutRecipeInput | FavoriteRecipeUpsertWithWhereUniqueWithoutRecipeInput[]
    createMany?: FavoriteRecipeCreateManyRecipeInputEnvelope
    set?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
    disconnect?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
    delete?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
    connect?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
    update?: FavoriteRecipeUpdateWithWhereUniqueWithoutRecipeInput | FavoriteRecipeUpdateWithWhereUniqueWithoutRecipeInput[]
    updateMany?: FavoriteRecipeUpdateManyWithWhereWithoutRecipeInput | FavoriteRecipeUpdateManyWithWhereWithoutRecipeInput[]
    deleteMany?: FavoriteRecipeScalarWhereInput | FavoriteRecipeScalarWhereInput[]
  }

  export type RecipeIngredientCreateNestedManyWithoutIngredientInput = {
    create?: XOR<RecipeIngredientCreateWithoutIngredientInput, RecipeIngredientUncheckedCreateWithoutIngredientInput> | RecipeIngredientCreateWithoutIngredientInput[] | RecipeIngredientUncheckedCreateWithoutIngredientInput[]
    connectOrCreate?: RecipeIngredientCreateOrConnectWithoutIngredientInput | RecipeIngredientCreateOrConnectWithoutIngredientInput[]
    createMany?: RecipeIngredientCreateManyIngredientInputEnvelope
    connect?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
  }

  export type RecipeIngredientUncheckedCreateNestedManyWithoutIngredientInput = {
    create?: XOR<RecipeIngredientCreateWithoutIngredientInput, RecipeIngredientUncheckedCreateWithoutIngredientInput> | RecipeIngredientCreateWithoutIngredientInput[] | RecipeIngredientUncheckedCreateWithoutIngredientInput[]
    connectOrCreate?: RecipeIngredientCreateOrConnectWithoutIngredientInput | RecipeIngredientCreateOrConnectWithoutIngredientInput[]
    createMany?: RecipeIngredientCreateManyIngredientInputEnvelope
    connect?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
  }

  export type RecipeIngredientUpdateManyWithoutIngredientNestedInput = {
    create?: XOR<RecipeIngredientCreateWithoutIngredientInput, RecipeIngredientUncheckedCreateWithoutIngredientInput> | RecipeIngredientCreateWithoutIngredientInput[] | RecipeIngredientUncheckedCreateWithoutIngredientInput[]
    connectOrCreate?: RecipeIngredientCreateOrConnectWithoutIngredientInput | RecipeIngredientCreateOrConnectWithoutIngredientInput[]
    upsert?: RecipeIngredientUpsertWithWhereUniqueWithoutIngredientInput | RecipeIngredientUpsertWithWhereUniqueWithoutIngredientInput[]
    createMany?: RecipeIngredientCreateManyIngredientInputEnvelope
    set?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
    disconnect?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
    delete?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
    connect?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
    update?: RecipeIngredientUpdateWithWhereUniqueWithoutIngredientInput | RecipeIngredientUpdateWithWhereUniqueWithoutIngredientInput[]
    updateMany?: RecipeIngredientUpdateManyWithWhereWithoutIngredientInput | RecipeIngredientUpdateManyWithWhereWithoutIngredientInput[]
    deleteMany?: RecipeIngredientScalarWhereInput | RecipeIngredientScalarWhereInput[]
  }

  export type RecipeIngredientUncheckedUpdateManyWithoutIngredientNestedInput = {
    create?: XOR<RecipeIngredientCreateWithoutIngredientInput, RecipeIngredientUncheckedCreateWithoutIngredientInput> | RecipeIngredientCreateWithoutIngredientInput[] | RecipeIngredientUncheckedCreateWithoutIngredientInput[]
    connectOrCreate?: RecipeIngredientCreateOrConnectWithoutIngredientInput | RecipeIngredientCreateOrConnectWithoutIngredientInput[]
    upsert?: RecipeIngredientUpsertWithWhereUniqueWithoutIngredientInput | RecipeIngredientUpsertWithWhereUniqueWithoutIngredientInput[]
    createMany?: RecipeIngredientCreateManyIngredientInputEnvelope
    set?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
    disconnect?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
    delete?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
    connect?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
    update?: RecipeIngredientUpdateWithWhereUniqueWithoutIngredientInput | RecipeIngredientUpdateWithWhereUniqueWithoutIngredientInput[]
    updateMany?: RecipeIngredientUpdateManyWithWhereWithoutIngredientInput | RecipeIngredientUpdateManyWithWhereWithoutIngredientInput[]
    deleteMany?: RecipeIngredientScalarWhereInput | RecipeIngredientScalarWhereInput[]
  }

  export type RecipeCreateNestedOneWithoutIngredientsInput = {
    create?: XOR<RecipeCreateWithoutIngredientsInput, RecipeUncheckedCreateWithoutIngredientsInput>
    connectOrCreate?: RecipeCreateOrConnectWithoutIngredientsInput
    connect?: RecipeWhereUniqueInput
  }

  export type IngredientCreateNestedOneWithoutRecipesInput = {
    create?: XOR<IngredientCreateWithoutRecipesInput, IngredientUncheckedCreateWithoutRecipesInput>
    connectOrCreate?: IngredientCreateOrConnectWithoutRecipesInput
    connect?: IngredientWhereUniqueInput
  }

  export type RecipeUpdateOneRequiredWithoutIngredientsNestedInput = {
    create?: XOR<RecipeCreateWithoutIngredientsInput, RecipeUncheckedCreateWithoutIngredientsInput>
    connectOrCreate?: RecipeCreateOrConnectWithoutIngredientsInput
    upsert?: RecipeUpsertWithoutIngredientsInput
    connect?: RecipeWhereUniqueInput
    update?: XOR<XOR<RecipeUpdateToOneWithWhereWithoutIngredientsInput, RecipeUpdateWithoutIngredientsInput>, RecipeUncheckedUpdateWithoutIngredientsInput>
  }

  export type IngredientUpdateOneRequiredWithoutRecipesNestedInput = {
    create?: XOR<IngredientCreateWithoutRecipesInput, IngredientUncheckedCreateWithoutRecipesInput>
    connectOrCreate?: IngredientCreateOrConnectWithoutRecipesInput
    upsert?: IngredientUpsertWithoutRecipesInput
    connect?: IngredientWhereUniqueInput
    update?: XOR<XOR<IngredientUpdateToOneWithWhereWithoutRecipesInput, IngredientUpdateWithoutRecipesInput>, IngredientUncheckedUpdateWithoutRecipesInput>
  }

  export type RecipeCreateNestedOneWithoutInstructionsInput = {
    create?: XOR<RecipeCreateWithoutInstructionsInput, RecipeUncheckedCreateWithoutInstructionsInput>
    connectOrCreate?: RecipeCreateOrConnectWithoutInstructionsInput
    connect?: RecipeWhereUniqueInput
  }

  export type RecipeUpdateOneRequiredWithoutInstructionsNestedInput = {
    create?: XOR<RecipeCreateWithoutInstructionsInput, RecipeUncheckedCreateWithoutInstructionsInput>
    connectOrCreate?: RecipeCreateOrConnectWithoutInstructionsInput
    upsert?: RecipeUpsertWithoutInstructionsInput
    connect?: RecipeWhereUniqueInput
    update?: XOR<XOR<RecipeUpdateToOneWithWhereWithoutInstructionsInput, RecipeUpdateWithoutInstructionsInput>, RecipeUncheckedUpdateWithoutInstructionsInput>
  }

  export type BlogPostCreatetagsInput = {
    set: string[]
  }

  export type BlogPostUpdatetagsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type WorkoutCreateNestedOneWithoutScheduledEventsInput = {
    create?: XOR<WorkoutCreateWithoutScheduledEventsInput, WorkoutUncheckedCreateWithoutScheduledEventsInput>
    connectOrCreate?: WorkoutCreateOrConnectWithoutScheduledEventsInput
    connect?: WorkoutWhereUniqueInput
  }

  export type MeditationSessionCreateNestedOneWithoutScheduledEventsInput = {
    create?: XOR<MeditationSessionCreateWithoutScheduledEventsInput, MeditationSessionUncheckedCreateWithoutScheduledEventsInput>
    connectOrCreate?: MeditationSessionCreateOrConnectWithoutScheduledEventsInput
    connect?: MeditationSessionWhereUniqueInput
  }

  export type YogaSessionCreateNestedOneWithoutScheduledEventsInput = {
    create?: XOR<YogaSessionCreateWithoutScheduledEventsInput, YogaSessionUncheckedCreateWithoutScheduledEventsInput>
    connectOrCreate?: YogaSessionCreateOrConnectWithoutScheduledEventsInput
    connect?: YogaSessionWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutScheduledEventsInput = {
    create?: XOR<UserCreateWithoutScheduledEventsInput, UserUncheckedCreateWithoutScheduledEventsInput>
    connectOrCreate?: UserCreateOrConnectWithoutScheduledEventsInput
    connect?: UserWhereUniqueInput
  }

  export type WorkoutUpdateOneWithoutScheduledEventsNestedInput = {
    create?: XOR<WorkoutCreateWithoutScheduledEventsInput, WorkoutUncheckedCreateWithoutScheduledEventsInput>
    connectOrCreate?: WorkoutCreateOrConnectWithoutScheduledEventsInput
    upsert?: WorkoutUpsertWithoutScheduledEventsInput
    disconnect?: WorkoutWhereInput | boolean
    delete?: WorkoutWhereInput | boolean
    connect?: WorkoutWhereUniqueInput
    update?: XOR<XOR<WorkoutUpdateToOneWithWhereWithoutScheduledEventsInput, WorkoutUpdateWithoutScheduledEventsInput>, WorkoutUncheckedUpdateWithoutScheduledEventsInput>
  }

  export type MeditationSessionUpdateOneWithoutScheduledEventsNestedInput = {
    create?: XOR<MeditationSessionCreateWithoutScheduledEventsInput, MeditationSessionUncheckedCreateWithoutScheduledEventsInput>
    connectOrCreate?: MeditationSessionCreateOrConnectWithoutScheduledEventsInput
    upsert?: MeditationSessionUpsertWithoutScheduledEventsInput
    disconnect?: MeditationSessionWhereInput | boolean
    delete?: MeditationSessionWhereInput | boolean
    connect?: MeditationSessionWhereUniqueInput
    update?: XOR<XOR<MeditationSessionUpdateToOneWithWhereWithoutScheduledEventsInput, MeditationSessionUpdateWithoutScheduledEventsInput>, MeditationSessionUncheckedUpdateWithoutScheduledEventsInput>
  }

  export type YogaSessionUpdateOneWithoutScheduledEventsNestedInput = {
    create?: XOR<YogaSessionCreateWithoutScheduledEventsInput, YogaSessionUncheckedCreateWithoutScheduledEventsInput>
    connectOrCreate?: YogaSessionCreateOrConnectWithoutScheduledEventsInput
    upsert?: YogaSessionUpsertWithoutScheduledEventsInput
    disconnect?: YogaSessionWhereInput | boolean
    delete?: YogaSessionWhereInput | boolean
    connect?: YogaSessionWhereUniqueInput
    update?: XOR<XOR<YogaSessionUpdateToOneWithWhereWithoutScheduledEventsInput, YogaSessionUpdateWithoutScheduledEventsInput>, YogaSessionUncheckedUpdateWithoutScheduledEventsInput>
  }

  export type UserUpdateOneRequiredWithoutScheduledEventsNestedInput = {
    create?: XOR<UserCreateWithoutScheduledEventsInput, UserUncheckedCreateWithoutScheduledEventsInput>
    connectOrCreate?: UserCreateOrConnectWithoutScheduledEventsInput
    upsert?: UserUpsertWithoutScheduledEventsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutScheduledEventsInput, UserUpdateWithoutScheduledEventsInput>, UserUncheckedUpdateWithoutScheduledEventsInput>
  }

  export type UserCreateNestedOneWithoutWorkoutHistoryInput = {
    create?: XOR<UserCreateWithoutWorkoutHistoryInput, UserUncheckedCreateWithoutWorkoutHistoryInput>
    connectOrCreate?: UserCreateOrConnectWithoutWorkoutHistoryInput
    connect?: UserWhereUniqueInput
  }

  export type WorkoutCreateNestedOneWithoutWorkoutHistoryInput = {
    create?: XOR<WorkoutCreateWithoutWorkoutHistoryInput, WorkoutUncheckedCreateWithoutWorkoutHistoryInput>
    connectOrCreate?: WorkoutCreateOrConnectWithoutWorkoutHistoryInput
    connect?: WorkoutWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutWorkoutHistoryNestedInput = {
    create?: XOR<UserCreateWithoutWorkoutHistoryInput, UserUncheckedCreateWithoutWorkoutHistoryInput>
    connectOrCreate?: UserCreateOrConnectWithoutWorkoutHistoryInput
    upsert?: UserUpsertWithoutWorkoutHistoryInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWorkoutHistoryInput, UserUpdateWithoutWorkoutHistoryInput>, UserUncheckedUpdateWithoutWorkoutHistoryInput>
  }

  export type WorkoutUpdateOneRequiredWithoutWorkoutHistoryNestedInput = {
    create?: XOR<WorkoutCreateWithoutWorkoutHistoryInput, WorkoutUncheckedCreateWithoutWorkoutHistoryInput>
    connectOrCreate?: WorkoutCreateOrConnectWithoutWorkoutHistoryInput
    upsert?: WorkoutUpsertWithoutWorkoutHistoryInput
    connect?: WorkoutWhereUniqueInput
    update?: XOR<XOR<WorkoutUpdateToOneWithWhereWithoutWorkoutHistoryInput, WorkoutUpdateWithoutWorkoutHistoryInput>, WorkoutUncheckedUpdateWithoutWorkoutHistoryInput>
  }

  export type UserCreateNestedOneWithoutFavoriteWorkoutsInput = {
    create?: XOR<UserCreateWithoutFavoriteWorkoutsInput, UserUncheckedCreateWithoutFavoriteWorkoutsInput>
    connectOrCreate?: UserCreateOrConnectWithoutFavoriteWorkoutsInput
    connect?: UserWhereUniqueInput
  }

  export type WorkoutCreateNestedOneWithoutFavoriteByInput = {
    create?: XOR<WorkoutCreateWithoutFavoriteByInput, WorkoutUncheckedCreateWithoutFavoriteByInput>
    connectOrCreate?: WorkoutCreateOrConnectWithoutFavoriteByInput
    connect?: WorkoutWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutFavoriteWorkoutsNestedInput = {
    create?: XOR<UserCreateWithoutFavoriteWorkoutsInput, UserUncheckedCreateWithoutFavoriteWorkoutsInput>
    connectOrCreate?: UserCreateOrConnectWithoutFavoriteWorkoutsInput
    upsert?: UserUpsertWithoutFavoriteWorkoutsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFavoriteWorkoutsInput, UserUpdateWithoutFavoriteWorkoutsInput>, UserUncheckedUpdateWithoutFavoriteWorkoutsInput>
  }

  export type WorkoutUpdateOneRequiredWithoutFavoriteByNestedInput = {
    create?: XOR<WorkoutCreateWithoutFavoriteByInput, WorkoutUncheckedCreateWithoutFavoriteByInput>
    connectOrCreate?: WorkoutCreateOrConnectWithoutFavoriteByInput
    upsert?: WorkoutUpsertWithoutFavoriteByInput
    connect?: WorkoutWhereUniqueInput
    update?: XOR<XOR<WorkoutUpdateToOneWithWhereWithoutFavoriteByInput, WorkoutUpdateWithoutFavoriteByInput>, WorkoutUncheckedUpdateWithoutFavoriteByInput>
  }

  export type UserCreateNestedOneWithoutFavoriteMeditationsInput = {
    create?: XOR<UserCreateWithoutFavoriteMeditationsInput, UserUncheckedCreateWithoutFavoriteMeditationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutFavoriteMeditationsInput
    connect?: UserWhereUniqueInput
  }

  export type MeditationSessionCreateNestedOneWithoutFavoriteByInput = {
    create?: XOR<MeditationSessionCreateWithoutFavoriteByInput, MeditationSessionUncheckedCreateWithoutFavoriteByInput>
    connectOrCreate?: MeditationSessionCreateOrConnectWithoutFavoriteByInput
    connect?: MeditationSessionWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutFavoriteMeditationsNestedInput = {
    create?: XOR<UserCreateWithoutFavoriteMeditationsInput, UserUncheckedCreateWithoutFavoriteMeditationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutFavoriteMeditationsInput
    upsert?: UserUpsertWithoutFavoriteMeditationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFavoriteMeditationsInput, UserUpdateWithoutFavoriteMeditationsInput>, UserUncheckedUpdateWithoutFavoriteMeditationsInput>
  }

  export type MeditationSessionUpdateOneRequiredWithoutFavoriteByNestedInput = {
    create?: XOR<MeditationSessionCreateWithoutFavoriteByInput, MeditationSessionUncheckedCreateWithoutFavoriteByInput>
    connectOrCreate?: MeditationSessionCreateOrConnectWithoutFavoriteByInput
    upsert?: MeditationSessionUpsertWithoutFavoriteByInput
    connect?: MeditationSessionWhereUniqueInput
    update?: XOR<XOR<MeditationSessionUpdateToOneWithWhereWithoutFavoriteByInput, MeditationSessionUpdateWithoutFavoriteByInput>, MeditationSessionUncheckedUpdateWithoutFavoriteByInput>
  }

  export type UserCreateNestedOneWithoutFavoriteYogaSessionsInput = {
    create?: XOR<UserCreateWithoutFavoriteYogaSessionsInput, UserUncheckedCreateWithoutFavoriteYogaSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutFavoriteYogaSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type YogaSessionCreateNestedOneWithoutFavoriteByInput = {
    create?: XOR<YogaSessionCreateWithoutFavoriteByInput, YogaSessionUncheckedCreateWithoutFavoriteByInput>
    connectOrCreate?: YogaSessionCreateOrConnectWithoutFavoriteByInput
    connect?: YogaSessionWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutFavoriteYogaSessionsNestedInput = {
    create?: XOR<UserCreateWithoutFavoriteYogaSessionsInput, UserUncheckedCreateWithoutFavoriteYogaSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutFavoriteYogaSessionsInput
    upsert?: UserUpsertWithoutFavoriteYogaSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFavoriteYogaSessionsInput, UserUpdateWithoutFavoriteYogaSessionsInput>, UserUncheckedUpdateWithoutFavoriteYogaSessionsInput>
  }

  export type YogaSessionUpdateOneRequiredWithoutFavoriteByNestedInput = {
    create?: XOR<YogaSessionCreateWithoutFavoriteByInput, YogaSessionUncheckedCreateWithoutFavoriteByInput>
    connectOrCreate?: YogaSessionCreateOrConnectWithoutFavoriteByInput
    upsert?: YogaSessionUpsertWithoutFavoriteByInput
    connect?: YogaSessionWhereUniqueInput
    update?: XOR<XOR<YogaSessionUpdateToOneWithWhereWithoutFavoriteByInput, YogaSessionUpdateWithoutFavoriteByInput>, YogaSessionUncheckedUpdateWithoutFavoriteByInput>
  }

  export type UserCreateNestedOneWithoutFavoriteRecipesInput = {
    create?: XOR<UserCreateWithoutFavoriteRecipesInput, UserUncheckedCreateWithoutFavoriteRecipesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFavoriteRecipesInput
    connect?: UserWhereUniqueInput
  }

  export type RecipeCreateNestedOneWithoutFavoriteByInput = {
    create?: XOR<RecipeCreateWithoutFavoriteByInput, RecipeUncheckedCreateWithoutFavoriteByInput>
    connectOrCreate?: RecipeCreateOrConnectWithoutFavoriteByInput
    connect?: RecipeWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutFavoriteRecipesNestedInput = {
    create?: XOR<UserCreateWithoutFavoriteRecipesInput, UserUncheckedCreateWithoutFavoriteRecipesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFavoriteRecipesInput
    upsert?: UserUpsertWithoutFavoriteRecipesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFavoriteRecipesInput, UserUpdateWithoutFavoriteRecipesInput>, UserUncheckedUpdateWithoutFavoriteRecipesInput>
  }

  export type RecipeUpdateOneRequiredWithoutFavoriteByNestedInput = {
    create?: XOR<RecipeCreateWithoutFavoriteByInput, RecipeUncheckedCreateWithoutFavoriteByInput>
    connectOrCreate?: RecipeCreateOrConnectWithoutFavoriteByInput
    upsert?: RecipeUpsertWithoutFavoriteByInput
    connect?: RecipeWhereUniqueInput
    update?: XOR<XOR<RecipeUpdateToOneWithWhereWithoutFavoriteByInput, RecipeUpdateWithoutFavoriteByInput>, RecipeUncheckedUpdateWithoutFavoriteByInput>
  }

  export type UserCreateNestedOneWithoutWeightHistoryInput = {
    create?: XOR<UserCreateWithoutWeightHistoryInput, UserUncheckedCreateWithoutWeightHistoryInput>
    connectOrCreate?: UserCreateOrConnectWithoutWeightHistoryInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutWeightHistoryNestedInput = {
    create?: XOR<UserCreateWithoutWeightHistoryInput, UserUncheckedCreateWithoutWeightHistoryInput>
    connectOrCreate?: UserCreateOrConnectWithoutWeightHistoryInput
    upsert?: UserUpsertWithoutWeightHistoryInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWeightHistoryInput, UserUpdateWithoutWeightHistoryInput>, UserUncheckedUpdateWithoutWeightHistoryInput>
  }

  export type UserAchievementCreateNestedManyWithoutAchievementInput = {
    create?: XOR<UserAchievementCreateWithoutAchievementInput, UserAchievementUncheckedCreateWithoutAchievementInput> | UserAchievementCreateWithoutAchievementInput[] | UserAchievementUncheckedCreateWithoutAchievementInput[]
    connectOrCreate?: UserAchievementCreateOrConnectWithoutAchievementInput | UserAchievementCreateOrConnectWithoutAchievementInput[]
    createMany?: UserAchievementCreateManyAchievementInputEnvelope
    connect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
  }

  export type UserAchievementUncheckedCreateNestedManyWithoutAchievementInput = {
    create?: XOR<UserAchievementCreateWithoutAchievementInput, UserAchievementUncheckedCreateWithoutAchievementInput> | UserAchievementCreateWithoutAchievementInput[] | UserAchievementUncheckedCreateWithoutAchievementInput[]
    connectOrCreate?: UserAchievementCreateOrConnectWithoutAchievementInput | UserAchievementCreateOrConnectWithoutAchievementInput[]
    createMany?: UserAchievementCreateManyAchievementInputEnvelope
    connect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
  }

  export type UserAchievementUpdateManyWithoutAchievementNestedInput = {
    create?: XOR<UserAchievementCreateWithoutAchievementInput, UserAchievementUncheckedCreateWithoutAchievementInput> | UserAchievementCreateWithoutAchievementInput[] | UserAchievementUncheckedCreateWithoutAchievementInput[]
    connectOrCreate?: UserAchievementCreateOrConnectWithoutAchievementInput | UserAchievementCreateOrConnectWithoutAchievementInput[]
    upsert?: UserAchievementUpsertWithWhereUniqueWithoutAchievementInput | UserAchievementUpsertWithWhereUniqueWithoutAchievementInput[]
    createMany?: UserAchievementCreateManyAchievementInputEnvelope
    set?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    disconnect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    delete?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    connect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    update?: UserAchievementUpdateWithWhereUniqueWithoutAchievementInput | UserAchievementUpdateWithWhereUniqueWithoutAchievementInput[]
    updateMany?: UserAchievementUpdateManyWithWhereWithoutAchievementInput | UserAchievementUpdateManyWithWhereWithoutAchievementInput[]
    deleteMany?: UserAchievementScalarWhereInput | UserAchievementScalarWhereInput[]
  }

  export type UserAchievementUncheckedUpdateManyWithoutAchievementNestedInput = {
    create?: XOR<UserAchievementCreateWithoutAchievementInput, UserAchievementUncheckedCreateWithoutAchievementInput> | UserAchievementCreateWithoutAchievementInput[] | UserAchievementUncheckedCreateWithoutAchievementInput[]
    connectOrCreate?: UserAchievementCreateOrConnectWithoutAchievementInput | UserAchievementCreateOrConnectWithoutAchievementInput[]
    upsert?: UserAchievementUpsertWithWhereUniqueWithoutAchievementInput | UserAchievementUpsertWithWhereUniqueWithoutAchievementInput[]
    createMany?: UserAchievementCreateManyAchievementInputEnvelope
    set?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    disconnect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    delete?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    connect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    update?: UserAchievementUpdateWithWhereUniqueWithoutAchievementInput | UserAchievementUpdateWithWhereUniqueWithoutAchievementInput[]
    updateMany?: UserAchievementUpdateManyWithWhereWithoutAchievementInput | UserAchievementUpdateManyWithWhereWithoutAchievementInput[]
    deleteMany?: UserAchievementScalarWhereInput | UserAchievementScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutAchievementsInput = {
    create?: XOR<UserCreateWithoutAchievementsInput, UserUncheckedCreateWithoutAchievementsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAchievementsInput
    connect?: UserWhereUniqueInput
  }

  export type AchievementCreateNestedOneWithoutUsersInput = {
    create?: XOR<AchievementCreateWithoutUsersInput, AchievementUncheckedCreateWithoutUsersInput>
    connectOrCreate?: AchievementCreateOrConnectWithoutUsersInput
    connect?: AchievementWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAchievementsNestedInput = {
    create?: XOR<UserCreateWithoutAchievementsInput, UserUncheckedCreateWithoutAchievementsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAchievementsInput
    upsert?: UserUpsertWithoutAchievementsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAchievementsInput, UserUpdateWithoutAchievementsInput>, UserUncheckedUpdateWithoutAchievementsInput>
  }

  export type AchievementUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<AchievementCreateWithoutUsersInput, AchievementUncheckedCreateWithoutUsersInput>
    connectOrCreate?: AchievementCreateOrConnectWithoutUsersInput
    upsert?: AchievementUpsertWithoutUsersInput
    connect?: AchievementWhereUniqueInput
    update?: XOR<XOR<AchievementUpdateToOneWithWhereWithoutUsersInput, AchievementUpdateWithoutUsersInput>, AchievementUncheckedUpdateWithoutUsersInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type WorkoutHistoryCreateWithoutUserInput = {
    id?: string
    completedAt?: Date | string
    duration: number
    notes?: string | null
    rating?: number | null
    exerciseResults?: NullableJsonNullValueInput | InputJsonValue
    workout: WorkoutCreateNestedOneWithoutWorkoutHistoryInput
  }

  export type WorkoutHistoryUncheckedCreateWithoutUserInput = {
    id?: string
    workoutId: number
    completedAt?: Date | string
    duration: number
    notes?: string | null
    rating?: number | null
    exerciseResults?: NullableJsonNullValueInput | InputJsonValue
  }

  export type WorkoutHistoryCreateOrConnectWithoutUserInput = {
    where: WorkoutHistoryWhereUniqueInput
    create: XOR<WorkoutHistoryCreateWithoutUserInput, WorkoutHistoryUncheckedCreateWithoutUserInput>
  }

  export type WorkoutHistoryCreateManyUserInputEnvelope = {
    data: WorkoutHistoryCreateManyUserInput | WorkoutHistoryCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FavoriteWorkoutCreateWithoutUserInput = {
    id?: string
    addedAt?: Date | string
    workout: WorkoutCreateNestedOneWithoutFavoriteByInput
  }

  export type FavoriteWorkoutUncheckedCreateWithoutUserInput = {
    id?: string
    workoutId: number
    addedAt?: Date | string
  }

  export type FavoriteWorkoutCreateOrConnectWithoutUserInput = {
    where: FavoriteWorkoutWhereUniqueInput
    create: XOR<FavoriteWorkoutCreateWithoutUserInput, FavoriteWorkoutUncheckedCreateWithoutUserInput>
  }

  export type FavoriteWorkoutCreateManyUserInputEnvelope = {
    data: FavoriteWorkoutCreateManyUserInput | FavoriteWorkoutCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FavoriteMeditationCreateWithoutUserInput = {
    id?: string
    addedAt?: Date | string
    meditation: MeditationSessionCreateNestedOneWithoutFavoriteByInput
  }

  export type FavoriteMeditationUncheckedCreateWithoutUserInput = {
    id?: string
    meditationId: number
    addedAt?: Date | string
  }

  export type FavoriteMeditationCreateOrConnectWithoutUserInput = {
    where: FavoriteMeditationWhereUniqueInput
    create: XOR<FavoriteMeditationCreateWithoutUserInput, FavoriteMeditationUncheckedCreateWithoutUserInput>
  }

  export type FavoriteMeditationCreateManyUserInputEnvelope = {
    data: FavoriteMeditationCreateManyUserInput | FavoriteMeditationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FavoriteYogaSessionCreateWithoutUserInput = {
    id?: string
    addedAt?: Date | string
    yoga: YogaSessionCreateNestedOneWithoutFavoriteByInput
  }

  export type FavoriteYogaSessionUncheckedCreateWithoutUserInput = {
    id?: string
    yogaId: number
    addedAt?: Date | string
  }

  export type FavoriteYogaSessionCreateOrConnectWithoutUserInput = {
    where: FavoriteYogaSessionWhereUniqueInput
    create: XOR<FavoriteYogaSessionCreateWithoutUserInput, FavoriteYogaSessionUncheckedCreateWithoutUserInput>
  }

  export type FavoriteYogaSessionCreateManyUserInputEnvelope = {
    data: FavoriteYogaSessionCreateManyUserInput | FavoriteYogaSessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FavoriteRecipeCreateWithoutUserInput = {
    id?: string
    addedAt?: Date | string
    recipe: RecipeCreateNestedOneWithoutFavoriteByInput
  }

  export type FavoriteRecipeUncheckedCreateWithoutUserInput = {
    id?: string
    recipeId: number
    addedAt?: Date | string
  }

  export type FavoriteRecipeCreateOrConnectWithoutUserInput = {
    where: FavoriteRecipeWhereUniqueInput
    create: XOR<FavoriteRecipeCreateWithoutUserInput, FavoriteRecipeUncheckedCreateWithoutUserInput>
  }

  export type FavoriteRecipeCreateManyUserInputEnvelope = {
    data: FavoriteRecipeCreateManyUserInput | FavoriteRecipeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ScheduledEventCreateWithoutUserInput = {
    id?: string
    title: string
    date: Date | string
    time: string
    duration: number
    eventType: string
    completed?: boolean
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workout?: WorkoutCreateNestedOneWithoutScheduledEventsInput
    meditation?: MeditationSessionCreateNestedOneWithoutScheduledEventsInput
    yoga?: YogaSessionCreateNestedOneWithoutScheduledEventsInput
  }

  export type ScheduledEventUncheckedCreateWithoutUserInput = {
    id?: string
    title: string
    date: Date | string
    time: string
    duration: number
    eventType: string
    completed?: boolean
    notes?: string | null
    workoutId?: number | null
    meditationId?: number | null
    yogaId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScheduledEventCreateOrConnectWithoutUserInput = {
    where: ScheduledEventWhereUniqueInput
    create: XOR<ScheduledEventCreateWithoutUserInput, ScheduledEventUncheckedCreateWithoutUserInput>
  }

  export type ScheduledEventCreateManyUserInputEnvelope = {
    data: ScheduledEventCreateManyUserInput | ScheduledEventCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type WeightHistoryCreateWithoutUserInput = {
    id?: string
    weight: number
    date?: Date | string
    notes?: string | null
  }

  export type WeightHistoryUncheckedCreateWithoutUserInput = {
    id?: string
    weight: number
    date?: Date | string
    notes?: string | null
  }

  export type WeightHistoryCreateOrConnectWithoutUserInput = {
    where: WeightHistoryWhereUniqueInput
    create: XOR<WeightHistoryCreateWithoutUserInput, WeightHistoryUncheckedCreateWithoutUserInput>
  }

  export type WeightHistoryCreateManyUserInputEnvelope = {
    data: WeightHistoryCreateManyUserInput | WeightHistoryCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserAchievementCreateWithoutUserInput = {
    id?: string
    achievedAt?: Date | string
    achievement: AchievementCreateNestedOneWithoutUsersInput
  }

  export type UserAchievementUncheckedCreateWithoutUserInput = {
    id?: string
    achievementId: string
    achievedAt?: Date | string
  }

  export type UserAchievementCreateOrConnectWithoutUserInput = {
    where: UserAchievementWhereUniqueInput
    create: XOR<UserAchievementCreateWithoutUserInput, UserAchievementUncheckedCreateWithoutUserInput>
  }

  export type UserAchievementCreateManyUserInputEnvelope = {
    data: UserAchievementCreateManyUserInput | UserAchievementCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserSettingsCreateWithoutUserInput = {
    id?: string
    notificationsEnabled?: boolean
    emailNotifications?: boolean
    darkMode?: boolean
    language?: string
    measurementUnit?: string
    privacySettings?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserSettingsUncheckedCreateWithoutUserInput = {
    id?: string
    notificationsEnabled?: boolean
    emailNotifications?: boolean
    darkMode?: boolean
    language?: string
    measurementUnit?: string
    privacySettings?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserSettingsCreateOrConnectWithoutUserInput = {
    where: UserSettingsWhereUniqueInput
    create: XOR<UserSettingsCreateWithoutUserInput, UserSettingsUncheckedCreateWithoutUserInput>
  }

  export type WorkoutHistoryUpsertWithWhereUniqueWithoutUserInput = {
    where: WorkoutHistoryWhereUniqueInput
    update: XOR<WorkoutHistoryUpdateWithoutUserInput, WorkoutHistoryUncheckedUpdateWithoutUserInput>
    create: XOR<WorkoutHistoryCreateWithoutUserInput, WorkoutHistoryUncheckedCreateWithoutUserInput>
  }

  export type WorkoutHistoryUpdateWithWhereUniqueWithoutUserInput = {
    where: WorkoutHistoryWhereUniqueInput
    data: XOR<WorkoutHistoryUpdateWithoutUserInput, WorkoutHistoryUncheckedUpdateWithoutUserInput>
  }

  export type WorkoutHistoryUpdateManyWithWhereWithoutUserInput = {
    where: WorkoutHistoryScalarWhereInput
    data: XOR<WorkoutHistoryUpdateManyMutationInput, WorkoutHistoryUncheckedUpdateManyWithoutUserInput>
  }

  export type WorkoutHistoryScalarWhereInput = {
    AND?: WorkoutHistoryScalarWhereInput | WorkoutHistoryScalarWhereInput[]
    OR?: WorkoutHistoryScalarWhereInput[]
    NOT?: WorkoutHistoryScalarWhereInput | WorkoutHistoryScalarWhereInput[]
    id?: StringFilter<"WorkoutHistory"> | string
    userId?: StringFilter<"WorkoutHistory"> | string
    workoutId?: IntFilter<"WorkoutHistory"> | number
    completedAt?: DateTimeFilter<"WorkoutHistory"> | Date | string
    duration?: IntFilter<"WorkoutHistory"> | number
    notes?: StringNullableFilter<"WorkoutHistory"> | string | null
    rating?: IntNullableFilter<"WorkoutHistory"> | number | null
    exerciseResults?: JsonNullableFilter<"WorkoutHistory">
  }

  export type FavoriteWorkoutUpsertWithWhereUniqueWithoutUserInput = {
    where: FavoriteWorkoutWhereUniqueInput
    update: XOR<FavoriteWorkoutUpdateWithoutUserInput, FavoriteWorkoutUncheckedUpdateWithoutUserInput>
    create: XOR<FavoriteWorkoutCreateWithoutUserInput, FavoriteWorkoutUncheckedCreateWithoutUserInput>
  }

  export type FavoriteWorkoutUpdateWithWhereUniqueWithoutUserInput = {
    where: FavoriteWorkoutWhereUniqueInput
    data: XOR<FavoriteWorkoutUpdateWithoutUserInput, FavoriteWorkoutUncheckedUpdateWithoutUserInput>
  }

  export type FavoriteWorkoutUpdateManyWithWhereWithoutUserInput = {
    where: FavoriteWorkoutScalarWhereInput
    data: XOR<FavoriteWorkoutUpdateManyMutationInput, FavoriteWorkoutUncheckedUpdateManyWithoutUserInput>
  }

  export type FavoriteWorkoutScalarWhereInput = {
    AND?: FavoriteWorkoutScalarWhereInput | FavoriteWorkoutScalarWhereInput[]
    OR?: FavoriteWorkoutScalarWhereInput[]
    NOT?: FavoriteWorkoutScalarWhereInput | FavoriteWorkoutScalarWhereInput[]
    id?: StringFilter<"FavoriteWorkout"> | string
    userId?: StringFilter<"FavoriteWorkout"> | string
    workoutId?: IntFilter<"FavoriteWorkout"> | number
    addedAt?: DateTimeFilter<"FavoriteWorkout"> | Date | string
  }

  export type FavoriteMeditationUpsertWithWhereUniqueWithoutUserInput = {
    where: FavoriteMeditationWhereUniqueInput
    update: XOR<FavoriteMeditationUpdateWithoutUserInput, FavoriteMeditationUncheckedUpdateWithoutUserInput>
    create: XOR<FavoriteMeditationCreateWithoutUserInput, FavoriteMeditationUncheckedCreateWithoutUserInput>
  }

  export type FavoriteMeditationUpdateWithWhereUniqueWithoutUserInput = {
    where: FavoriteMeditationWhereUniqueInput
    data: XOR<FavoriteMeditationUpdateWithoutUserInput, FavoriteMeditationUncheckedUpdateWithoutUserInput>
  }

  export type FavoriteMeditationUpdateManyWithWhereWithoutUserInput = {
    where: FavoriteMeditationScalarWhereInput
    data: XOR<FavoriteMeditationUpdateManyMutationInput, FavoriteMeditationUncheckedUpdateManyWithoutUserInput>
  }

  export type FavoriteMeditationScalarWhereInput = {
    AND?: FavoriteMeditationScalarWhereInput | FavoriteMeditationScalarWhereInput[]
    OR?: FavoriteMeditationScalarWhereInput[]
    NOT?: FavoriteMeditationScalarWhereInput | FavoriteMeditationScalarWhereInput[]
    id?: StringFilter<"FavoriteMeditation"> | string
    userId?: StringFilter<"FavoriteMeditation"> | string
    meditationId?: IntFilter<"FavoriteMeditation"> | number
    addedAt?: DateTimeFilter<"FavoriteMeditation"> | Date | string
  }

  export type FavoriteYogaSessionUpsertWithWhereUniqueWithoutUserInput = {
    where: FavoriteYogaSessionWhereUniqueInput
    update: XOR<FavoriteYogaSessionUpdateWithoutUserInput, FavoriteYogaSessionUncheckedUpdateWithoutUserInput>
    create: XOR<FavoriteYogaSessionCreateWithoutUserInput, FavoriteYogaSessionUncheckedCreateWithoutUserInput>
  }

  export type FavoriteYogaSessionUpdateWithWhereUniqueWithoutUserInput = {
    where: FavoriteYogaSessionWhereUniqueInput
    data: XOR<FavoriteYogaSessionUpdateWithoutUserInput, FavoriteYogaSessionUncheckedUpdateWithoutUserInput>
  }

  export type FavoriteYogaSessionUpdateManyWithWhereWithoutUserInput = {
    where: FavoriteYogaSessionScalarWhereInput
    data: XOR<FavoriteYogaSessionUpdateManyMutationInput, FavoriteYogaSessionUncheckedUpdateManyWithoutUserInput>
  }

  export type FavoriteYogaSessionScalarWhereInput = {
    AND?: FavoriteYogaSessionScalarWhereInput | FavoriteYogaSessionScalarWhereInput[]
    OR?: FavoriteYogaSessionScalarWhereInput[]
    NOT?: FavoriteYogaSessionScalarWhereInput | FavoriteYogaSessionScalarWhereInput[]
    id?: StringFilter<"FavoriteYogaSession"> | string
    userId?: StringFilter<"FavoriteYogaSession"> | string
    yogaId?: IntFilter<"FavoriteYogaSession"> | number
    addedAt?: DateTimeFilter<"FavoriteYogaSession"> | Date | string
  }

  export type FavoriteRecipeUpsertWithWhereUniqueWithoutUserInput = {
    where: FavoriteRecipeWhereUniqueInput
    update: XOR<FavoriteRecipeUpdateWithoutUserInput, FavoriteRecipeUncheckedUpdateWithoutUserInput>
    create: XOR<FavoriteRecipeCreateWithoutUserInput, FavoriteRecipeUncheckedCreateWithoutUserInput>
  }

  export type FavoriteRecipeUpdateWithWhereUniqueWithoutUserInput = {
    where: FavoriteRecipeWhereUniqueInput
    data: XOR<FavoriteRecipeUpdateWithoutUserInput, FavoriteRecipeUncheckedUpdateWithoutUserInput>
  }

  export type FavoriteRecipeUpdateManyWithWhereWithoutUserInput = {
    where: FavoriteRecipeScalarWhereInput
    data: XOR<FavoriteRecipeUpdateManyMutationInput, FavoriteRecipeUncheckedUpdateManyWithoutUserInput>
  }

  export type FavoriteRecipeScalarWhereInput = {
    AND?: FavoriteRecipeScalarWhereInput | FavoriteRecipeScalarWhereInput[]
    OR?: FavoriteRecipeScalarWhereInput[]
    NOT?: FavoriteRecipeScalarWhereInput | FavoriteRecipeScalarWhereInput[]
    id?: StringFilter<"FavoriteRecipe"> | string
    userId?: StringFilter<"FavoriteRecipe"> | string
    recipeId?: IntFilter<"FavoriteRecipe"> | number
    addedAt?: DateTimeFilter<"FavoriteRecipe"> | Date | string
  }

  export type ScheduledEventUpsertWithWhereUniqueWithoutUserInput = {
    where: ScheduledEventWhereUniqueInput
    update: XOR<ScheduledEventUpdateWithoutUserInput, ScheduledEventUncheckedUpdateWithoutUserInput>
    create: XOR<ScheduledEventCreateWithoutUserInput, ScheduledEventUncheckedCreateWithoutUserInput>
  }

  export type ScheduledEventUpdateWithWhereUniqueWithoutUserInput = {
    where: ScheduledEventWhereUniqueInput
    data: XOR<ScheduledEventUpdateWithoutUserInput, ScheduledEventUncheckedUpdateWithoutUserInput>
  }

  export type ScheduledEventUpdateManyWithWhereWithoutUserInput = {
    where: ScheduledEventScalarWhereInput
    data: XOR<ScheduledEventUpdateManyMutationInput, ScheduledEventUncheckedUpdateManyWithoutUserInput>
  }

  export type ScheduledEventScalarWhereInput = {
    AND?: ScheduledEventScalarWhereInput | ScheduledEventScalarWhereInput[]
    OR?: ScheduledEventScalarWhereInput[]
    NOT?: ScheduledEventScalarWhereInput | ScheduledEventScalarWhereInput[]
    id?: StringFilter<"ScheduledEvent"> | string
    userId?: StringFilter<"ScheduledEvent"> | string
    title?: StringFilter<"ScheduledEvent"> | string
    date?: DateTimeFilter<"ScheduledEvent"> | Date | string
    time?: StringFilter<"ScheduledEvent"> | string
    duration?: IntFilter<"ScheduledEvent"> | number
    eventType?: StringFilter<"ScheduledEvent"> | string
    completed?: BoolFilter<"ScheduledEvent"> | boolean
    notes?: StringNullableFilter<"ScheduledEvent"> | string | null
    workoutId?: IntNullableFilter<"ScheduledEvent"> | number | null
    meditationId?: IntNullableFilter<"ScheduledEvent"> | number | null
    yogaId?: IntNullableFilter<"ScheduledEvent"> | number | null
    createdAt?: DateTimeFilter<"ScheduledEvent"> | Date | string
    updatedAt?: DateTimeFilter<"ScheduledEvent"> | Date | string
  }

  export type WeightHistoryUpsertWithWhereUniqueWithoutUserInput = {
    where: WeightHistoryWhereUniqueInput
    update: XOR<WeightHistoryUpdateWithoutUserInput, WeightHistoryUncheckedUpdateWithoutUserInput>
    create: XOR<WeightHistoryCreateWithoutUserInput, WeightHistoryUncheckedCreateWithoutUserInput>
  }

  export type WeightHistoryUpdateWithWhereUniqueWithoutUserInput = {
    where: WeightHistoryWhereUniqueInput
    data: XOR<WeightHistoryUpdateWithoutUserInput, WeightHistoryUncheckedUpdateWithoutUserInput>
  }

  export type WeightHistoryUpdateManyWithWhereWithoutUserInput = {
    where: WeightHistoryScalarWhereInput
    data: XOR<WeightHistoryUpdateManyMutationInput, WeightHistoryUncheckedUpdateManyWithoutUserInput>
  }

  export type WeightHistoryScalarWhereInput = {
    AND?: WeightHistoryScalarWhereInput | WeightHistoryScalarWhereInput[]
    OR?: WeightHistoryScalarWhereInput[]
    NOT?: WeightHistoryScalarWhereInput | WeightHistoryScalarWhereInput[]
    id?: StringFilter<"WeightHistory"> | string
    userId?: StringFilter<"WeightHistory"> | string
    weight?: FloatFilter<"WeightHistory"> | number
    date?: DateTimeFilter<"WeightHistory"> | Date | string
    notes?: StringNullableFilter<"WeightHistory"> | string | null
  }

  export type UserAchievementUpsertWithWhereUniqueWithoutUserInput = {
    where: UserAchievementWhereUniqueInput
    update: XOR<UserAchievementUpdateWithoutUserInput, UserAchievementUncheckedUpdateWithoutUserInput>
    create: XOR<UserAchievementCreateWithoutUserInput, UserAchievementUncheckedCreateWithoutUserInput>
  }

  export type UserAchievementUpdateWithWhereUniqueWithoutUserInput = {
    where: UserAchievementWhereUniqueInput
    data: XOR<UserAchievementUpdateWithoutUserInput, UserAchievementUncheckedUpdateWithoutUserInput>
  }

  export type UserAchievementUpdateManyWithWhereWithoutUserInput = {
    where: UserAchievementScalarWhereInput
    data: XOR<UserAchievementUpdateManyMutationInput, UserAchievementUncheckedUpdateManyWithoutUserInput>
  }

  export type UserAchievementScalarWhereInput = {
    AND?: UserAchievementScalarWhereInput | UserAchievementScalarWhereInput[]
    OR?: UserAchievementScalarWhereInput[]
    NOT?: UserAchievementScalarWhereInput | UserAchievementScalarWhereInput[]
    id?: StringFilter<"UserAchievement"> | string
    userId?: StringFilter<"UserAchievement"> | string
    achievementId?: StringFilter<"UserAchievement"> | string
    achievedAt?: DateTimeFilter<"UserAchievement"> | Date | string
  }

  export type UserSettingsUpsertWithoutUserInput = {
    update: XOR<UserSettingsUpdateWithoutUserInput, UserSettingsUncheckedUpdateWithoutUserInput>
    create: XOR<UserSettingsCreateWithoutUserInput, UserSettingsUncheckedCreateWithoutUserInput>
    where?: UserSettingsWhereInput
  }

  export type UserSettingsUpdateToOneWithWhereWithoutUserInput = {
    where?: UserSettingsWhereInput
    data: XOR<UserSettingsUpdateWithoutUserInput, UserSettingsUncheckedUpdateWithoutUserInput>
  }

  export type UserSettingsUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    notificationsEnabled?: BoolFieldUpdateOperationsInput | boolean
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    darkMode?: BoolFieldUpdateOperationsInput | boolean
    language?: StringFieldUpdateOperationsInput | string
    measurementUnit?: StringFieldUpdateOperationsInput | string
    privacySettings?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserSettingsUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    notificationsEnabled?: BoolFieldUpdateOperationsInput | boolean
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    darkMode?: BoolFieldUpdateOperationsInput | boolean
    language?: StringFieldUpdateOperationsInput | string
    measurementUnit?: StringFieldUpdateOperationsInput | string
    privacySettings?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserCreateWithoutSettingsInput = {
    id?: string
    name?: string | null
    firstName?: string | null
    lastName?: string | null
    username?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    height?: number | null
    weight?: number | null
    goalWeight?: number | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    fitnessLevel?: string | null
    memberSince?: Date | string
    workoutHistory?: WorkoutHistoryCreateNestedManyWithoutUserInput
    favoriteWorkouts?: FavoriteWorkoutCreateNestedManyWithoutUserInput
    favoriteMeditations?: FavoriteMeditationCreateNestedManyWithoutUserInput
    favoriteYogaSessions?: FavoriteYogaSessionCreateNestedManyWithoutUserInput
    favoriteRecipes?: FavoriteRecipeCreateNestedManyWithoutUserInput
    scheduledEvents?: ScheduledEventCreateNestedManyWithoutUserInput
    weightHistory?: WeightHistoryCreateNestedManyWithoutUserInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSettingsInput = {
    id?: string
    name?: string | null
    firstName?: string | null
    lastName?: string | null
    username?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    height?: number | null
    weight?: number | null
    goalWeight?: number | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    fitnessLevel?: string | null
    memberSince?: Date | string
    workoutHistory?: WorkoutHistoryUncheckedCreateNestedManyWithoutUserInput
    favoriteWorkouts?: FavoriteWorkoutUncheckedCreateNestedManyWithoutUserInput
    favoriteMeditations?: FavoriteMeditationUncheckedCreateNestedManyWithoutUserInput
    favoriteYogaSessions?: FavoriteYogaSessionUncheckedCreateNestedManyWithoutUserInput
    favoriteRecipes?: FavoriteRecipeUncheckedCreateNestedManyWithoutUserInput
    scheduledEvents?: ScheduledEventUncheckedCreateNestedManyWithoutUserInput
    weightHistory?: WeightHistoryUncheckedCreateNestedManyWithoutUserInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSettingsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSettingsInput, UserUncheckedCreateWithoutSettingsInput>
  }

  export type UserUpsertWithoutSettingsInput = {
    update: XOR<UserUpdateWithoutSettingsInput, UserUncheckedUpdateWithoutSettingsInput>
    create: XOR<UserCreateWithoutSettingsInput, UserUncheckedCreateWithoutSettingsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSettingsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSettingsInput, UserUncheckedUpdateWithoutSettingsInput>
  }

  export type UserUpdateWithoutSettingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    goalWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    fitnessLevel?: NullableStringFieldUpdateOperationsInput | string | null
    memberSince?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutHistory?: WorkoutHistoryUpdateManyWithoutUserNestedInput
    favoriteWorkouts?: FavoriteWorkoutUpdateManyWithoutUserNestedInput
    favoriteMeditations?: FavoriteMeditationUpdateManyWithoutUserNestedInput
    favoriteYogaSessions?: FavoriteYogaSessionUpdateManyWithoutUserNestedInput
    favoriteRecipes?: FavoriteRecipeUpdateManyWithoutUserNestedInput
    scheduledEvents?: ScheduledEventUpdateManyWithoutUserNestedInput
    weightHistory?: WeightHistoryUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSettingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    goalWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    fitnessLevel?: NullableStringFieldUpdateOperationsInput | string | null
    memberSince?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutHistory?: WorkoutHistoryUncheckedUpdateManyWithoutUserNestedInput
    favoriteWorkouts?: FavoriteWorkoutUncheckedUpdateManyWithoutUserNestedInput
    favoriteMeditations?: FavoriteMeditationUncheckedUpdateManyWithoutUserNestedInput
    favoriteYogaSessions?: FavoriteYogaSessionUncheckedUpdateManyWithoutUserNestedInput
    favoriteRecipes?: FavoriteRecipeUncheckedUpdateManyWithoutUserNestedInput
    scheduledEvents?: ScheduledEventUncheckedUpdateManyWithoutUserNestedInput
    weightHistory?: WeightHistoryUncheckedUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
  }

  export type WorkoutExerciseCreateWithoutWorkoutInput = {
    sets?: number | null
    reps?: string | null
    weight?: number | null
    restTime?: number | null
    notes?: string | null
    order: number
    exercise: ExerciseCreateNestedOneWithoutWorkoutsInput
  }

  export type WorkoutExerciseUncheckedCreateWithoutWorkoutInput = {
    id?: number
    exerciseId: number
    sets?: number | null
    reps?: string | null
    weight?: number | null
    restTime?: number | null
    notes?: string | null
    order: number
  }

  export type WorkoutExerciseCreateOrConnectWithoutWorkoutInput = {
    where: WorkoutExerciseWhereUniqueInput
    create: XOR<WorkoutExerciseCreateWithoutWorkoutInput, WorkoutExerciseUncheckedCreateWithoutWorkoutInput>
  }

  export type WorkoutExerciseCreateManyWorkoutInputEnvelope = {
    data: WorkoutExerciseCreateManyWorkoutInput | WorkoutExerciseCreateManyWorkoutInput[]
    skipDuplicates?: boolean
  }

  export type WorkoutHistoryCreateWithoutWorkoutInput = {
    id?: string
    completedAt?: Date | string
    duration: number
    notes?: string | null
    rating?: number | null
    exerciseResults?: NullableJsonNullValueInput | InputJsonValue
    user: UserCreateNestedOneWithoutWorkoutHistoryInput
  }

  export type WorkoutHistoryUncheckedCreateWithoutWorkoutInput = {
    id?: string
    userId: string
    completedAt?: Date | string
    duration: number
    notes?: string | null
    rating?: number | null
    exerciseResults?: NullableJsonNullValueInput | InputJsonValue
  }

  export type WorkoutHistoryCreateOrConnectWithoutWorkoutInput = {
    where: WorkoutHistoryWhereUniqueInput
    create: XOR<WorkoutHistoryCreateWithoutWorkoutInput, WorkoutHistoryUncheckedCreateWithoutWorkoutInput>
  }

  export type WorkoutHistoryCreateManyWorkoutInputEnvelope = {
    data: WorkoutHistoryCreateManyWorkoutInput | WorkoutHistoryCreateManyWorkoutInput[]
    skipDuplicates?: boolean
  }

  export type FavoriteWorkoutCreateWithoutWorkoutInput = {
    id?: string
    addedAt?: Date | string
    user: UserCreateNestedOneWithoutFavoriteWorkoutsInput
  }

  export type FavoriteWorkoutUncheckedCreateWithoutWorkoutInput = {
    id?: string
    userId: string
    addedAt?: Date | string
  }

  export type FavoriteWorkoutCreateOrConnectWithoutWorkoutInput = {
    where: FavoriteWorkoutWhereUniqueInput
    create: XOR<FavoriteWorkoutCreateWithoutWorkoutInput, FavoriteWorkoutUncheckedCreateWithoutWorkoutInput>
  }

  export type FavoriteWorkoutCreateManyWorkoutInputEnvelope = {
    data: FavoriteWorkoutCreateManyWorkoutInput | FavoriteWorkoutCreateManyWorkoutInput[]
    skipDuplicates?: boolean
  }

  export type ScheduledEventCreateWithoutWorkoutInput = {
    id?: string
    title: string
    date: Date | string
    time: string
    duration: number
    eventType: string
    completed?: boolean
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    meditation?: MeditationSessionCreateNestedOneWithoutScheduledEventsInput
    yoga?: YogaSessionCreateNestedOneWithoutScheduledEventsInput
    user: UserCreateNestedOneWithoutScheduledEventsInput
  }

  export type ScheduledEventUncheckedCreateWithoutWorkoutInput = {
    id?: string
    userId: string
    title: string
    date: Date | string
    time: string
    duration: number
    eventType: string
    completed?: boolean
    notes?: string | null
    meditationId?: number | null
    yogaId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScheduledEventCreateOrConnectWithoutWorkoutInput = {
    where: ScheduledEventWhereUniqueInput
    create: XOR<ScheduledEventCreateWithoutWorkoutInput, ScheduledEventUncheckedCreateWithoutWorkoutInput>
  }

  export type ScheduledEventCreateManyWorkoutInputEnvelope = {
    data: ScheduledEventCreateManyWorkoutInput | ScheduledEventCreateManyWorkoutInput[]
    skipDuplicates?: boolean
  }

  export type WorkoutExerciseUpsertWithWhereUniqueWithoutWorkoutInput = {
    where: WorkoutExerciseWhereUniqueInput
    update: XOR<WorkoutExerciseUpdateWithoutWorkoutInput, WorkoutExerciseUncheckedUpdateWithoutWorkoutInput>
    create: XOR<WorkoutExerciseCreateWithoutWorkoutInput, WorkoutExerciseUncheckedCreateWithoutWorkoutInput>
  }

  export type WorkoutExerciseUpdateWithWhereUniqueWithoutWorkoutInput = {
    where: WorkoutExerciseWhereUniqueInput
    data: XOR<WorkoutExerciseUpdateWithoutWorkoutInput, WorkoutExerciseUncheckedUpdateWithoutWorkoutInput>
  }

  export type WorkoutExerciseUpdateManyWithWhereWithoutWorkoutInput = {
    where: WorkoutExerciseScalarWhereInput
    data: XOR<WorkoutExerciseUpdateManyMutationInput, WorkoutExerciseUncheckedUpdateManyWithoutWorkoutInput>
  }

  export type WorkoutExerciseScalarWhereInput = {
    AND?: WorkoutExerciseScalarWhereInput | WorkoutExerciseScalarWhereInput[]
    OR?: WorkoutExerciseScalarWhereInput[]
    NOT?: WorkoutExerciseScalarWhereInput | WorkoutExerciseScalarWhereInput[]
    id?: IntFilter<"WorkoutExercise"> | number
    workoutId?: IntFilter<"WorkoutExercise"> | number
    exerciseId?: IntFilter<"WorkoutExercise"> | number
    sets?: IntNullableFilter<"WorkoutExercise"> | number | null
    reps?: StringNullableFilter<"WorkoutExercise"> | string | null
    weight?: FloatNullableFilter<"WorkoutExercise"> | number | null
    restTime?: IntNullableFilter<"WorkoutExercise"> | number | null
    notes?: StringNullableFilter<"WorkoutExercise"> | string | null
    order?: IntFilter<"WorkoutExercise"> | number
  }

  export type WorkoutHistoryUpsertWithWhereUniqueWithoutWorkoutInput = {
    where: WorkoutHistoryWhereUniqueInput
    update: XOR<WorkoutHistoryUpdateWithoutWorkoutInput, WorkoutHistoryUncheckedUpdateWithoutWorkoutInput>
    create: XOR<WorkoutHistoryCreateWithoutWorkoutInput, WorkoutHistoryUncheckedCreateWithoutWorkoutInput>
  }

  export type WorkoutHistoryUpdateWithWhereUniqueWithoutWorkoutInput = {
    where: WorkoutHistoryWhereUniqueInput
    data: XOR<WorkoutHistoryUpdateWithoutWorkoutInput, WorkoutHistoryUncheckedUpdateWithoutWorkoutInput>
  }

  export type WorkoutHistoryUpdateManyWithWhereWithoutWorkoutInput = {
    where: WorkoutHistoryScalarWhereInput
    data: XOR<WorkoutHistoryUpdateManyMutationInput, WorkoutHistoryUncheckedUpdateManyWithoutWorkoutInput>
  }

  export type FavoriteWorkoutUpsertWithWhereUniqueWithoutWorkoutInput = {
    where: FavoriteWorkoutWhereUniqueInput
    update: XOR<FavoriteWorkoutUpdateWithoutWorkoutInput, FavoriteWorkoutUncheckedUpdateWithoutWorkoutInput>
    create: XOR<FavoriteWorkoutCreateWithoutWorkoutInput, FavoriteWorkoutUncheckedCreateWithoutWorkoutInput>
  }

  export type FavoriteWorkoutUpdateWithWhereUniqueWithoutWorkoutInput = {
    where: FavoriteWorkoutWhereUniqueInput
    data: XOR<FavoriteWorkoutUpdateWithoutWorkoutInput, FavoriteWorkoutUncheckedUpdateWithoutWorkoutInput>
  }

  export type FavoriteWorkoutUpdateManyWithWhereWithoutWorkoutInput = {
    where: FavoriteWorkoutScalarWhereInput
    data: XOR<FavoriteWorkoutUpdateManyMutationInput, FavoriteWorkoutUncheckedUpdateManyWithoutWorkoutInput>
  }

  export type ScheduledEventUpsertWithWhereUniqueWithoutWorkoutInput = {
    where: ScheduledEventWhereUniqueInput
    update: XOR<ScheduledEventUpdateWithoutWorkoutInput, ScheduledEventUncheckedUpdateWithoutWorkoutInput>
    create: XOR<ScheduledEventCreateWithoutWorkoutInput, ScheduledEventUncheckedCreateWithoutWorkoutInput>
  }

  export type ScheduledEventUpdateWithWhereUniqueWithoutWorkoutInput = {
    where: ScheduledEventWhereUniqueInput
    data: XOR<ScheduledEventUpdateWithoutWorkoutInput, ScheduledEventUncheckedUpdateWithoutWorkoutInput>
  }

  export type ScheduledEventUpdateManyWithWhereWithoutWorkoutInput = {
    where: ScheduledEventScalarWhereInput
    data: XOR<ScheduledEventUpdateManyMutationInput, ScheduledEventUncheckedUpdateManyWithoutWorkoutInput>
  }

  export type WorkoutExerciseCreateWithoutExerciseInput = {
    sets?: number | null
    reps?: string | null
    weight?: number | null
    restTime?: number | null
    notes?: string | null
    order: number
    workout: WorkoutCreateNestedOneWithoutExercisesInput
  }

  export type WorkoutExerciseUncheckedCreateWithoutExerciseInput = {
    id?: number
    workoutId: number
    sets?: number | null
    reps?: string | null
    weight?: number | null
    restTime?: number | null
    notes?: string | null
    order: number
  }

  export type WorkoutExerciseCreateOrConnectWithoutExerciseInput = {
    where: WorkoutExerciseWhereUniqueInput
    create: XOR<WorkoutExerciseCreateWithoutExerciseInput, WorkoutExerciseUncheckedCreateWithoutExerciseInput>
  }

  export type WorkoutExerciseCreateManyExerciseInputEnvelope = {
    data: WorkoutExerciseCreateManyExerciseInput | WorkoutExerciseCreateManyExerciseInput[]
    skipDuplicates?: boolean
  }

  export type WorkoutExerciseUpsertWithWhereUniqueWithoutExerciseInput = {
    where: WorkoutExerciseWhereUniqueInput
    update: XOR<WorkoutExerciseUpdateWithoutExerciseInput, WorkoutExerciseUncheckedUpdateWithoutExerciseInput>
    create: XOR<WorkoutExerciseCreateWithoutExerciseInput, WorkoutExerciseUncheckedCreateWithoutExerciseInput>
  }

  export type WorkoutExerciseUpdateWithWhereUniqueWithoutExerciseInput = {
    where: WorkoutExerciseWhereUniqueInput
    data: XOR<WorkoutExerciseUpdateWithoutExerciseInput, WorkoutExerciseUncheckedUpdateWithoutExerciseInput>
  }

  export type WorkoutExerciseUpdateManyWithWhereWithoutExerciseInput = {
    where: WorkoutExerciseScalarWhereInput
    data: XOR<WorkoutExerciseUpdateManyMutationInput, WorkoutExerciseUncheckedUpdateManyWithoutExerciseInput>
  }

  export type WorkoutCreateWithoutExercisesInput = {
    title: string
    description: string
    category: string
    difficulty: string
    duration: number
    calories: number
    muscleGroups?: WorkoutCreatemuscleGroupsInput | string[]
    imageUrl?: string | null
    videoUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    rating?: number
    ratingCount?: number
    workoutHistory?: WorkoutHistoryCreateNestedManyWithoutWorkoutInput
    favoriteBy?: FavoriteWorkoutCreateNestedManyWithoutWorkoutInput
    scheduledEvents?: ScheduledEventCreateNestedManyWithoutWorkoutInput
  }

  export type WorkoutUncheckedCreateWithoutExercisesInput = {
    id?: number
    title: string
    description: string
    category: string
    difficulty: string
    duration: number
    calories: number
    muscleGroups?: WorkoutCreatemuscleGroupsInput | string[]
    imageUrl?: string | null
    videoUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    rating?: number
    ratingCount?: number
    workoutHistory?: WorkoutHistoryUncheckedCreateNestedManyWithoutWorkoutInput
    favoriteBy?: FavoriteWorkoutUncheckedCreateNestedManyWithoutWorkoutInput
    scheduledEvents?: ScheduledEventUncheckedCreateNestedManyWithoutWorkoutInput
  }

  export type WorkoutCreateOrConnectWithoutExercisesInput = {
    where: WorkoutWhereUniqueInput
    create: XOR<WorkoutCreateWithoutExercisesInput, WorkoutUncheckedCreateWithoutExercisesInput>
  }

  export type ExerciseCreateWithoutWorkoutsInput = {
    name: string
    description: string
    instructions: string
    muscleGroups?: ExerciseCreatemuscleGroupsInput | string[]
    equipment?: ExerciseCreateequipmentInput | string[]
    difficultyLevel: string
    imageUrl?: string | null
    videoUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExerciseUncheckedCreateWithoutWorkoutsInput = {
    id?: number
    name: string
    description: string
    instructions: string
    muscleGroups?: ExerciseCreatemuscleGroupsInput | string[]
    equipment?: ExerciseCreateequipmentInput | string[]
    difficultyLevel: string
    imageUrl?: string | null
    videoUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExerciseCreateOrConnectWithoutWorkoutsInput = {
    where: ExerciseWhereUniqueInput
    create: XOR<ExerciseCreateWithoutWorkoutsInput, ExerciseUncheckedCreateWithoutWorkoutsInput>
  }

  export type WorkoutUpsertWithoutExercisesInput = {
    update: XOR<WorkoutUpdateWithoutExercisesInput, WorkoutUncheckedUpdateWithoutExercisesInput>
    create: XOR<WorkoutCreateWithoutExercisesInput, WorkoutUncheckedCreateWithoutExercisesInput>
    where?: WorkoutWhereInput
  }

  export type WorkoutUpdateToOneWithWhereWithoutExercisesInput = {
    where?: WorkoutWhereInput
    data: XOR<WorkoutUpdateWithoutExercisesInput, WorkoutUncheckedUpdateWithoutExercisesInput>
  }

  export type WorkoutUpdateWithoutExercisesInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    difficulty?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    calories?: IntFieldUpdateOperationsInput | number
    muscleGroups?: WorkoutUpdatemuscleGroupsInput | string[]
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    workoutHistory?: WorkoutHistoryUpdateManyWithoutWorkoutNestedInput
    favoriteBy?: FavoriteWorkoutUpdateManyWithoutWorkoutNestedInput
    scheduledEvents?: ScheduledEventUpdateManyWithoutWorkoutNestedInput
  }

  export type WorkoutUncheckedUpdateWithoutExercisesInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    difficulty?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    calories?: IntFieldUpdateOperationsInput | number
    muscleGroups?: WorkoutUpdatemuscleGroupsInput | string[]
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    workoutHistory?: WorkoutHistoryUncheckedUpdateManyWithoutWorkoutNestedInput
    favoriteBy?: FavoriteWorkoutUncheckedUpdateManyWithoutWorkoutNestedInput
    scheduledEvents?: ScheduledEventUncheckedUpdateManyWithoutWorkoutNestedInput
  }

  export type ExerciseUpsertWithoutWorkoutsInput = {
    update: XOR<ExerciseUpdateWithoutWorkoutsInput, ExerciseUncheckedUpdateWithoutWorkoutsInput>
    create: XOR<ExerciseCreateWithoutWorkoutsInput, ExerciseUncheckedCreateWithoutWorkoutsInput>
    where?: ExerciseWhereInput
  }

  export type ExerciseUpdateToOneWithWhereWithoutWorkoutsInput = {
    where?: ExerciseWhereInput
    data: XOR<ExerciseUpdateWithoutWorkoutsInput, ExerciseUncheckedUpdateWithoutWorkoutsInput>
  }

  export type ExerciseUpdateWithoutWorkoutsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    instructions?: StringFieldUpdateOperationsInput | string
    muscleGroups?: ExerciseUpdatemuscleGroupsInput | string[]
    equipment?: ExerciseUpdateequipmentInput | string[]
    difficultyLevel?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExerciseUncheckedUpdateWithoutWorkoutsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    instructions?: StringFieldUpdateOperationsInput | string
    muscleGroups?: ExerciseUpdatemuscleGroupsInput | string[]
    equipment?: ExerciseUpdateequipmentInput | string[]
    difficultyLevel?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteMeditationCreateWithoutMeditationInput = {
    id?: string
    addedAt?: Date | string
    user: UserCreateNestedOneWithoutFavoriteMeditationsInput
  }

  export type FavoriteMeditationUncheckedCreateWithoutMeditationInput = {
    id?: string
    userId: string
    addedAt?: Date | string
  }

  export type FavoriteMeditationCreateOrConnectWithoutMeditationInput = {
    where: FavoriteMeditationWhereUniqueInput
    create: XOR<FavoriteMeditationCreateWithoutMeditationInput, FavoriteMeditationUncheckedCreateWithoutMeditationInput>
  }

  export type FavoriteMeditationCreateManyMeditationInputEnvelope = {
    data: FavoriteMeditationCreateManyMeditationInput | FavoriteMeditationCreateManyMeditationInput[]
    skipDuplicates?: boolean
  }

  export type ScheduledEventCreateWithoutMeditationInput = {
    id?: string
    title: string
    date: Date | string
    time: string
    duration: number
    eventType: string
    completed?: boolean
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workout?: WorkoutCreateNestedOneWithoutScheduledEventsInput
    yoga?: YogaSessionCreateNestedOneWithoutScheduledEventsInput
    user: UserCreateNestedOneWithoutScheduledEventsInput
  }

  export type ScheduledEventUncheckedCreateWithoutMeditationInput = {
    id?: string
    userId: string
    title: string
    date: Date | string
    time: string
    duration: number
    eventType: string
    completed?: boolean
    notes?: string | null
    workoutId?: number | null
    yogaId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScheduledEventCreateOrConnectWithoutMeditationInput = {
    where: ScheduledEventWhereUniqueInput
    create: XOR<ScheduledEventCreateWithoutMeditationInput, ScheduledEventUncheckedCreateWithoutMeditationInput>
  }

  export type ScheduledEventCreateManyMeditationInputEnvelope = {
    data: ScheduledEventCreateManyMeditationInput | ScheduledEventCreateManyMeditationInput[]
    skipDuplicates?: boolean
  }

  export type FavoriteMeditationUpsertWithWhereUniqueWithoutMeditationInput = {
    where: FavoriteMeditationWhereUniqueInput
    update: XOR<FavoriteMeditationUpdateWithoutMeditationInput, FavoriteMeditationUncheckedUpdateWithoutMeditationInput>
    create: XOR<FavoriteMeditationCreateWithoutMeditationInput, FavoriteMeditationUncheckedCreateWithoutMeditationInput>
  }

  export type FavoriteMeditationUpdateWithWhereUniqueWithoutMeditationInput = {
    where: FavoriteMeditationWhereUniqueInput
    data: XOR<FavoriteMeditationUpdateWithoutMeditationInput, FavoriteMeditationUncheckedUpdateWithoutMeditationInput>
  }

  export type FavoriteMeditationUpdateManyWithWhereWithoutMeditationInput = {
    where: FavoriteMeditationScalarWhereInput
    data: XOR<FavoriteMeditationUpdateManyMutationInput, FavoriteMeditationUncheckedUpdateManyWithoutMeditationInput>
  }

  export type ScheduledEventUpsertWithWhereUniqueWithoutMeditationInput = {
    where: ScheduledEventWhereUniqueInput
    update: XOR<ScheduledEventUpdateWithoutMeditationInput, ScheduledEventUncheckedUpdateWithoutMeditationInput>
    create: XOR<ScheduledEventCreateWithoutMeditationInput, ScheduledEventUncheckedCreateWithoutMeditationInput>
  }

  export type ScheduledEventUpdateWithWhereUniqueWithoutMeditationInput = {
    where: ScheduledEventWhereUniqueInput
    data: XOR<ScheduledEventUpdateWithoutMeditationInput, ScheduledEventUncheckedUpdateWithoutMeditationInput>
  }

  export type ScheduledEventUpdateManyWithWhereWithoutMeditationInput = {
    where: ScheduledEventScalarWhereInput
    data: XOR<ScheduledEventUpdateManyMutationInput, ScheduledEventUncheckedUpdateManyWithoutMeditationInput>
  }

  export type FavoriteYogaSessionCreateWithoutYogaInput = {
    id?: string
    addedAt?: Date | string
    user: UserCreateNestedOneWithoutFavoriteYogaSessionsInput
  }

  export type FavoriteYogaSessionUncheckedCreateWithoutYogaInput = {
    id?: string
    userId: string
    addedAt?: Date | string
  }

  export type FavoriteYogaSessionCreateOrConnectWithoutYogaInput = {
    where: FavoriteYogaSessionWhereUniqueInput
    create: XOR<FavoriteYogaSessionCreateWithoutYogaInput, FavoriteYogaSessionUncheckedCreateWithoutYogaInput>
  }

  export type FavoriteYogaSessionCreateManyYogaInputEnvelope = {
    data: FavoriteYogaSessionCreateManyYogaInput | FavoriteYogaSessionCreateManyYogaInput[]
    skipDuplicates?: boolean
  }

  export type ScheduledEventCreateWithoutYogaInput = {
    id?: string
    title: string
    date: Date | string
    time: string
    duration: number
    eventType: string
    completed?: boolean
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workout?: WorkoutCreateNestedOneWithoutScheduledEventsInput
    meditation?: MeditationSessionCreateNestedOneWithoutScheduledEventsInput
    user: UserCreateNestedOneWithoutScheduledEventsInput
  }

  export type ScheduledEventUncheckedCreateWithoutYogaInput = {
    id?: string
    userId: string
    title: string
    date: Date | string
    time: string
    duration: number
    eventType: string
    completed?: boolean
    notes?: string | null
    workoutId?: number | null
    meditationId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScheduledEventCreateOrConnectWithoutYogaInput = {
    where: ScheduledEventWhereUniqueInput
    create: XOR<ScheduledEventCreateWithoutYogaInput, ScheduledEventUncheckedCreateWithoutYogaInput>
  }

  export type ScheduledEventCreateManyYogaInputEnvelope = {
    data: ScheduledEventCreateManyYogaInput | ScheduledEventCreateManyYogaInput[]
    skipDuplicates?: boolean
  }

  export type FavoriteYogaSessionUpsertWithWhereUniqueWithoutYogaInput = {
    where: FavoriteYogaSessionWhereUniqueInput
    update: XOR<FavoriteYogaSessionUpdateWithoutYogaInput, FavoriteYogaSessionUncheckedUpdateWithoutYogaInput>
    create: XOR<FavoriteYogaSessionCreateWithoutYogaInput, FavoriteYogaSessionUncheckedCreateWithoutYogaInput>
  }

  export type FavoriteYogaSessionUpdateWithWhereUniqueWithoutYogaInput = {
    where: FavoriteYogaSessionWhereUniqueInput
    data: XOR<FavoriteYogaSessionUpdateWithoutYogaInput, FavoriteYogaSessionUncheckedUpdateWithoutYogaInput>
  }

  export type FavoriteYogaSessionUpdateManyWithWhereWithoutYogaInput = {
    where: FavoriteYogaSessionScalarWhereInput
    data: XOR<FavoriteYogaSessionUpdateManyMutationInput, FavoriteYogaSessionUncheckedUpdateManyWithoutYogaInput>
  }

  export type ScheduledEventUpsertWithWhereUniqueWithoutYogaInput = {
    where: ScheduledEventWhereUniqueInput
    update: XOR<ScheduledEventUpdateWithoutYogaInput, ScheduledEventUncheckedUpdateWithoutYogaInput>
    create: XOR<ScheduledEventCreateWithoutYogaInput, ScheduledEventUncheckedCreateWithoutYogaInput>
  }

  export type ScheduledEventUpdateWithWhereUniqueWithoutYogaInput = {
    where: ScheduledEventWhereUniqueInput
    data: XOR<ScheduledEventUpdateWithoutYogaInput, ScheduledEventUncheckedUpdateWithoutYogaInput>
  }

  export type ScheduledEventUpdateManyWithWhereWithoutYogaInput = {
    where: ScheduledEventScalarWhereInput
    data: XOR<ScheduledEventUpdateManyMutationInput, ScheduledEventUncheckedUpdateManyWithoutYogaInput>
  }

  export type RecipeIngredientCreateWithoutRecipeInput = {
    quantity: string
    unit: string
    ingredient: IngredientCreateNestedOneWithoutRecipesInput
  }

  export type RecipeIngredientUncheckedCreateWithoutRecipeInput = {
    id?: number
    ingredientId: number
    quantity: string
    unit: string
  }

  export type RecipeIngredientCreateOrConnectWithoutRecipeInput = {
    where: RecipeIngredientWhereUniqueInput
    create: XOR<RecipeIngredientCreateWithoutRecipeInput, RecipeIngredientUncheckedCreateWithoutRecipeInput>
  }

  export type RecipeIngredientCreateManyRecipeInputEnvelope = {
    data: RecipeIngredientCreateManyRecipeInput | RecipeIngredientCreateManyRecipeInput[]
    skipDuplicates?: boolean
  }

  export type RecipeInstructionCreateWithoutRecipeInput = {
    stepNumber: number
    instruction: string
  }

  export type RecipeInstructionUncheckedCreateWithoutRecipeInput = {
    id?: number
    stepNumber: number
    instruction: string
  }

  export type RecipeInstructionCreateOrConnectWithoutRecipeInput = {
    where: RecipeInstructionWhereUniqueInput
    create: XOR<RecipeInstructionCreateWithoutRecipeInput, RecipeInstructionUncheckedCreateWithoutRecipeInput>
  }

  export type RecipeInstructionCreateManyRecipeInputEnvelope = {
    data: RecipeInstructionCreateManyRecipeInput | RecipeInstructionCreateManyRecipeInput[]
    skipDuplicates?: boolean
  }

  export type FavoriteRecipeCreateWithoutRecipeInput = {
    id?: string
    addedAt?: Date | string
    user: UserCreateNestedOneWithoutFavoriteRecipesInput
  }

  export type FavoriteRecipeUncheckedCreateWithoutRecipeInput = {
    id?: string
    userId: string
    addedAt?: Date | string
  }

  export type FavoriteRecipeCreateOrConnectWithoutRecipeInput = {
    where: FavoriteRecipeWhereUniqueInput
    create: XOR<FavoriteRecipeCreateWithoutRecipeInput, FavoriteRecipeUncheckedCreateWithoutRecipeInput>
  }

  export type FavoriteRecipeCreateManyRecipeInputEnvelope = {
    data: FavoriteRecipeCreateManyRecipeInput | FavoriteRecipeCreateManyRecipeInput[]
    skipDuplicates?: boolean
  }

  export type RecipeIngredientUpsertWithWhereUniqueWithoutRecipeInput = {
    where: RecipeIngredientWhereUniqueInput
    update: XOR<RecipeIngredientUpdateWithoutRecipeInput, RecipeIngredientUncheckedUpdateWithoutRecipeInput>
    create: XOR<RecipeIngredientCreateWithoutRecipeInput, RecipeIngredientUncheckedCreateWithoutRecipeInput>
  }

  export type RecipeIngredientUpdateWithWhereUniqueWithoutRecipeInput = {
    where: RecipeIngredientWhereUniqueInput
    data: XOR<RecipeIngredientUpdateWithoutRecipeInput, RecipeIngredientUncheckedUpdateWithoutRecipeInput>
  }

  export type RecipeIngredientUpdateManyWithWhereWithoutRecipeInput = {
    where: RecipeIngredientScalarWhereInput
    data: XOR<RecipeIngredientUpdateManyMutationInput, RecipeIngredientUncheckedUpdateManyWithoutRecipeInput>
  }

  export type RecipeIngredientScalarWhereInput = {
    AND?: RecipeIngredientScalarWhereInput | RecipeIngredientScalarWhereInput[]
    OR?: RecipeIngredientScalarWhereInput[]
    NOT?: RecipeIngredientScalarWhereInput | RecipeIngredientScalarWhereInput[]
    id?: IntFilter<"RecipeIngredient"> | number
    recipeId?: IntFilter<"RecipeIngredient"> | number
    ingredientId?: IntFilter<"RecipeIngredient"> | number
    quantity?: StringFilter<"RecipeIngredient"> | string
    unit?: StringFilter<"RecipeIngredient"> | string
  }

  export type RecipeInstructionUpsertWithWhereUniqueWithoutRecipeInput = {
    where: RecipeInstructionWhereUniqueInput
    update: XOR<RecipeInstructionUpdateWithoutRecipeInput, RecipeInstructionUncheckedUpdateWithoutRecipeInput>
    create: XOR<RecipeInstructionCreateWithoutRecipeInput, RecipeInstructionUncheckedCreateWithoutRecipeInput>
  }

  export type RecipeInstructionUpdateWithWhereUniqueWithoutRecipeInput = {
    where: RecipeInstructionWhereUniqueInput
    data: XOR<RecipeInstructionUpdateWithoutRecipeInput, RecipeInstructionUncheckedUpdateWithoutRecipeInput>
  }

  export type RecipeInstructionUpdateManyWithWhereWithoutRecipeInput = {
    where: RecipeInstructionScalarWhereInput
    data: XOR<RecipeInstructionUpdateManyMutationInput, RecipeInstructionUncheckedUpdateManyWithoutRecipeInput>
  }

  export type RecipeInstructionScalarWhereInput = {
    AND?: RecipeInstructionScalarWhereInput | RecipeInstructionScalarWhereInput[]
    OR?: RecipeInstructionScalarWhereInput[]
    NOT?: RecipeInstructionScalarWhereInput | RecipeInstructionScalarWhereInput[]
    id?: IntFilter<"RecipeInstruction"> | number
    recipeId?: IntFilter<"RecipeInstruction"> | number
    stepNumber?: IntFilter<"RecipeInstruction"> | number
    instruction?: StringFilter<"RecipeInstruction"> | string
  }

  export type FavoriteRecipeUpsertWithWhereUniqueWithoutRecipeInput = {
    where: FavoriteRecipeWhereUniqueInput
    update: XOR<FavoriteRecipeUpdateWithoutRecipeInput, FavoriteRecipeUncheckedUpdateWithoutRecipeInput>
    create: XOR<FavoriteRecipeCreateWithoutRecipeInput, FavoriteRecipeUncheckedCreateWithoutRecipeInput>
  }

  export type FavoriteRecipeUpdateWithWhereUniqueWithoutRecipeInput = {
    where: FavoriteRecipeWhereUniqueInput
    data: XOR<FavoriteRecipeUpdateWithoutRecipeInput, FavoriteRecipeUncheckedUpdateWithoutRecipeInput>
  }

  export type FavoriteRecipeUpdateManyWithWhereWithoutRecipeInput = {
    where: FavoriteRecipeScalarWhereInput
    data: XOR<FavoriteRecipeUpdateManyMutationInput, FavoriteRecipeUncheckedUpdateManyWithoutRecipeInput>
  }

  export type RecipeIngredientCreateWithoutIngredientInput = {
    quantity: string
    unit: string
    recipe: RecipeCreateNestedOneWithoutIngredientsInput
  }

  export type RecipeIngredientUncheckedCreateWithoutIngredientInput = {
    id?: number
    recipeId: number
    quantity: string
    unit: string
  }

  export type RecipeIngredientCreateOrConnectWithoutIngredientInput = {
    where: RecipeIngredientWhereUniqueInput
    create: XOR<RecipeIngredientCreateWithoutIngredientInput, RecipeIngredientUncheckedCreateWithoutIngredientInput>
  }

  export type RecipeIngredientCreateManyIngredientInputEnvelope = {
    data: RecipeIngredientCreateManyIngredientInput | RecipeIngredientCreateManyIngredientInput[]
    skipDuplicates?: boolean
  }

  export type RecipeIngredientUpsertWithWhereUniqueWithoutIngredientInput = {
    where: RecipeIngredientWhereUniqueInput
    update: XOR<RecipeIngredientUpdateWithoutIngredientInput, RecipeIngredientUncheckedUpdateWithoutIngredientInput>
    create: XOR<RecipeIngredientCreateWithoutIngredientInput, RecipeIngredientUncheckedCreateWithoutIngredientInput>
  }

  export type RecipeIngredientUpdateWithWhereUniqueWithoutIngredientInput = {
    where: RecipeIngredientWhereUniqueInput
    data: XOR<RecipeIngredientUpdateWithoutIngredientInput, RecipeIngredientUncheckedUpdateWithoutIngredientInput>
  }

  export type RecipeIngredientUpdateManyWithWhereWithoutIngredientInput = {
    where: RecipeIngredientScalarWhereInput
    data: XOR<RecipeIngredientUpdateManyMutationInput, RecipeIngredientUncheckedUpdateManyWithoutIngredientInput>
  }

  export type RecipeCreateWithoutIngredientsInput = {
    title: string
    description: string
    category: string
    difficulty: string
    prepTime: number
    cookTime: number
    servings: number
    calories: number
    protein?: number | null
    carbs?: number | null
    fat?: number | null
    tags?: RecipeCreatetagsInput | string[]
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    rating?: number
    ratingCount?: number
    author?: string | null
    instructions?: RecipeInstructionCreateNestedManyWithoutRecipeInput
    favoriteBy?: FavoriteRecipeCreateNestedManyWithoutRecipeInput
  }

  export type RecipeUncheckedCreateWithoutIngredientsInput = {
    id?: number
    title: string
    description: string
    category: string
    difficulty: string
    prepTime: number
    cookTime: number
    servings: number
    calories: number
    protein?: number | null
    carbs?: number | null
    fat?: number | null
    tags?: RecipeCreatetagsInput | string[]
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    rating?: number
    ratingCount?: number
    author?: string | null
    instructions?: RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInput
    favoriteBy?: FavoriteRecipeUncheckedCreateNestedManyWithoutRecipeInput
  }

  export type RecipeCreateOrConnectWithoutIngredientsInput = {
    where: RecipeWhereUniqueInput
    create: XOR<RecipeCreateWithoutIngredientsInput, RecipeUncheckedCreateWithoutIngredientsInput>
  }

  export type IngredientCreateWithoutRecipesInput = {
    name: string
    calories?: number | null
    protein?: number | null
    carbs?: number | null
    fat?: number | null
  }

  export type IngredientUncheckedCreateWithoutRecipesInput = {
    id?: number
    name: string
    calories?: number | null
    protein?: number | null
    carbs?: number | null
    fat?: number | null
  }

  export type IngredientCreateOrConnectWithoutRecipesInput = {
    where: IngredientWhereUniqueInput
    create: XOR<IngredientCreateWithoutRecipesInput, IngredientUncheckedCreateWithoutRecipesInput>
  }

  export type RecipeUpsertWithoutIngredientsInput = {
    update: XOR<RecipeUpdateWithoutIngredientsInput, RecipeUncheckedUpdateWithoutIngredientsInput>
    create: XOR<RecipeCreateWithoutIngredientsInput, RecipeUncheckedCreateWithoutIngredientsInput>
    where?: RecipeWhereInput
  }

  export type RecipeUpdateToOneWithWhereWithoutIngredientsInput = {
    where?: RecipeWhereInput
    data: XOR<RecipeUpdateWithoutIngredientsInput, RecipeUncheckedUpdateWithoutIngredientsInput>
  }

  export type RecipeUpdateWithoutIngredientsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    difficulty?: StringFieldUpdateOperationsInput | string
    prepTime?: IntFieldUpdateOperationsInput | number
    cookTime?: IntFieldUpdateOperationsInput | number
    servings?: IntFieldUpdateOperationsInput | number
    calories?: IntFieldUpdateOperationsInput | number
    protein?: NullableFloatFieldUpdateOperationsInput | number | null
    carbs?: NullableFloatFieldUpdateOperationsInput | number | null
    fat?: NullableFloatFieldUpdateOperationsInput | number | null
    tags?: RecipeUpdatetagsInput | string[]
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    author?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: RecipeInstructionUpdateManyWithoutRecipeNestedInput
    favoriteBy?: FavoriteRecipeUpdateManyWithoutRecipeNestedInput
  }

  export type RecipeUncheckedUpdateWithoutIngredientsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    difficulty?: StringFieldUpdateOperationsInput | string
    prepTime?: IntFieldUpdateOperationsInput | number
    cookTime?: IntFieldUpdateOperationsInput | number
    servings?: IntFieldUpdateOperationsInput | number
    calories?: IntFieldUpdateOperationsInput | number
    protein?: NullableFloatFieldUpdateOperationsInput | number | null
    carbs?: NullableFloatFieldUpdateOperationsInput | number | null
    fat?: NullableFloatFieldUpdateOperationsInput | number | null
    tags?: RecipeUpdatetagsInput | string[]
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    author?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInput
    favoriteBy?: FavoriteRecipeUncheckedUpdateManyWithoutRecipeNestedInput
  }

  export type IngredientUpsertWithoutRecipesInput = {
    update: XOR<IngredientUpdateWithoutRecipesInput, IngredientUncheckedUpdateWithoutRecipesInput>
    create: XOR<IngredientCreateWithoutRecipesInput, IngredientUncheckedCreateWithoutRecipesInput>
    where?: IngredientWhereInput
  }

  export type IngredientUpdateToOneWithWhereWithoutRecipesInput = {
    where?: IngredientWhereInput
    data: XOR<IngredientUpdateWithoutRecipesInput, IngredientUncheckedUpdateWithoutRecipesInput>
  }

  export type IngredientUpdateWithoutRecipesInput = {
    name?: StringFieldUpdateOperationsInput | string
    calories?: NullableIntFieldUpdateOperationsInput | number | null
    protein?: NullableFloatFieldUpdateOperationsInput | number | null
    carbs?: NullableFloatFieldUpdateOperationsInput | number | null
    fat?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type IngredientUncheckedUpdateWithoutRecipesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    calories?: NullableIntFieldUpdateOperationsInput | number | null
    protein?: NullableFloatFieldUpdateOperationsInput | number | null
    carbs?: NullableFloatFieldUpdateOperationsInput | number | null
    fat?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type RecipeCreateWithoutInstructionsInput = {
    title: string
    description: string
    category: string
    difficulty: string
    prepTime: number
    cookTime: number
    servings: number
    calories: number
    protein?: number | null
    carbs?: number | null
    fat?: number | null
    tags?: RecipeCreatetagsInput | string[]
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    rating?: number
    ratingCount?: number
    author?: string | null
    ingredients?: RecipeIngredientCreateNestedManyWithoutRecipeInput
    favoriteBy?: FavoriteRecipeCreateNestedManyWithoutRecipeInput
  }

  export type RecipeUncheckedCreateWithoutInstructionsInput = {
    id?: number
    title: string
    description: string
    category: string
    difficulty: string
    prepTime: number
    cookTime: number
    servings: number
    calories: number
    protein?: number | null
    carbs?: number | null
    fat?: number | null
    tags?: RecipeCreatetagsInput | string[]
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    rating?: number
    ratingCount?: number
    author?: string | null
    ingredients?: RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInput
    favoriteBy?: FavoriteRecipeUncheckedCreateNestedManyWithoutRecipeInput
  }

  export type RecipeCreateOrConnectWithoutInstructionsInput = {
    where: RecipeWhereUniqueInput
    create: XOR<RecipeCreateWithoutInstructionsInput, RecipeUncheckedCreateWithoutInstructionsInput>
  }

  export type RecipeUpsertWithoutInstructionsInput = {
    update: XOR<RecipeUpdateWithoutInstructionsInput, RecipeUncheckedUpdateWithoutInstructionsInput>
    create: XOR<RecipeCreateWithoutInstructionsInput, RecipeUncheckedCreateWithoutInstructionsInput>
    where?: RecipeWhereInput
  }

  export type RecipeUpdateToOneWithWhereWithoutInstructionsInput = {
    where?: RecipeWhereInput
    data: XOR<RecipeUpdateWithoutInstructionsInput, RecipeUncheckedUpdateWithoutInstructionsInput>
  }

  export type RecipeUpdateWithoutInstructionsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    difficulty?: StringFieldUpdateOperationsInput | string
    prepTime?: IntFieldUpdateOperationsInput | number
    cookTime?: IntFieldUpdateOperationsInput | number
    servings?: IntFieldUpdateOperationsInput | number
    calories?: IntFieldUpdateOperationsInput | number
    protein?: NullableFloatFieldUpdateOperationsInput | number | null
    carbs?: NullableFloatFieldUpdateOperationsInput | number | null
    fat?: NullableFloatFieldUpdateOperationsInput | number | null
    tags?: RecipeUpdatetagsInput | string[]
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    author?: NullableStringFieldUpdateOperationsInput | string | null
    ingredients?: RecipeIngredientUpdateManyWithoutRecipeNestedInput
    favoriteBy?: FavoriteRecipeUpdateManyWithoutRecipeNestedInput
  }

  export type RecipeUncheckedUpdateWithoutInstructionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    difficulty?: StringFieldUpdateOperationsInput | string
    prepTime?: IntFieldUpdateOperationsInput | number
    cookTime?: IntFieldUpdateOperationsInput | number
    servings?: IntFieldUpdateOperationsInput | number
    calories?: IntFieldUpdateOperationsInput | number
    protein?: NullableFloatFieldUpdateOperationsInput | number | null
    carbs?: NullableFloatFieldUpdateOperationsInput | number | null
    fat?: NullableFloatFieldUpdateOperationsInput | number | null
    tags?: RecipeUpdatetagsInput | string[]
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    author?: NullableStringFieldUpdateOperationsInput | string | null
    ingredients?: RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInput
    favoriteBy?: FavoriteRecipeUncheckedUpdateManyWithoutRecipeNestedInput
  }

  export type WorkoutCreateWithoutScheduledEventsInput = {
    title: string
    description: string
    category: string
    difficulty: string
    duration: number
    calories: number
    muscleGroups?: WorkoutCreatemuscleGroupsInput | string[]
    imageUrl?: string | null
    videoUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    rating?: number
    ratingCount?: number
    exercises?: WorkoutExerciseCreateNestedManyWithoutWorkoutInput
    workoutHistory?: WorkoutHistoryCreateNestedManyWithoutWorkoutInput
    favoriteBy?: FavoriteWorkoutCreateNestedManyWithoutWorkoutInput
  }

  export type WorkoutUncheckedCreateWithoutScheduledEventsInput = {
    id?: number
    title: string
    description: string
    category: string
    difficulty: string
    duration: number
    calories: number
    muscleGroups?: WorkoutCreatemuscleGroupsInput | string[]
    imageUrl?: string | null
    videoUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    rating?: number
    ratingCount?: number
    exercises?: WorkoutExerciseUncheckedCreateNestedManyWithoutWorkoutInput
    workoutHistory?: WorkoutHistoryUncheckedCreateNestedManyWithoutWorkoutInput
    favoriteBy?: FavoriteWorkoutUncheckedCreateNestedManyWithoutWorkoutInput
  }

  export type WorkoutCreateOrConnectWithoutScheduledEventsInput = {
    where: WorkoutWhereUniqueInput
    create: XOR<WorkoutCreateWithoutScheduledEventsInput, WorkoutUncheckedCreateWithoutScheduledEventsInput>
  }

  export type MeditationSessionCreateWithoutScheduledEventsInput = {
    title: string
    description: string
    category: string
    duration: number
    level: string
    instructor: string
    audioUrl: string
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    rating?: number
    ratingCount?: number
    favoriteBy?: FavoriteMeditationCreateNestedManyWithoutMeditationInput
  }

  export type MeditationSessionUncheckedCreateWithoutScheduledEventsInput = {
    id?: number
    title: string
    description: string
    category: string
    duration: number
    level: string
    instructor: string
    audioUrl: string
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    rating?: number
    ratingCount?: number
    favoriteBy?: FavoriteMeditationUncheckedCreateNestedManyWithoutMeditationInput
  }

  export type MeditationSessionCreateOrConnectWithoutScheduledEventsInput = {
    where: MeditationSessionWhereUniqueInput
    create: XOR<MeditationSessionCreateWithoutScheduledEventsInput, MeditationSessionUncheckedCreateWithoutScheduledEventsInput>
  }

  export type YogaSessionCreateWithoutScheduledEventsInput = {
    title: string
    description: string
    style: string
    duration: number
    level: string
    instructor: string
    benefits?: YogaSessionCreatebenefitsInput | string[]
    videoUrl: string
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    rating?: number
    ratingCount?: number
    favoriteBy?: FavoriteYogaSessionCreateNestedManyWithoutYogaInput
  }

  export type YogaSessionUncheckedCreateWithoutScheduledEventsInput = {
    id?: number
    title: string
    description: string
    style: string
    duration: number
    level: string
    instructor: string
    benefits?: YogaSessionCreatebenefitsInput | string[]
    videoUrl: string
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    rating?: number
    ratingCount?: number
    favoriteBy?: FavoriteYogaSessionUncheckedCreateNestedManyWithoutYogaInput
  }

  export type YogaSessionCreateOrConnectWithoutScheduledEventsInput = {
    where: YogaSessionWhereUniqueInput
    create: XOR<YogaSessionCreateWithoutScheduledEventsInput, YogaSessionUncheckedCreateWithoutScheduledEventsInput>
  }

  export type UserCreateWithoutScheduledEventsInput = {
    id?: string
    name?: string | null
    firstName?: string | null
    lastName?: string | null
    username?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    height?: number | null
    weight?: number | null
    goalWeight?: number | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    fitnessLevel?: string | null
    memberSince?: Date | string
    workoutHistory?: WorkoutHistoryCreateNestedManyWithoutUserInput
    favoriteWorkouts?: FavoriteWorkoutCreateNestedManyWithoutUserInput
    favoriteMeditations?: FavoriteMeditationCreateNestedManyWithoutUserInput
    favoriteYogaSessions?: FavoriteYogaSessionCreateNestedManyWithoutUserInput
    favoriteRecipes?: FavoriteRecipeCreateNestedManyWithoutUserInput
    weightHistory?: WeightHistoryCreateNestedManyWithoutUserInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    settings?: UserSettingsCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutScheduledEventsInput = {
    id?: string
    name?: string | null
    firstName?: string | null
    lastName?: string | null
    username?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    height?: number | null
    weight?: number | null
    goalWeight?: number | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    fitnessLevel?: string | null
    memberSince?: Date | string
    workoutHistory?: WorkoutHistoryUncheckedCreateNestedManyWithoutUserInput
    favoriteWorkouts?: FavoriteWorkoutUncheckedCreateNestedManyWithoutUserInput
    favoriteMeditations?: FavoriteMeditationUncheckedCreateNestedManyWithoutUserInput
    favoriteYogaSessions?: FavoriteYogaSessionUncheckedCreateNestedManyWithoutUserInput
    favoriteRecipes?: FavoriteRecipeUncheckedCreateNestedManyWithoutUserInput
    weightHistory?: WeightHistoryUncheckedCreateNestedManyWithoutUserInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutScheduledEventsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutScheduledEventsInput, UserUncheckedCreateWithoutScheduledEventsInput>
  }

  export type WorkoutUpsertWithoutScheduledEventsInput = {
    update: XOR<WorkoutUpdateWithoutScheduledEventsInput, WorkoutUncheckedUpdateWithoutScheduledEventsInput>
    create: XOR<WorkoutCreateWithoutScheduledEventsInput, WorkoutUncheckedCreateWithoutScheduledEventsInput>
    where?: WorkoutWhereInput
  }

  export type WorkoutUpdateToOneWithWhereWithoutScheduledEventsInput = {
    where?: WorkoutWhereInput
    data: XOR<WorkoutUpdateWithoutScheduledEventsInput, WorkoutUncheckedUpdateWithoutScheduledEventsInput>
  }

  export type WorkoutUpdateWithoutScheduledEventsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    difficulty?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    calories?: IntFieldUpdateOperationsInput | number
    muscleGroups?: WorkoutUpdatemuscleGroupsInput | string[]
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    exercises?: WorkoutExerciseUpdateManyWithoutWorkoutNestedInput
    workoutHistory?: WorkoutHistoryUpdateManyWithoutWorkoutNestedInput
    favoriteBy?: FavoriteWorkoutUpdateManyWithoutWorkoutNestedInput
  }

  export type WorkoutUncheckedUpdateWithoutScheduledEventsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    difficulty?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    calories?: IntFieldUpdateOperationsInput | number
    muscleGroups?: WorkoutUpdatemuscleGroupsInput | string[]
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    exercises?: WorkoutExerciseUncheckedUpdateManyWithoutWorkoutNestedInput
    workoutHistory?: WorkoutHistoryUncheckedUpdateManyWithoutWorkoutNestedInput
    favoriteBy?: FavoriteWorkoutUncheckedUpdateManyWithoutWorkoutNestedInput
  }

  export type MeditationSessionUpsertWithoutScheduledEventsInput = {
    update: XOR<MeditationSessionUpdateWithoutScheduledEventsInput, MeditationSessionUncheckedUpdateWithoutScheduledEventsInput>
    create: XOR<MeditationSessionCreateWithoutScheduledEventsInput, MeditationSessionUncheckedCreateWithoutScheduledEventsInput>
    where?: MeditationSessionWhereInput
  }

  export type MeditationSessionUpdateToOneWithWhereWithoutScheduledEventsInput = {
    where?: MeditationSessionWhereInput
    data: XOR<MeditationSessionUpdateWithoutScheduledEventsInput, MeditationSessionUncheckedUpdateWithoutScheduledEventsInput>
  }

  export type MeditationSessionUpdateWithoutScheduledEventsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    level?: StringFieldUpdateOperationsInput | string
    instructor?: StringFieldUpdateOperationsInput | string
    audioUrl?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    favoriteBy?: FavoriteMeditationUpdateManyWithoutMeditationNestedInput
  }

  export type MeditationSessionUncheckedUpdateWithoutScheduledEventsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    level?: StringFieldUpdateOperationsInput | string
    instructor?: StringFieldUpdateOperationsInput | string
    audioUrl?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    favoriteBy?: FavoriteMeditationUncheckedUpdateManyWithoutMeditationNestedInput
  }

  export type YogaSessionUpsertWithoutScheduledEventsInput = {
    update: XOR<YogaSessionUpdateWithoutScheduledEventsInput, YogaSessionUncheckedUpdateWithoutScheduledEventsInput>
    create: XOR<YogaSessionCreateWithoutScheduledEventsInput, YogaSessionUncheckedCreateWithoutScheduledEventsInput>
    where?: YogaSessionWhereInput
  }

  export type YogaSessionUpdateToOneWithWhereWithoutScheduledEventsInput = {
    where?: YogaSessionWhereInput
    data: XOR<YogaSessionUpdateWithoutScheduledEventsInput, YogaSessionUncheckedUpdateWithoutScheduledEventsInput>
  }

  export type YogaSessionUpdateWithoutScheduledEventsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    style?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    level?: StringFieldUpdateOperationsInput | string
    instructor?: StringFieldUpdateOperationsInput | string
    benefits?: YogaSessionUpdatebenefitsInput | string[]
    videoUrl?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    favoriteBy?: FavoriteYogaSessionUpdateManyWithoutYogaNestedInput
  }

  export type YogaSessionUncheckedUpdateWithoutScheduledEventsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    style?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    level?: StringFieldUpdateOperationsInput | string
    instructor?: StringFieldUpdateOperationsInput | string
    benefits?: YogaSessionUpdatebenefitsInput | string[]
    videoUrl?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    favoriteBy?: FavoriteYogaSessionUncheckedUpdateManyWithoutYogaNestedInput
  }

  export type UserUpsertWithoutScheduledEventsInput = {
    update: XOR<UserUpdateWithoutScheduledEventsInput, UserUncheckedUpdateWithoutScheduledEventsInput>
    create: XOR<UserCreateWithoutScheduledEventsInput, UserUncheckedCreateWithoutScheduledEventsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutScheduledEventsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutScheduledEventsInput, UserUncheckedUpdateWithoutScheduledEventsInput>
  }

  export type UserUpdateWithoutScheduledEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    goalWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    fitnessLevel?: NullableStringFieldUpdateOperationsInput | string | null
    memberSince?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutHistory?: WorkoutHistoryUpdateManyWithoutUserNestedInput
    favoriteWorkouts?: FavoriteWorkoutUpdateManyWithoutUserNestedInput
    favoriteMeditations?: FavoriteMeditationUpdateManyWithoutUserNestedInput
    favoriteYogaSessions?: FavoriteYogaSessionUpdateManyWithoutUserNestedInput
    favoriteRecipes?: FavoriteRecipeUpdateManyWithoutUserNestedInput
    weightHistory?: WeightHistoryUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutScheduledEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    goalWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    fitnessLevel?: NullableStringFieldUpdateOperationsInput | string | null
    memberSince?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutHistory?: WorkoutHistoryUncheckedUpdateManyWithoutUserNestedInput
    favoriteWorkouts?: FavoriteWorkoutUncheckedUpdateManyWithoutUserNestedInput
    favoriteMeditations?: FavoriteMeditationUncheckedUpdateManyWithoutUserNestedInput
    favoriteYogaSessions?: FavoriteYogaSessionUncheckedUpdateManyWithoutUserNestedInput
    favoriteRecipes?: FavoriteRecipeUncheckedUpdateManyWithoutUserNestedInput
    weightHistory?: WeightHistoryUncheckedUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutWorkoutHistoryInput = {
    id?: string
    name?: string | null
    firstName?: string | null
    lastName?: string | null
    username?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    height?: number | null
    weight?: number | null
    goalWeight?: number | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    fitnessLevel?: string | null
    memberSince?: Date | string
    favoriteWorkouts?: FavoriteWorkoutCreateNestedManyWithoutUserInput
    favoriteMeditations?: FavoriteMeditationCreateNestedManyWithoutUserInput
    favoriteYogaSessions?: FavoriteYogaSessionCreateNestedManyWithoutUserInput
    favoriteRecipes?: FavoriteRecipeCreateNestedManyWithoutUserInput
    scheduledEvents?: ScheduledEventCreateNestedManyWithoutUserInput
    weightHistory?: WeightHistoryCreateNestedManyWithoutUserInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    settings?: UserSettingsCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutWorkoutHistoryInput = {
    id?: string
    name?: string | null
    firstName?: string | null
    lastName?: string | null
    username?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    height?: number | null
    weight?: number | null
    goalWeight?: number | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    fitnessLevel?: string | null
    memberSince?: Date | string
    favoriteWorkouts?: FavoriteWorkoutUncheckedCreateNestedManyWithoutUserInput
    favoriteMeditations?: FavoriteMeditationUncheckedCreateNestedManyWithoutUserInput
    favoriteYogaSessions?: FavoriteYogaSessionUncheckedCreateNestedManyWithoutUserInput
    favoriteRecipes?: FavoriteRecipeUncheckedCreateNestedManyWithoutUserInput
    scheduledEvents?: ScheduledEventUncheckedCreateNestedManyWithoutUserInput
    weightHistory?: WeightHistoryUncheckedCreateNestedManyWithoutUserInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutWorkoutHistoryInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWorkoutHistoryInput, UserUncheckedCreateWithoutWorkoutHistoryInput>
  }

  export type WorkoutCreateWithoutWorkoutHistoryInput = {
    title: string
    description: string
    category: string
    difficulty: string
    duration: number
    calories: number
    muscleGroups?: WorkoutCreatemuscleGroupsInput | string[]
    imageUrl?: string | null
    videoUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    rating?: number
    ratingCount?: number
    exercises?: WorkoutExerciseCreateNestedManyWithoutWorkoutInput
    favoriteBy?: FavoriteWorkoutCreateNestedManyWithoutWorkoutInput
    scheduledEvents?: ScheduledEventCreateNestedManyWithoutWorkoutInput
  }

  export type WorkoutUncheckedCreateWithoutWorkoutHistoryInput = {
    id?: number
    title: string
    description: string
    category: string
    difficulty: string
    duration: number
    calories: number
    muscleGroups?: WorkoutCreatemuscleGroupsInput | string[]
    imageUrl?: string | null
    videoUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    rating?: number
    ratingCount?: number
    exercises?: WorkoutExerciseUncheckedCreateNestedManyWithoutWorkoutInput
    favoriteBy?: FavoriteWorkoutUncheckedCreateNestedManyWithoutWorkoutInput
    scheduledEvents?: ScheduledEventUncheckedCreateNestedManyWithoutWorkoutInput
  }

  export type WorkoutCreateOrConnectWithoutWorkoutHistoryInput = {
    where: WorkoutWhereUniqueInput
    create: XOR<WorkoutCreateWithoutWorkoutHistoryInput, WorkoutUncheckedCreateWithoutWorkoutHistoryInput>
  }

  export type UserUpsertWithoutWorkoutHistoryInput = {
    update: XOR<UserUpdateWithoutWorkoutHistoryInput, UserUncheckedUpdateWithoutWorkoutHistoryInput>
    create: XOR<UserCreateWithoutWorkoutHistoryInput, UserUncheckedCreateWithoutWorkoutHistoryInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWorkoutHistoryInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWorkoutHistoryInput, UserUncheckedUpdateWithoutWorkoutHistoryInput>
  }

  export type UserUpdateWithoutWorkoutHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    goalWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    fitnessLevel?: NullableStringFieldUpdateOperationsInput | string | null
    memberSince?: DateTimeFieldUpdateOperationsInput | Date | string
    favoriteWorkouts?: FavoriteWorkoutUpdateManyWithoutUserNestedInput
    favoriteMeditations?: FavoriteMeditationUpdateManyWithoutUserNestedInput
    favoriteYogaSessions?: FavoriteYogaSessionUpdateManyWithoutUserNestedInput
    favoriteRecipes?: FavoriteRecipeUpdateManyWithoutUserNestedInput
    scheduledEvents?: ScheduledEventUpdateManyWithoutUserNestedInput
    weightHistory?: WeightHistoryUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutWorkoutHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    goalWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    fitnessLevel?: NullableStringFieldUpdateOperationsInput | string | null
    memberSince?: DateTimeFieldUpdateOperationsInput | Date | string
    favoriteWorkouts?: FavoriteWorkoutUncheckedUpdateManyWithoutUserNestedInput
    favoriteMeditations?: FavoriteMeditationUncheckedUpdateManyWithoutUserNestedInput
    favoriteYogaSessions?: FavoriteYogaSessionUncheckedUpdateManyWithoutUserNestedInput
    favoriteRecipes?: FavoriteRecipeUncheckedUpdateManyWithoutUserNestedInput
    scheduledEvents?: ScheduledEventUncheckedUpdateManyWithoutUserNestedInput
    weightHistory?: WeightHistoryUncheckedUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
  }

  export type WorkoutUpsertWithoutWorkoutHistoryInput = {
    update: XOR<WorkoutUpdateWithoutWorkoutHistoryInput, WorkoutUncheckedUpdateWithoutWorkoutHistoryInput>
    create: XOR<WorkoutCreateWithoutWorkoutHistoryInput, WorkoutUncheckedCreateWithoutWorkoutHistoryInput>
    where?: WorkoutWhereInput
  }

  export type WorkoutUpdateToOneWithWhereWithoutWorkoutHistoryInput = {
    where?: WorkoutWhereInput
    data: XOR<WorkoutUpdateWithoutWorkoutHistoryInput, WorkoutUncheckedUpdateWithoutWorkoutHistoryInput>
  }

  export type WorkoutUpdateWithoutWorkoutHistoryInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    difficulty?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    calories?: IntFieldUpdateOperationsInput | number
    muscleGroups?: WorkoutUpdatemuscleGroupsInput | string[]
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    exercises?: WorkoutExerciseUpdateManyWithoutWorkoutNestedInput
    favoriteBy?: FavoriteWorkoutUpdateManyWithoutWorkoutNestedInput
    scheduledEvents?: ScheduledEventUpdateManyWithoutWorkoutNestedInput
  }

  export type WorkoutUncheckedUpdateWithoutWorkoutHistoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    difficulty?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    calories?: IntFieldUpdateOperationsInput | number
    muscleGroups?: WorkoutUpdatemuscleGroupsInput | string[]
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    exercises?: WorkoutExerciseUncheckedUpdateManyWithoutWorkoutNestedInput
    favoriteBy?: FavoriteWorkoutUncheckedUpdateManyWithoutWorkoutNestedInput
    scheduledEvents?: ScheduledEventUncheckedUpdateManyWithoutWorkoutNestedInput
  }

  export type UserCreateWithoutFavoriteWorkoutsInput = {
    id?: string
    name?: string | null
    firstName?: string | null
    lastName?: string | null
    username?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    height?: number | null
    weight?: number | null
    goalWeight?: number | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    fitnessLevel?: string | null
    memberSince?: Date | string
    workoutHistory?: WorkoutHistoryCreateNestedManyWithoutUserInput
    favoriteMeditations?: FavoriteMeditationCreateNestedManyWithoutUserInput
    favoriteYogaSessions?: FavoriteYogaSessionCreateNestedManyWithoutUserInput
    favoriteRecipes?: FavoriteRecipeCreateNestedManyWithoutUserInput
    scheduledEvents?: ScheduledEventCreateNestedManyWithoutUserInput
    weightHistory?: WeightHistoryCreateNestedManyWithoutUserInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    settings?: UserSettingsCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFavoriteWorkoutsInput = {
    id?: string
    name?: string | null
    firstName?: string | null
    lastName?: string | null
    username?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    height?: number | null
    weight?: number | null
    goalWeight?: number | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    fitnessLevel?: string | null
    memberSince?: Date | string
    workoutHistory?: WorkoutHistoryUncheckedCreateNestedManyWithoutUserInput
    favoriteMeditations?: FavoriteMeditationUncheckedCreateNestedManyWithoutUserInput
    favoriteYogaSessions?: FavoriteYogaSessionUncheckedCreateNestedManyWithoutUserInput
    favoriteRecipes?: FavoriteRecipeUncheckedCreateNestedManyWithoutUserInput
    scheduledEvents?: ScheduledEventUncheckedCreateNestedManyWithoutUserInput
    weightHistory?: WeightHistoryUncheckedCreateNestedManyWithoutUserInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFavoriteWorkoutsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFavoriteWorkoutsInput, UserUncheckedCreateWithoutFavoriteWorkoutsInput>
  }

  export type WorkoutCreateWithoutFavoriteByInput = {
    title: string
    description: string
    category: string
    difficulty: string
    duration: number
    calories: number
    muscleGroups?: WorkoutCreatemuscleGroupsInput | string[]
    imageUrl?: string | null
    videoUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    rating?: number
    ratingCount?: number
    exercises?: WorkoutExerciseCreateNestedManyWithoutWorkoutInput
    workoutHistory?: WorkoutHistoryCreateNestedManyWithoutWorkoutInput
    scheduledEvents?: ScheduledEventCreateNestedManyWithoutWorkoutInput
  }

  export type WorkoutUncheckedCreateWithoutFavoriteByInput = {
    id?: number
    title: string
    description: string
    category: string
    difficulty: string
    duration: number
    calories: number
    muscleGroups?: WorkoutCreatemuscleGroupsInput | string[]
    imageUrl?: string | null
    videoUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    rating?: number
    ratingCount?: number
    exercises?: WorkoutExerciseUncheckedCreateNestedManyWithoutWorkoutInput
    workoutHistory?: WorkoutHistoryUncheckedCreateNestedManyWithoutWorkoutInput
    scheduledEvents?: ScheduledEventUncheckedCreateNestedManyWithoutWorkoutInput
  }

  export type WorkoutCreateOrConnectWithoutFavoriteByInput = {
    where: WorkoutWhereUniqueInput
    create: XOR<WorkoutCreateWithoutFavoriteByInput, WorkoutUncheckedCreateWithoutFavoriteByInput>
  }

  export type UserUpsertWithoutFavoriteWorkoutsInput = {
    update: XOR<UserUpdateWithoutFavoriteWorkoutsInput, UserUncheckedUpdateWithoutFavoriteWorkoutsInput>
    create: XOR<UserCreateWithoutFavoriteWorkoutsInput, UserUncheckedCreateWithoutFavoriteWorkoutsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFavoriteWorkoutsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFavoriteWorkoutsInput, UserUncheckedUpdateWithoutFavoriteWorkoutsInput>
  }

  export type UserUpdateWithoutFavoriteWorkoutsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    goalWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    fitnessLevel?: NullableStringFieldUpdateOperationsInput | string | null
    memberSince?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutHistory?: WorkoutHistoryUpdateManyWithoutUserNestedInput
    favoriteMeditations?: FavoriteMeditationUpdateManyWithoutUserNestedInput
    favoriteYogaSessions?: FavoriteYogaSessionUpdateManyWithoutUserNestedInput
    favoriteRecipes?: FavoriteRecipeUpdateManyWithoutUserNestedInput
    scheduledEvents?: ScheduledEventUpdateManyWithoutUserNestedInput
    weightHistory?: WeightHistoryUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFavoriteWorkoutsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    goalWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    fitnessLevel?: NullableStringFieldUpdateOperationsInput | string | null
    memberSince?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutHistory?: WorkoutHistoryUncheckedUpdateManyWithoutUserNestedInput
    favoriteMeditations?: FavoriteMeditationUncheckedUpdateManyWithoutUserNestedInput
    favoriteYogaSessions?: FavoriteYogaSessionUncheckedUpdateManyWithoutUserNestedInput
    favoriteRecipes?: FavoriteRecipeUncheckedUpdateManyWithoutUserNestedInput
    scheduledEvents?: ScheduledEventUncheckedUpdateManyWithoutUserNestedInput
    weightHistory?: WeightHistoryUncheckedUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
  }

  export type WorkoutUpsertWithoutFavoriteByInput = {
    update: XOR<WorkoutUpdateWithoutFavoriteByInput, WorkoutUncheckedUpdateWithoutFavoriteByInput>
    create: XOR<WorkoutCreateWithoutFavoriteByInput, WorkoutUncheckedCreateWithoutFavoriteByInput>
    where?: WorkoutWhereInput
  }

  export type WorkoutUpdateToOneWithWhereWithoutFavoriteByInput = {
    where?: WorkoutWhereInput
    data: XOR<WorkoutUpdateWithoutFavoriteByInput, WorkoutUncheckedUpdateWithoutFavoriteByInput>
  }

  export type WorkoutUpdateWithoutFavoriteByInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    difficulty?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    calories?: IntFieldUpdateOperationsInput | number
    muscleGroups?: WorkoutUpdatemuscleGroupsInput | string[]
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    exercises?: WorkoutExerciseUpdateManyWithoutWorkoutNestedInput
    workoutHistory?: WorkoutHistoryUpdateManyWithoutWorkoutNestedInput
    scheduledEvents?: ScheduledEventUpdateManyWithoutWorkoutNestedInput
  }

  export type WorkoutUncheckedUpdateWithoutFavoriteByInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    difficulty?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    calories?: IntFieldUpdateOperationsInput | number
    muscleGroups?: WorkoutUpdatemuscleGroupsInput | string[]
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    exercises?: WorkoutExerciseUncheckedUpdateManyWithoutWorkoutNestedInput
    workoutHistory?: WorkoutHistoryUncheckedUpdateManyWithoutWorkoutNestedInput
    scheduledEvents?: ScheduledEventUncheckedUpdateManyWithoutWorkoutNestedInput
  }

  export type UserCreateWithoutFavoriteMeditationsInput = {
    id?: string
    name?: string | null
    firstName?: string | null
    lastName?: string | null
    username?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    height?: number | null
    weight?: number | null
    goalWeight?: number | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    fitnessLevel?: string | null
    memberSince?: Date | string
    workoutHistory?: WorkoutHistoryCreateNestedManyWithoutUserInput
    favoriteWorkouts?: FavoriteWorkoutCreateNestedManyWithoutUserInput
    favoriteYogaSessions?: FavoriteYogaSessionCreateNestedManyWithoutUserInput
    favoriteRecipes?: FavoriteRecipeCreateNestedManyWithoutUserInput
    scheduledEvents?: ScheduledEventCreateNestedManyWithoutUserInput
    weightHistory?: WeightHistoryCreateNestedManyWithoutUserInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    settings?: UserSettingsCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFavoriteMeditationsInput = {
    id?: string
    name?: string | null
    firstName?: string | null
    lastName?: string | null
    username?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    height?: number | null
    weight?: number | null
    goalWeight?: number | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    fitnessLevel?: string | null
    memberSince?: Date | string
    workoutHistory?: WorkoutHistoryUncheckedCreateNestedManyWithoutUserInput
    favoriteWorkouts?: FavoriteWorkoutUncheckedCreateNestedManyWithoutUserInput
    favoriteYogaSessions?: FavoriteYogaSessionUncheckedCreateNestedManyWithoutUserInput
    favoriteRecipes?: FavoriteRecipeUncheckedCreateNestedManyWithoutUserInput
    scheduledEvents?: ScheduledEventUncheckedCreateNestedManyWithoutUserInput
    weightHistory?: WeightHistoryUncheckedCreateNestedManyWithoutUserInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFavoriteMeditationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFavoriteMeditationsInput, UserUncheckedCreateWithoutFavoriteMeditationsInput>
  }

  export type MeditationSessionCreateWithoutFavoriteByInput = {
    title: string
    description: string
    category: string
    duration: number
    level: string
    instructor: string
    audioUrl: string
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    rating?: number
    ratingCount?: number
    scheduledEvents?: ScheduledEventCreateNestedManyWithoutMeditationInput
  }

  export type MeditationSessionUncheckedCreateWithoutFavoriteByInput = {
    id?: number
    title: string
    description: string
    category: string
    duration: number
    level: string
    instructor: string
    audioUrl: string
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    rating?: number
    ratingCount?: number
    scheduledEvents?: ScheduledEventUncheckedCreateNestedManyWithoutMeditationInput
  }

  export type MeditationSessionCreateOrConnectWithoutFavoriteByInput = {
    where: MeditationSessionWhereUniqueInput
    create: XOR<MeditationSessionCreateWithoutFavoriteByInput, MeditationSessionUncheckedCreateWithoutFavoriteByInput>
  }

  export type UserUpsertWithoutFavoriteMeditationsInput = {
    update: XOR<UserUpdateWithoutFavoriteMeditationsInput, UserUncheckedUpdateWithoutFavoriteMeditationsInput>
    create: XOR<UserCreateWithoutFavoriteMeditationsInput, UserUncheckedCreateWithoutFavoriteMeditationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFavoriteMeditationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFavoriteMeditationsInput, UserUncheckedUpdateWithoutFavoriteMeditationsInput>
  }

  export type UserUpdateWithoutFavoriteMeditationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    goalWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    fitnessLevel?: NullableStringFieldUpdateOperationsInput | string | null
    memberSince?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutHistory?: WorkoutHistoryUpdateManyWithoutUserNestedInput
    favoriteWorkouts?: FavoriteWorkoutUpdateManyWithoutUserNestedInput
    favoriteYogaSessions?: FavoriteYogaSessionUpdateManyWithoutUserNestedInput
    favoriteRecipes?: FavoriteRecipeUpdateManyWithoutUserNestedInput
    scheduledEvents?: ScheduledEventUpdateManyWithoutUserNestedInput
    weightHistory?: WeightHistoryUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFavoriteMeditationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    goalWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    fitnessLevel?: NullableStringFieldUpdateOperationsInput | string | null
    memberSince?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutHistory?: WorkoutHistoryUncheckedUpdateManyWithoutUserNestedInput
    favoriteWorkouts?: FavoriteWorkoutUncheckedUpdateManyWithoutUserNestedInput
    favoriteYogaSessions?: FavoriteYogaSessionUncheckedUpdateManyWithoutUserNestedInput
    favoriteRecipes?: FavoriteRecipeUncheckedUpdateManyWithoutUserNestedInput
    scheduledEvents?: ScheduledEventUncheckedUpdateManyWithoutUserNestedInput
    weightHistory?: WeightHistoryUncheckedUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
  }

  export type MeditationSessionUpsertWithoutFavoriteByInput = {
    update: XOR<MeditationSessionUpdateWithoutFavoriteByInput, MeditationSessionUncheckedUpdateWithoutFavoriteByInput>
    create: XOR<MeditationSessionCreateWithoutFavoriteByInput, MeditationSessionUncheckedCreateWithoutFavoriteByInput>
    where?: MeditationSessionWhereInput
  }

  export type MeditationSessionUpdateToOneWithWhereWithoutFavoriteByInput = {
    where?: MeditationSessionWhereInput
    data: XOR<MeditationSessionUpdateWithoutFavoriteByInput, MeditationSessionUncheckedUpdateWithoutFavoriteByInput>
  }

  export type MeditationSessionUpdateWithoutFavoriteByInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    level?: StringFieldUpdateOperationsInput | string
    instructor?: StringFieldUpdateOperationsInput | string
    audioUrl?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    scheduledEvents?: ScheduledEventUpdateManyWithoutMeditationNestedInput
  }

  export type MeditationSessionUncheckedUpdateWithoutFavoriteByInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    level?: StringFieldUpdateOperationsInput | string
    instructor?: StringFieldUpdateOperationsInput | string
    audioUrl?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    scheduledEvents?: ScheduledEventUncheckedUpdateManyWithoutMeditationNestedInput
  }

  export type UserCreateWithoutFavoriteYogaSessionsInput = {
    id?: string
    name?: string | null
    firstName?: string | null
    lastName?: string | null
    username?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    height?: number | null
    weight?: number | null
    goalWeight?: number | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    fitnessLevel?: string | null
    memberSince?: Date | string
    workoutHistory?: WorkoutHistoryCreateNestedManyWithoutUserInput
    favoriteWorkouts?: FavoriteWorkoutCreateNestedManyWithoutUserInput
    favoriteMeditations?: FavoriteMeditationCreateNestedManyWithoutUserInput
    favoriteRecipes?: FavoriteRecipeCreateNestedManyWithoutUserInput
    scheduledEvents?: ScheduledEventCreateNestedManyWithoutUserInput
    weightHistory?: WeightHistoryCreateNestedManyWithoutUserInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    settings?: UserSettingsCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFavoriteYogaSessionsInput = {
    id?: string
    name?: string | null
    firstName?: string | null
    lastName?: string | null
    username?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    height?: number | null
    weight?: number | null
    goalWeight?: number | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    fitnessLevel?: string | null
    memberSince?: Date | string
    workoutHistory?: WorkoutHistoryUncheckedCreateNestedManyWithoutUserInput
    favoriteWorkouts?: FavoriteWorkoutUncheckedCreateNestedManyWithoutUserInput
    favoriteMeditations?: FavoriteMeditationUncheckedCreateNestedManyWithoutUserInput
    favoriteRecipes?: FavoriteRecipeUncheckedCreateNestedManyWithoutUserInput
    scheduledEvents?: ScheduledEventUncheckedCreateNestedManyWithoutUserInput
    weightHistory?: WeightHistoryUncheckedCreateNestedManyWithoutUserInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFavoriteYogaSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFavoriteYogaSessionsInput, UserUncheckedCreateWithoutFavoriteYogaSessionsInput>
  }

  export type YogaSessionCreateWithoutFavoriteByInput = {
    title: string
    description: string
    style: string
    duration: number
    level: string
    instructor: string
    benefits?: YogaSessionCreatebenefitsInput | string[]
    videoUrl: string
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    rating?: number
    ratingCount?: number
    scheduledEvents?: ScheduledEventCreateNestedManyWithoutYogaInput
  }

  export type YogaSessionUncheckedCreateWithoutFavoriteByInput = {
    id?: number
    title: string
    description: string
    style: string
    duration: number
    level: string
    instructor: string
    benefits?: YogaSessionCreatebenefitsInput | string[]
    videoUrl: string
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    rating?: number
    ratingCount?: number
    scheduledEvents?: ScheduledEventUncheckedCreateNestedManyWithoutYogaInput
  }

  export type YogaSessionCreateOrConnectWithoutFavoriteByInput = {
    where: YogaSessionWhereUniqueInput
    create: XOR<YogaSessionCreateWithoutFavoriteByInput, YogaSessionUncheckedCreateWithoutFavoriteByInput>
  }

  export type UserUpsertWithoutFavoriteYogaSessionsInput = {
    update: XOR<UserUpdateWithoutFavoriteYogaSessionsInput, UserUncheckedUpdateWithoutFavoriteYogaSessionsInput>
    create: XOR<UserCreateWithoutFavoriteYogaSessionsInput, UserUncheckedCreateWithoutFavoriteYogaSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFavoriteYogaSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFavoriteYogaSessionsInput, UserUncheckedUpdateWithoutFavoriteYogaSessionsInput>
  }

  export type UserUpdateWithoutFavoriteYogaSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    goalWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    fitnessLevel?: NullableStringFieldUpdateOperationsInput | string | null
    memberSince?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutHistory?: WorkoutHistoryUpdateManyWithoutUserNestedInput
    favoriteWorkouts?: FavoriteWorkoutUpdateManyWithoutUserNestedInput
    favoriteMeditations?: FavoriteMeditationUpdateManyWithoutUserNestedInput
    favoriteRecipes?: FavoriteRecipeUpdateManyWithoutUserNestedInput
    scheduledEvents?: ScheduledEventUpdateManyWithoutUserNestedInput
    weightHistory?: WeightHistoryUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFavoriteYogaSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    goalWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    fitnessLevel?: NullableStringFieldUpdateOperationsInput | string | null
    memberSince?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutHistory?: WorkoutHistoryUncheckedUpdateManyWithoutUserNestedInput
    favoriteWorkouts?: FavoriteWorkoutUncheckedUpdateManyWithoutUserNestedInput
    favoriteMeditations?: FavoriteMeditationUncheckedUpdateManyWithoutUserNestedInput
    favoriteRecipes?: FavoriteRecipeUncheckedUpdateManyWithoutUserNestedInput
    scheduledEvents?: ScheduledEventUncheckedUpdateManyWithoutUserNestedInput
    weightHistory?: WeightHistoryUncheckedUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
  }

  export type YogaSessionUpsertWithoutFavoriteByInput = {
    update: XOR<YogaSessionUpdateWithoutFavoriteByInput, YogaSessionUncheckedUpdateWithoutFavoriteByInput>
    create: XOR<YogaSessionCreateWithoutFavoriteByInput, YogaSessionUncheckedCreateWithoutFavoriteByInput>
    where?: YogaSessionWhereInput
  }

  export type YogaSessionUpdateToOneWithWhereWithoutFavoriteByInput = {
    where?: YogaSessionWhereInput
    data: XOR<YogaSessionUpdateWithoutFavoriteByInput, YogaSessionUncheckedUpdateWithoutFavoriteByInput>
  }

  export type YogaSessionUpdateWithoutFavoriteByInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    style?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    level?: StringFieldUpdateOperationsInput | string
    instructor?: StringFieldUpdateOperationsInput | string
    benefits?: YogaSessionUpdatebenefitsInput | string[]
    videoUrl?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    scheduledEvents?: ScheduledEventUpdateManyWithoutYogaNestedInput
  }

  export type YogaSessionUncheckedUpdateWithoutFavoriteByInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    style?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    level?: StringFieldUpdateOperationsInput | string
    instructor?: StringFieldUpdateOperationsInput | string
    benefits?: YogaSessionUpdatebenefitsInput | string[]
    videoUrl?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    scheduledEvents?: ScheduledEventUncheckedUpdateManyWithoutYogaNestedInput
  }

  export type UserCreateWithoutFavoriteRecipesInput = {
    id?: string
    name?: string | null
    firstName?: string | null
    lastName?: string | null
    username?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    height?: number | null
    weight?: number | null
    goalWeight?: number | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    fitnessLevel?: string | null
    memberSince?: Date | string
    workoutHistory?: WorkoutHistoryCreateNestedManyWithoutUserInput
    favoriteWorkouts?: FavoriteWorkoutCreateNestedManyWithoutUserInput
    favoriteMeditations?: FavoriteMeditationCreateNestedManyWithoutUserInput
    favoriteYogaSessions?: FavoriteYogaSessionCreateNestedManyWithoutUserInput
    scheduledEvents?: ScheduledEventCreateNestedManyWithoutUserInput
    weightHistory?: WeightHistoryCreateNestedManyWithoutUserInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    settings?: UserSettingsCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFavoriteRecipesInput = {
    id?: string
    name?: string | null
    firstName?: string | null
    lastName?: string | null
    username?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    height?: number | null
    weight?: number | null
    goalWeight?: number | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    fitnessLevel?: string | null
    memberSince?: Date | string
    workoutHistory?: WorkoutHistoryUncheckedCreateNestedManyWithoutUserInput
    favoriteWorkouts?: FavoriteWorkoutUncheckedCreateNestedManyWithoutUserInput
    favoriteMeditations?: FavoriteMeditationUncheckedCreateNestedManyWithoutUserInput
    favoriteYogaSessions?: FavoriteYogaSessionUncheckedCreateNestedManyWithoutUserInput
    scheduledEvents?: ScheduledEventUncheckedCreateNestedManyWithoutUserInput
    weightHistory?: WeightHistoryUncheckedCreateNestedManyWithoutUserInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFavoriteRecipesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFavoriteRecipesInput, UserUncheckedCreateWithoutFavoriteRecipesInput>
  }

  export type RecipeCreateWithoutFavoriteByInput = {
    title: string
    description: string
    category: string
    difficulty: string
    prepTime: number
    cookTime: number
    servings: number
    calories: number
    protein?: number | null
    carbs?: number | null
    fat?: number | null
    tags?: RecipeCreatetagsInput | string[]
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    rating?: number
    ratingCount?: number
    author?: string | null
    ingredients?: RecipeIngredientCreateNestedManyWithoutRecipeInput
    instructions?: RecipeInstructionCreateNestedManyWithoutRecipeInput
  }

  export type RecipeUncheckedCreateWithoutFavoriteByInput = {
    id?: number
    title: string
    description: string
    category: string
    difficulty: string
    prepTime: number
    cookTime: number
    servings: number
    calories: number
    protein?: number | null
    carbs?: number | null
    fat?: number | null
    tags?: RecipeCreatetagsInput | string[]
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    rating?: number
    ratingCount?: number
    author?: string | null
    ingredients?: RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInput
    instructions?: RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInput
  }

  export type RecipeCreateOrConnectWithoutFavoriteByInput = {
    where: RecipeWhereUniqueInput
    create: XOR<RecipeCreateWithoutFavoriteByInput, RecipeUncheckedCreateWithoutFavoriteByInput>
  }

  export type UserUpsertWithoutFavoriteRecipesInput = {
    update: XOR<UserUpdateWithoutFavoriteRecipesInput, UserUncheckedUpdateWithoutFavoriteRecipesInput>
    create: XOR<UserCreateWithoutFavoriteRecipesInput, UserUncheckedCreateWithoutFavoriteRecipesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFavoriteRecipesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFavoriteRecipesInput, UserUncheckedUpdateWithoutFavoriteRecipesInput>
  }

  export type UserUpdateWithoutFavoriteRecipesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    goalWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    fitnessLevel?: NullableStringFieldUpdateOperationsInput | string | null
    memberSince?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutHistory?: WorkoutHistoryUpdateManyWithoutUserNestedInput
    favoriteWorkouts?: FavoriteWorkoutUpdateManyWithoutUserNestedInput
    favoriteMeditations?: FavoriteMeditationUpdateManyWithoutUserNestedInput
    favoriteYogaSessions?: FavoriteYogaSessionUpdateManyWithoutUserNestedInput
    scheduledEvents?: ScheduledEventUpdateManyWithoutUserNestedInput
    weightHistory?: WeightHistoryUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFavoriteRecipesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    goalWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    fitnessLevel?: NullableStringFieldUpdateOperationsInput | string | null
    memberSince?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutHistory?: WorkoutHistoryUncheckedUpdateManyWithoutUserNestedInput
    favoriteWorkouts?: FavoriteWorkoutUncheckedUpdateManyWithoutUserNestedInput
    favoriteMeditations?: FavoriteMeditationUncheckedUpdateManyWithoutUserNestedInput
    favoriteYogaSessions?: FavoriteYogaSessionUncheckedUpdateManyWithoutUserNestedInput
    scheduledEvents?: ScheduledEventUncheckedUpdateManyWithoutUserNestedInput
    weightHistory?: WeightHistoryUncheckedUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
  }

  export type RecipeUpsertWithoutFavoriteByInput = {
    update: XOR<RecipeUpdateWithoutFavoriteByInput, RecipeUncheckedUpdateWithoutFavoriteByInput>
    create: XOR<RecipeCreateWithoutFavoriteByInput, RecipeUncheckedCreateWithoutFavoriteByInput>
    where?: RecipeWhereInput
  }

  export type RecipeUpdateToOneWithWhereWithoutFavoriteByInput = {
    where?: RecipeWhereInput
    data: XOR<RecipeUpdateWithoutFavoriteByInput, RecipeUncheckedUpdateWithoutFavoriteByInput>
  }

  export type RecipeUpdateWithoutFavoriteByInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    difficulty?: StringFieldUpdateOperationsInput | string
    prepTime?: IntFieldUpdateOperationsInput | number
    cookTime?: IntFieldUpdateOperationsInput | number
    servings?: IntFieldUpdateOperationsInput | number
    calories?: IntFieldUpdateOperationsInput | number
    protein?: NullableFloatFieldUpdateOperationsInput | number | null
    carbs?: NullableFloatFieldUpdateOperationsInput | number | null
    fat?: NullableFloatFieldUpdateOperationsInput | number | null
    tags?: RecipeUpdatetagsInput | string[]
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    author?: NullableStringFieldUpdateOperationsInput | string | null
    ingredients?: RecipeIngredientUpdateManyWithoutRecipeNestedInput
    instructions?: RecipeInstructionUpdateManyWithoutRecipeNestedInput
  }

  export type RecipeUncheckedUpdateWithoutFavoriteByInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    difficulty?: StringFieldUpdateOperationsInput | string
    prepTime?: IntFieldUpdateOperationsInput | number
    cookTime?: IntFieldUpdateOperationsInput | number
    servings?: IntFieldUpdateOperationsInput | number
    calories?: IntFieldUpdateOperationsInput | number
    protein?: NullableFloatFieldUpdateOperationsInput | number | null
    carbs?: NullableFloatFieldUpdateOperationsInput | number | null
    fat?: NullableFloatFieldUpdateOperationsInput | number | null
    tags?: RecipeUpdatetagsInput | string[]
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    author?: NullableStringFieldUpdateOperationsInput | string | null
    ingredients?: RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInput
    instructions?: RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInput
  }

  export type UserCreateWithoutWeightHistoryInput = {
    id?: string
    name?: string | null
    firstName?: string | null
    lastName?: string | null
    username?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    height?: number | null
    weight?: number | null
    goalWeight?: number | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    fitnessLevel?: string | null
    memberSince?: Date | string
    workoutHistory?: WorkoutHistoryCreateNestedManyWithoutUserInput
    favoriteWorkouts?: FavoriteWorkoutCreateNestedManyWithoutUserInput
    favoriteMeditations?: FavoriteMeditationCreateNestedManyWithoutUserInput
    favoriteYogaSessions?: FavoriteYogaSessionCreateNestedManyWithoutUserInput
    favoriteRecipes?: FavoriteRecipeCreateNestedManyWithoutUserInput
    scheduledEvents?: ScheduledEventCreateNestedManyWithoutUserInput
    achievements?: UserAchievementCreateNestedManyWithoutUserInput
    settings?: UserSettingsCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutWeightHistoryInput = {
    id?: string
    name?: string | null
    firstName?: string | null
    lastName?: string | null
    username?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    height?: number | null
    weight?: number | null
    goalWeight?: number | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    fitnessLevel?: string | null
    memberSince?: Date | string
    workoutHistory?: WorkoutHistoryUncheckedCreateNestedManyWithoutUserInput
    favoriteWorkouts?: FavoriteWorkoutUncheckedCreateNestedManyWithoutUserInput
    favoriteMeditations?: FavoriteMeditationUncheckedCreateNestedManyWithoutUserInput
    favoriteYogaSessions?: FavoriteYogaSessionUncheckedCreateNestedManyWithoutUserInput
    favoriteRecipes?: FavoriteRecipeUncheckedCreateNestedManyWithoutUserInput
    scheduledEvents?: ScheduledEventUncheckedCreateNestedManyWithoutUserInput
    achievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutWeightHistoryInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWeightHistoryInput, UserUncheckedCreateWithoutWeightHistoryInput>
  }

  export type UserUpsertWithoutWeightHistoryInput = {
    update: XOR<UserUpdateWithoutWeightHistoryInput, UserUncheckedUpdateWithoutWeightHistoryInput>
    create: XOR<UserCreateWithoutWeightHistoryInput, UserUncheckedCreateWithoutWeightHistoryInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWeightHistoryInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWeightHistoryInput, UserUncheckedUpdateWithoutWeightHistoryInput>
  }

  export type UserUpdateWithoutWeightHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    goalWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    fitnessLevel?: NullableStringFieldUpdateOperationsInput | string | null
    memberSince?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutHistory?: WorkoutHistoryUpdateManyWithoutUserNestedInput
    favoriteWorkouts?: FavoriteWorkoutUpdateManyWithoutUserNestedInput
    favoriteMeditations?: FavoriteMeditationUpdateManyWithoutUserNestedInput
    favoriteYogaSessions?: FavoriteYogaSessionUpdateManyWithoutUserNestedInput
    favoriteRecipes?: FavoriteRecipeUpdateManyWithoutUserNestedInput
    scheduledEvents?: ScheduledEventUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutWeightHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    goalWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    fitnessLevel?: NullableStringFieldUpdateOperationsInput | string | null
    memberSince?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutHistory?: WorkoutHistoryUncheckedUpdateManyWithoutUserNestedInput
    favoriteWorkouts?: FavoriteWorkoutUncheckedUpdateManyWithoutUserNestedInput
    favoriteMeditations?: FavoriteMeditationUncheckedUpdateManyWithoutUserNestedInput
    favoriteYogaSessions?: FavoriteYogaSessionUncheckedUpdateManyWithoutUserNestedInput
    favoriteRecipes?: FavoriteRecipeUncheckedUpdateManyWithoutUserNestedInput
    scheduledEvents?: ScheduledEventUncheckedUpdateManyWithoutUserNestedInput
    achievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserAchievementCreateWithoutAchievementInput = {
    id?: string
    achievedAt?: Date | string
    user: UserCreateNestedOneWithoutAchievementsInput
  }

  export type UserAchievementUncheckedCreateWithoutAchievementInput = {
    id?: string
    userId: string
    achievedAt?: Date | string
  }

  export type UserAchievementCreateOrConnectWithoutAchievementInput = {
    where: UserAchievementWhereUniqueInput
    create: XOR<UserAchievementCreateWithoutAchievementInput, UserAchievementUncheckedCreateWithoutAchievementInput>
  }

  export type UserAchievementCreateManyAchievementInputEnvelope = {
    data: UserAchievementCreateManyAchievementInput | UserAchievementCreateManyAchievementInput[]
    skipDuplicates?: boolean
  }

  export type UserAchievementUpsertWithWhereUniqueWithoutAchievementInput = {
    where: UserAchievementWhereUniqueInput
    update: XOR<UserAchievementUpdateWithoutAchievementInput, UserAchievementUncheckedUpdateWithoutAchievementInput>
    create: XOR<UserAchievementCreateWithoutAchievementInput, UserAchievementUncheckedCreateWithoutAchievementInput>
  }

  export type UserAchievementUpdateWithWhereUniqueWithoutAchievementInput = {
    where: UserAchievementWhereUniqueInput
    data: XOR<UserAchievementUpdateWithoutAchievementInput, UserAchievementUncheckedUpdateWithoutAchievementInput>
  }

  export type UserAchievementUpdateManyWithWhereWithoutAchievementInput = {
    where: UserAchievementScalarWhereInput
    data: XOR<UserAchievementUpdateManyMutationInput, UserAchievementUncheckedUpdateManyWithoutAchievementInput>
  }

  export type UserCreateWithoutAchievementsInput = {
    id?: string
    name?: string | null
    firstName?: string | null
    lastName?: string | null
    username?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    height?: number | null
    weight?: number | null
    goalWeight?: number | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    fitnessLevel?: string | null
    memberSince?: Date | string
    workoutHistory?: WorkoutHistoryCreateNestedManyWithoutUserInput
    favoriteWorkouts?: FavoriteWorkoutCreateNestedManyWithoutUserInput
    favoriteMeditations?: FavoriteMeditationCreateNestedManyWithoutUserInput
    favoriteYogaSessions?: FavoriteYogaSessionCreateNestedManyWithoutUserInput
    favoriteRecipes?: FavoriteRecipeCreateNestedManyWithoutUserInput
    scheduledEvents?: ScheduledEventCreateNestedManyWithoutUserInput
    weightHistory?: WeightHistoryCreateNestedManyWithoutUserInput
    settings?: UserSettingsCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAchievementsInput = {
    id?: string
    name?: string | null
    firstName?: string | null
    lastName?: string | null
    username?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    height?: number | null
    weight?: number | null
    goalWeight?: number | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    fitnessLevel?: string | null
    memberSince?: Date | string
    workoutHistory?: WorkoutHistoryUncheckedCreateNestedManyWithoutUserInput
    favoriteWorkouts?: FavoriteWorkoutUncheckedCreateNestedManyWithoutUserInput
    favoriteMeditations?: FavoriteMeditationUncheckedCreateNestedManyWithoutUserInput
    favoriteYogaSessions?: FavoriteYogaSessionUncheckedCreateNestedManyWithoutUserInput
    favoriteRecipes?: FavoriteRecipeUncheckedCreateNestedManyWithoutUserInput
    scheduledEvents?: ScheduledEventUncheckedCreateNestedManyWithoutUserInput
    weightHistory?: WeightHistoryUncheckedCreateNestedManyWithoutUserInput
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAchievementsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAchievementsInput, UserUncheckedCreateWithoutAchievementsInput>
  }

  export type AchievementCreateWithoutUsersInput = {
    id?: string
    name: string
    description: string
    category: string
    imageUrl?: string | null
    criteria: JsonNullValueInput | InputJsonValue
  }

  export type AchievementUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    description: string
    category: string
    imageUrl?: string | null
    criteria: JsonNullValueInput | InputJsonValue
  }

  export type AchievementCreateOrConnectWithoutUsersInput = {
    where: AchievementWhereUniqueInput
    create: XOR<AchievementCreateWithoutUsersInput, AchievementUncheckedCreateWithoutUsersInput>
  }

  export type UserUpsertWithoutAchievementsInput = {
    update: XOR<UserUpdateWithoutAchievementsInput, UserUncheckedUpdateWithoutAchievementsInput>
    create: XOR<UserCreateWithoutAchievementsInput, UserUncheckedCreateWithoutAchievementsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAchievementsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAchievementsInput, UserUncheckedUpdateWithoutAchievementsInput>
  }

  export type UserUpdateWithoutAchievementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    goalWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    fitnessLevel?: NullableStringFieldUpdateOperationsInput | string | null
    memberSince?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutHistory?: WorkoutHistoryUpdateManyWithoutUserNestedInput
    favoriteWorkouts?: FavoriteWorkoutUpdateManyWithoutUserNestedInput
    favoriteMeditations?: FavoriteMeditationUpdateManyWithoutUserNestedInput
    favoriteYogaSessions?: FavoriteYogaSessionUpdateManyWithoutUserNestedInput
    favoriteRecipes?: FavoriteRecipeUpdateManyWithoutUserNestedInput
    scheduledEvents?: ScheduledEventUpdateManyWithoutUserNestedInput
    weightHistory?: WeightHistoryUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAchievementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    goalWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    fitnessLevel?: NullableStringFieldUpdateOperationsInput | string | null
    memberSince?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutHistory?: WorkoutHistoryUncheckedUpdateManyWithoutUserNestedInput
    favoriteWorkouts?: FavoriteWorkoutUncheckedUpdateManyWithoutUserNestedInput
    favoriteMeditations?: FavoriteMeditationUncheckedUpdateManyWithoutUserNestedInput
    favoriteYogaSessions?: FavoriteYogaSessionUncheckedUpdateManyWithoutUserNestedInput
    favoriteRecipes?: FavoriteRecipeUncheckedUpdateManyWithoutUserNestedInput
    scheduledEvents?: ScheduledEventUncheckedUpdateManyWithoutUserNestedInput
    weightHistory?: WeightHistoryUncheckedUpdateManyWithoutUserNestedInput
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
  }

  export type AchievementUpsertWithoutUsersInput = {
    update: XOR<AchievementUpdateWithoutUsersInput, AchievementUncheckedUpdateWithoutUsersInput>
    create: XOR<AchievementCreateWithoutUsersInput, AchievementUncheckedCreateWithoutUsersInput>
    where?: AchievementWhereInput
  }

  export type AchievementUpdateToOneWithWhereWithoutUsersInput = {
    where?: AchievementWhereInput
    data: XOR<AchievementUpdateWithoutUsersInput, AchievementUncheckedUpdateWithoutUsersInput>
  }

  export type AchievementUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    criteria?: JsonNullValueInput | InputJsonValue
  }

  export type AchievementUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    criteria?: JsonNullValueInput | InputJsonValue
  }

  export type WorkoutHistoryCreateManyUserInput = {
    id?: string
    workoutId: number
    completedAt?: Date | string
    duration: number
    notes?: string | null
    rating?: number | null
    exerciseResults?: NullableJsonNullValueInput | InputJsonValue
  }

  export type FavoriteWorkoutCreateManyUserInput = {
    id?: string
    workoutId: number
    addedAt?: Date | string
  }

  export type FavoriteMeditationCreateManyUserInput = {
    id?: string
    meditationId: number
    addedAt?: Date | string
  }

  export type FavoriteYogaSessionCreateManyUserInput = {
    id?: string
    yogaId: number
    addedAt?: Date | string
  }

  export type FavoriteRecipeCreateManyUserInput = {
    id?: string
    recipeId: number
    addedAt?: Date | string
  }

  export type ScheduledEventCreateManyUserInput = {
    id?: string
    title: string
    date: Date | string
    time: string
    duration: number
    eventType: string
    completed?: boolean
    notes?: string | null
    workoutId?: number | null
    meditationId?: number | null
    yogaId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WeightHistoryCreateManyUserInput = {
    id?: string
    weight: number
    date?: Date | string
    notes?: string | null
  }

  export type UserAchievementCreateManyUserInput = {
    id?: string
    achievementId: string
    achievedAt?: Date | string
  }

  export type WorkoutHistoryUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    exerciseResults?: NullableJsonNullValueInput | InputJsonValue
    workout?: WorkoutUpdateOneRequiredWithoutWorkoutHistoryNestedInput
  }

  export type WorkoutHistoryUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    workoutId?: IntFieldUpdateOperationsInput | number
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    exerciseResults?: NullableJsonNullValueInput | InputJsonValue
  }

  export type WorkoutHistoryUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    workoutId?: IntFieldUpdateOperationsInput | number
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    exerciseResults?: NullableJsonNullValueInput | InputJsonValue
  }

  export type FavoriteWorkoutUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workout?: WorkoutUpdateOneRequiredWithoutFavoriteByNestedInput
  }

  export type FavoriteWorkoutUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    workoutId?: IntFieldUpdateOperationsInput | number
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteWorkoutUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    workoutId?: IntFieldUpdateOperationsInput | number
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteMeditationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meditation?: MeditationSessionUpdateOneRequiredWithoutFavoriteByNestedInput
  }

  export type FavoriteMeditationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    meditationId?: IntFieldUpdateOperationsInput | number
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteMeditationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    meditationId?: IntFieldUpdateOperationsInput | number
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteYogaSessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    yoga?: YogaSessionUpdateOneRequiredWithoutFavoriteByNestedInput
  }

  export type FavoriteYogaSessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    yogaId?: IntFieldUpdateOperationsInput | number
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteYogaSessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    yogaId?: IntFieldUpdateOperationsInput | number
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteRecipeUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    recipe?: RecipeUpdateOneRequiredWithoutFavoriteByNestedInput
  }

  export type FavoriteRecipeUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    recipeId?: IntFieldUpdateOperationsInput | number
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteRecipeUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    recipeId?: IntFieldUpdateOperationsInput | number
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduledEventUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    eventType?: StringFieldUpdateOperationsInput | string
    completed?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workout?: WorkoutUpdateOneWithoutScheduledEventsNestedInput
    meditation?: MeditationSessionUpdateOneWithoutScheduledEventsNestedInput
    yoga?: YogaSessionUpdateOneWithoutScheduledEventsNestedInput
  }

  export type ScheduledEventUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    eventType?: StringFieldUpdateOperationsInput | string
    completed?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    workoutId?: NullableIntFieldUpdateOperationsInput | number | null
    meditationId?: NullableIntFieldUpdateOperationsInput | number | null
    yogaId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduledEventUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    eventType?: StringFieldUpdateOperationsInput | string
    completed?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    workoutId?: NullableIntFieldUpdateOperationsInput | number | null
    meditationId?: NullableIntFieldUpdateOperationsInput | number | null
    yogaId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WeightHistoryUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WeightHistoryUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WeightHistoryUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserAchievementUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    achievedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    achievement?: AchievementUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserAchievementUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    achievementId?: StringFieldUpdateOperationsInput | string
    achievedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAchievementUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    achievementId?: StringFieldUpdateOperationsInput | string
    achievedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkoutExerciseCreateManyWorkoutInput = {
    id?: number
    exerciseId: number
    sets?: number | null
    reps?: string | null
    weight?: number | null
    restTime?: number | null
    notes?: string | null
    order: number
  }

  export type WorkoutHistoryCreateManyWorkoutInput = {
    id?: string
    userId: string
    completedAt?: Date | string
    duration: number
    notes?: string | null
    rating?: number | null
    exerciseResults?: NullableJsonNullValueInput | InputJsonValue
  }

  export type FavoriteWorkoutCreateManyWorkoutInput = {
    id?: string
    userId: string
    addedAt?: Date | string
  }

  export type ScheduledEventCreateManyWorkoutInput = {
    id?: string
    userId: string
    title: string
    date: Date | string
    time: string
    duration: number
    eventType: string
    completed?: boolean
    notes?: string | null
    meditationId?: number | null
    yogaId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkoutExerciseUpdateWithoutWorkoutInput = {
    sets?: NullableIntFieldUpdateOperationsInput | number | null
    reps?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    restTime?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    exercise?: ExerciseUpdateOneRequiredWithoutWorkoutsNestedInput
  }

  export type WorkoutExerciseUncheckedUpdateWithoutWorkoutInput = {
    id?: IntFieldUpdateOperationsInput | number
    exerciseId?: IntFieldUpdateOperationsInput | number
    sets?: NullableIntFieldUpdateOperationsInput | number | null
    reps?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    restTime?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
  }

  export type WorkoutExerciseUncheckedUpdateManyWithoutWorkoutInput = {
    id?: IntFieldUpdateOperationsInput | number
    exerciseId?: IntFieldUpdateOperationsInput | number
    sets?: NullableIntFieldUpdateOperationsInput | number | null
    reps?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    restTime?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
  }

  export type WorkoutHistoryUpdateWithoutWorkoutInput = {
    id?: StringFieldUpdateOperationsInput | string
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    exerciseResults?: NullableJsonNullValueInput | InputJsonValue
    user?: UserUpdateOneRequiredWithoutWorkoutHistoryNestedInput
  }

  export type WorkoutHistoryUncheckedUpdateWithoutWorkoutInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    exerciseResults?: NullableJsonNullValueInput | InputJsonValue
  }

  export type WorkoutHistoryUncheckedUpdateManyWithoutWorkoutInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    exerciseResults?: NullableJsonNullValueInput | InputJsonValue
  }

  export type FavoriteWorkoutUpdateWithoutWorkoutInput = {
    id?: StringFieldUpdateOperationsInput | string
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFavoriteWorkoutsNestedInput
  }

  export type FavoriteWorkoutUncheckedUpdateWithoutWorkoutInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteWorkoutUncheckedUpdateManyWithoutWorkoutInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduledEventUpdateWithoutWorkoutInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    eventType?: StringFieldUpdateOperationsInput | string
    completed?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meditation?: MeditationSessionUpdateOneWithoutScheduledEventsNestedInput
    yoga?: YogaSessionUpdateOneWithoutScheduledEventsNestedInput
    user?: UserUpdateOneRequiredWithoutScheduledEventsNestedInput
  }

  export type ScheduledEventUncheckedUpdateWithoutWorkoutInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    eventType?: StringFieldUpdateOperationsInput | string
    completed?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    meditationId?: NullableIntFieldUpdateOperationsInput | number | null
    yogaId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduledEventUncheckedUpdateManyWithoutWorkoutInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    eventType?: StringFieldUpdateOperationsInput | string
    completed?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    meditationId?: NullableIntFieldUpdateOperationsInput | number | null
    yogaId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkoutExerciseCreateManyExerciseInput = {
    id?: number
    workoutId: number
    sets?: number | null
    reps?: string | null
    weight?: number | null
    restTime?: number | null
    notes?: string | null
    order: number
  }

  export type WorkoutExerciseUpdateWithoutExerciseInput = {
    sets?: NullableIntFieldUpdateOperationsInput | number | null
    reps?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    restTime?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    workout?: WorkoutUpdateOneRequiredWithoutExercisesNestedInput
  }

  export type WorkoutExerciseUncheckedUpdateWithoutExerciseInput = {
    id?: IntFieldUpdateOperationsInput | number
    workoutId?: IntFieldUpdateOperationsInput | number
    sets?: NullableIntFieldUpdateOperationsInput | number | null
    reps?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    restTime?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
  }

  export type WorkoutExerciseUncheckedUpdateManyWithoutExerciseInput = {
    id?: IntFieldUpdateOperationsInput | number
    workoutId?: IntFieldUpdateOperationsInput | number
    sets?: NullableIntFieldUpdateOperationsInput | number | null
    reps?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    restTime?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
  }

  export type FavoriteMeditationCreateManyMeditationInput = {
    id?: string
    userId: string
    addedAt?: Date | string
  }

  export type ScheduledEventCreateManyMeditationInput = {
    id?: string
    userId: string
    title: string
    date: Date | string
    time: string
    duration: number
    eventType: string
    completed?: boolean
    notes?: string | null
    workoutId?: number | null
    yogaId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FavoriteMeditationUpdateWithoutMeditationInput = {
    id?: StringFieldUpdateOperationsInput | string
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFavoriteMeditationsNestedInput
  }

  export type FavoriteMeditationUncheckedUpdateWithoutMeditationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteMeditationUncheckedUpdateManyWithoutMeditationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduledEventUpdateWithoutMeditationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    eventType?: StringFieldUpdateOperationsInput | string
    completed?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workout?: WorkoutUpdateOneWithoutScheduledEventsNestedInput
    yoga?: YogaSessionUpdateOneWithoutScheduledEventsNestedInput
    user?: UserUpdateOneRequiredWithoutScheduledEventsNestedInput
  }

  export type ScheduledEventUncheckedUpdateWithoutMeditationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    eventType?: StringFieldUpdateOperationsInput | string
    completed?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    workoutId?: NullableIntFieldUpdateOperationsInput | number | null
    yogaId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduledEventUncheckedUpdateManyWithoutMeditationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    eventType?: StringFieldUpdateOperationsInput | string
    completed?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    workoutId?: NullableIntFieldUpdateOperationsInput | number | null
    yogaId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteYogaSessionCreateManyYogaInput = {
    id?: string
    userId: string
    addedAt?: Date | string
  }

  export type ScheduledEventCreateManyYogaInput = {
    id?: string
    userId: string
    title: string
    date: Date | string
    time: string
    duration: number
    eventType: string
    completed?: boolean
    notes?: string | null
    workoutId?: number | null
    meditationId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FavoriteYogaSessionUpdateWithoutYogaInput = {
    id?: StringFieldUpdateOperationsInput | string
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFavoriteYogaSessionsNestedInput
  }

  export type FavoriteYogaSessionUncheckedUpdateWithoutYogaInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteYogaSessionUncheckedUpdateManyWithoutYogaInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduledEventUpdateWithoutYogaInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    eventType?: StringFieldUpdateOperationsInput | string
    completed?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workout?: WorkoutUpdateOneWithoutScheduledEventsNestedInput
    meditation?: MeditationSessionUpdateOneWithoutScheduledEventsNestedInput
    user?: UserUpdateOneRequiredWithoutScheduledEventsNestedInput
  }

  export type ScheduledEventUncheckedUpdateWithoutYogaInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    eventType?: StringFieldUpdateOperationsInput | string
    completed?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    workoutId?: NullableIntFieldUpdateOperationsInput | number | null
    meditationId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduledEventUncheckedUpdateManyWithoutYogaInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    eventType?: StringFieldUpdateOperationsInput | string
    completed?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    workoutId?: NullableIntFieldUpdateOperationsInput | number | null
    meditationId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecipeIngredientCreateManyRecipeInput = {
    id?: number
    ingredientId: number
    quantity: string
    unit: string
  }

  export type RecipeInstructionCreateManyRecipeInput = {
    id?: number
    stepNumber: number
    instruction: string
  }

  export type FavoriteRecipeCreateManyRecipeInput = {
    id?: string
    userId: string
    addedAt?: Date | string
  }

  export type RecipeIngredientUpdateWithoutRecipeInput = {
    quantity?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    ingredient?: IngredientUpdateOneRequiredWithoutRecipesNestedInput
  }

  export type RecipeIngredientUncheckedUpdateWithoutRecipeInput = {
    id?: IntFieldUpdateOperationsInput | number
    ingredientId?: IntFieldUpdateOperationsInput | number
    quantity?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
  }

  export type RecipeIngredientUncheckedUpdateManyWithoutRecipeInput = {
    id?: IntFieldUpdateOperationsInput | number
    ingredientId?: IntFieldUpdateOperationsInput | number
    quantity?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
  }

  export type RecipeInstructionUpdateWithoutRecipeInput = {
    stepNumber?: IntFieldUpdateOperationsInput | number
    instruction?: StringFieldUpdateOperationsInput | string
  }

  export type RecipeInstructionUncheckedUpdateWithoutRecipeInput = {
    id?: IntFieldUpdateOperationsInput | number
    stepNumber?: IntFieldUpdateOperationsInput | number
    instruction?: StringFieldUpdateOperationsInput | string
  }

  export type RecipeInstructionUncheckedUpdateManyWithoutRecipeInput = {
    id?: IntFieldUpdateOperationsInput | number
    stepNumber?: IntFieldUpdateOperationsInput | number
    instruction?: StringFieldUpdateOperationsInput | string
  }

  export type FavoriteRecipeUpdateWithoutRecipeInput = {
    id?: StringFieldUpdateOperationsInput | string
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFavoriteRecipesNestedInput
  }

  export type FavoriteRecipeUncheckedUpdateWithoutRecipeInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteRecipeUncheckedUpdateManyWithoutRecipeInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecipeIngredientCreateManyIngredientInput = {
    id?: number
    recipeId: number
    quantity: string
    unit: string
  }

  export type RecipeIngredientUpdateWithoutIngredientInput = {
    quantity?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    recipe?: RecipeUpdateOneRequiredWithoutIngredientsNestedInput
  }

  export type RecipeIngredientUncheckedUpdateWithoutIngredientInput = {
    id?: IntFieldUpdateOperationsInput | number
    recipeId?: IntFieldUpdateOperationsInput | number
    quantity?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
  }

  export type RecipeIngredientUncheckedUpdateManyWithoutIngredientInput = {
    id?: IntFieldUpdateOperationsInput | number
    recipeId?: IntFieldUpdateOperationsInput | number
    quantity?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
  }

  export type UserAchievementCreateManyAchievementInput = {
    id?: string
    userId: string
    achievedAt?: Date | string
  }

  export type UserAchievementUpdateWithoutAchievementInput = {
    id?: StringFieldUpdateOperationsInput | string
    achievedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAchievementsNestedInput
  }

  export type UserAchievementUncheckedUpdateWithoutAchievementInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    achievedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAchievementUncheckedUpdateManyWithoutAchievementInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    achievedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WorkoutCountOutputTypeDefaultArgs instead
     */
    export type WorkoutCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WorkoutCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ExerciseCountOutputTypeDefaultArgs instead
     */
    export type ExerciseCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ExerciseCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MeditationSessionCountOutputTypeDefaultArgs instead
     */
    export type MeditationSessionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MeditationSessionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use YogaSessionCountOutputTypeDefaultArgs instead
     */
    export type YogaSessionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = YogaSessionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RecipeCountOutputTypeDefaultArgs instead
     */
    export type RecipeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RecipeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use IngredientCountOutputTypeDefaultArgs instead
     */
    export type IngredientCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = IngredientCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AchievementCountOutputTypeDefaultArgs instead
     */
    export type AchievementCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AchievementCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserSettingsDefaultArgs instead
     */
    export type UserSettingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserSettingsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WorkoutDefaultArgs instead
     */
    export type WorkoutArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WorkoutDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ExerciseDefaultArgs instead
     */
    export type ExerciseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ExerciseDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WorkoutExerciseDefaultArgs instead
     */
    export type WorkoutExerciseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WorkoutExerciseDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MeditationSessionDefaultArgs instead
     */
    export type MeditationSessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MeditationSessionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use YogaSessionDefaultArgs instead
     */
    export type YogaSessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = YogaSessionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RecipeDefaultArgs instead
     */
    export type RecipeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RecipeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use IngredientDefaultArgs instead
     */
    export type IngredientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = IngredientDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RecipeIngredientDefaultArgs instead
     */
    export type RecipeIngredientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RecipeIngredientDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RecipeInstructionDefaultArgs instead
     */
    export type RecipeInstructionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RecipeInstructionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BlogPostDefaultArgs instead
     */
    export type BlogPostArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BlogPostDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ScheduledEventDefaultArgs instead
     */
    export type ScheduledEventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ScheduledEventDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WorkoutHistoryDefaultArgs instead
     */
    export type WorkoutHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WorkoutHistoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FavoriteWorkoutDefaultArgs instead
     */
    export type FavoriteWorkoutArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FavoriteWorkoutDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FavoriteMeditationDefaultArgs instead
     */
    export type FavoriteMeditationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FavoriteMeditationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FavoriteYogaSessionDefaultArgs instead
     */
    export type FavoriteYogaSessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FavoriteYogaSessionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FavoriteRecipeDefaultArgs instead
     */
    export type FavoriteRecipeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FavoriteRecipeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WeightHistoryDefaultArgs instead
     */
    export type WeightHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WeightHistoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AchievementDefaultArgs instead
     */
    export type AchievementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AchievementDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserAchievementDefaultArgs instead
     */
    export type UserAchievementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserAchievementDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}